<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Troubleshooting | Bits, Bytes, and Words]]></title>
  <link href="https://blog.jez.io/categories/troubleshooting/atom.xml" rel="self"/>
  <link href="https://blog.jez.io/"/>
  <updated>2017-07-16T18:09:22-04:00</updated>
  <id>https://blog.jez.io/</id>
  <author>
    <name><![CDATA[Jake Zimmerman]]></name>
    <email><![CDATA[jake@zimmerman.io]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Troubleshooting Haskell Stack Setup on OS X]]></title>
    <link href="https://blog.jez.io/2016/08/03/troubleshooting-haskell-stack-setup-on-os-x/"/>
    <updated>2016-08-03T00:04:08-04:00</updated>
    <id>https://blog.jez.io/2016/08/03/troubleshooting-haskell-stack-setup-on-os-x</id>
    <content type="html"><![CDATA[<p>Stephen Diehl&rsquo;s article <a href="http://www.stephendiehl.com/posts/vim_2016.html">Vim and Haskell in 2016</a> does a great
job of outlining the quickest way to get a quality Haskell development
experience. I ran into a simple issue when I followed it due to a bit of an
idiosyncrasy on OS X El Capitan. I also document a few of the extra steps I took
which aren&rsquo;t mentioned explicitly in his original article.</p>

<!-- more -->


<p>This post wouldn&rsquo;t actually be necessary if it weren&rsquo;t for one thing: <a href="https://support.apple.com/en-us/HT204899">System
Integrity Protection</a> in OS X El Capitan, also known as &ldquo;rootless&rdquo;
mode. It affects Haskell&rsquo;s build and install step in a subtle (but solved) way,
and the rest of the article will cover what to watch out for when installing on
OS X.</p>

<p>If you don&rsquo;t follow these instructions and you&rsquo;re on OS X El Capitan, you&rsquo;ll
likely run into an issue that looks like <code>/usr/bin/ar: permission denied</code>. The
Stack installation instructions call this out specifically:</p>

<blockquote><p>If you are on OS X 10.11 (&ldquo;El Capitan&rdquo;) or later, GHC 7.8.4 is incompatible
with System Integrity Protection (a.k.a. &ldquo;rootless&rdquo;). GHC 7.10.2 includes a
fix, so this only affects users of GHC 7.8.4.</p></blockquote>

<p>At the risk of spoiling the surprise, we&rsquo;re going to set up Stack while taking
care to make sure that we get GHC >= 7.10. So let&rsquo;s do just that!</p>

<h2>Environment Prep (optional)</h2>

<p>Note that this step is optional and has nothing to do with OS X; I just wanted
to point it out quickly.</p>

<p>Under <a href="http://www.stephendiehl.com/posts/vim_2016.html#dev-environment">Dev Environment</a> on <a href="http://www.stephendiehl.com/posts/vim_2016.html">Vim and Haskell in
2016</a>, Stephen Diehl writes:</p>

<blockquote><p>Times have changed quite a bit, and the new preferred way of installing GHC in
2016 is to forgo using the system package manager for installing ghc and use
Stack to manage the path to the compiler executable and sandboxes.</p></blockquote>

<p>Stack stores it&rsquo;s metadata in the <code>~/.stack</code> folder by default. If you&rsquo;re not a
huge fan of things cluttering up your home folder, set the <code>STACK_ROOT</code> variable
in you bashrc or zshrc:</p>

<pre><code class="bash Set STACK_ROOT to avoid clutter">export XDG_DATA_HOME="$HOME/.local/share"

# Have Haskell Stack use XDG Base Directory spec
export STACK_ROOT="$XDG_DATA_HOME/stack"
</code></pre>

<p>Of course, the choice of location is up to you. In particular I&rsquo;ve chosen to
adhere to the <a href="https://wiki.archlinux.org/index.php/XDG_Base_Directory_support">XDG Base Directory specification</a> here, which you may want
to take a peek at if you&rsquo;re unfamiliar. That&rsquo;s why you see references to
<code>XDG_DATA_HOME</code>.</p>

<p>Make sure you restart your terminal to pick up the new variables before
continuing.</p>

<h2>Install Stack from Homebrew</h2>

<p>If you&rsquo;re like me, you&rsquo;ll want to take a second to purge anything
Haskell-related from previous botched setup attempts:</p>

<pre><code class="bash Wipe the slate clean"># If you had GHC installed
$ brew uninstall ghc

# If you tried and failed at installing Stack already
$ brew uninstall haskell-stack
$ rm -r ~/.stack
# If you happened to also set STACK_ROOT
$ rm -r $STACK_ROOT
</code></pre>

<p>With that out of the way, we can actually get our hands on Stack. For OS X,
we&rsquo;ll install through Homebrew:</p>

<pre><code class="console Install Stack">$ brew install haskell-stack
</code></pre>

<h2>Configure Stack, avoiding &ldquo;rootless&rdquo; issues</h2>

<p>Here&rsquo;s the trick. We need to run <code>stack setup</code> for the first time to let Stack
configure itself. But remember: we want to make sure that Stack doesn&rsquo;t set
itself up with version 7.8.4 of GHC. We can get around this by specifying an
explicit resolver to the <code>stack</code> command (you can find more information on
&ldquo;resolvers&rdquo; elsewhere):</p>

<pre><code class="bash Side-step rootless issue in setup"># Change the resolver to the most up-to-date one. This is a hack to ensure that
# get GHC version &gt; 7.8, because there's an issue with El Capitan's rootless
# mode.
stack --resolver=lts-6.10 setup
</code></pre>

<p>You&rsquo;ll notice we use the <code>--resolver=...</code> flag to force Stack to use a specific
resolver. This post will be out of date as soon as it&rsquo;s written, so check
<a href="https://www.stackage.org/snapshots">Stackage</a> to find the latest LTS snapshot.</p>

<h2>Return to Vim and Haskell in 2016</h2>

<p>That&rsquo;s it for the environment setup! Now you&rsquo;ll want to turn your attention to
configuring Vim.</p>

<p>The steps to set up Vim are platform independent, so now that we&rsquo;ve set up Stack
correctly, you can head over to <a href="http://www.stephendiehl.com/posts/vim_2016.html">Vim and Haskell in 2016</a> to
finish things out.</p>

<p>- - -

### Jake on the Web
<a class="image-link" href="https://avatars5.githubusercontent.com/u/5544532?v=4&u=4640ad0fd7da51dc2a84c5ae9d11a96677b4d185&s=400"><img class="left" src="https://avatars5.githubusercontent.com/u/5544532?v=4&u=4640ad0fd7da51dc2a84c5ae9d11a96677b4d185&s=400" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on
[GitHub][g] or paying a visit to [my homepage][h]. If this post was about one of
my open source projects, make sure to star it on GitHub! I love hearing what
people think, so feel free to open an issue or send me an email.
 [g]: https://www.github.com/jez/
 [h]: https://jez.io/
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running a VPS, Log 4: Debugging a Broken Mail Server]]></title>
    <link href="https://blog.jez.io/2014/07/07/running-a-vps-log-4/"/>
    <updated>2014-07-07T01:08:00-04:00</updated>
    <id>https://blog.jez.io/2014/07/07/running-a-vps-log-4</id>
    <content type="html"><![CDATA[<p>Whereas the tutorial I&rsquo;m following to setup this mail server initially promised a working setup in more or less two hours, it&rsquo;s nearing two weeks for me and I&rsquo;ve still got plenty of issues. In this log, I&rsquo;ll discuss some of the tools, log files, and online resources which I&rsquo;ve found helpful, as well as give a description of my problem as I best understand it.</p>

<!-- more -->


<h3><code>telnet</code></h3>

<p>As I mentioned in my <a href="/2014/07/04/running-a-vps-log-3">last log</a>, I&rsquo;ve been using three basic tools to connect to and test my mail server. While a graphical client might have a few tools for debugging a faulty connection&ndash;Mail.app&rsquo;s <a href="http://support.apple.com/kb/PH14945">Connection Doctor</a> comes to mind&ndash;they don&rsquo;t usually afford full control to the debugger.</p>

<p>This is where some truly powerful command line tools come into play, the first of which is <code>telnet</code>. Telnet opens up a text-based communication channel between you and a server; once connected, you can ask the server anything. SMTP is the broken part of my server, so I&rsquo;ll focus exclusively on examples dealing with connecting on SMTP ports. That being said, these tools are meant to be general purpose and should work for any type of service or port you can think of which exposes a textual interface.</p>

<p>On a working mail server, we should be able to have the following dialog with the server:</p>

<pre><code class="plain telnet">$ telnet mail.zimmerman.io 25
  Trying 107.170.7.111...
  Connected to metagross.zimmerman.io.
  Escape character is '^]'.
  220 ************************************
&gt; EHLO [206.71.229.162]
  250-metagross
  250-PIPELINING
  250-SIZE 10240000
  250-VRFY
  250-ETRN
  250-XXXXXXXA
  250-ENHANCEDSTATUSCODES
  250-8BITMIME
  250-STARTTLS
  250 DSN
&gt; 
</code></pre>

<p>A few notes:</p>

<ul>
<li>The first two characters of each line follow this legend:

<ul>
<li><code>$</code> indicates a line entered at the bash REPL</li>
<li><code>&gt;</code> indicates a line entered and sent to the server</li>
<li>all other lines are responses from the server</li>
</ul>
</li>
<li><code>telnet</code> by default takes two arguments: a domain/IP address, and a port number.</li>
<li><code>EHLO</code> is an SMTP command asking the server to identify itself and list which subset of commands it will respond to.</li>
</ul>


<p>From here, we can use commands like <code>MAIL from: &lt;address&gt;</code>, <code>RCPT to: &lt;address&gt;</code>, and <code>DATA</code> to send an email, using only plain text SMTP commands. Pretty powerful. There are also commands to initiate an encrypted connection (using <code>STARTTLS</code>), authenticate a user (using <code>AUTH</code>), and <a href="http://www.port25.com/how-to-check-an-smtp-connection-with-a-manual-telnet-session-2/">more</a>.</p>

<p>Earlier I said that one thing we can discern from the server&rsquo;s <code>EHLO</code> response is what types of commands it will respond to. I also mentioned that this particular dialog would occur with a <em>working</em> mail server. Sneak peak of a problem I&rsquo;m having: I can&rsquo;t get <code>250-STARTTLS</code> to appear in my server&rsquo;s response. We&rsquo;ll come back to this.</p>

<h3>OpenSSL&rsquo;s &nbsp; <code>s_client</code></h3>

<p>The second command line utility that is useful in debugging a mail server, especially those where SSL/TLS encryption is involved, is provided by OpenSSL. OpenSSL exposes a variety of commands, one of which, <code>s_client</code>, aids with establishing an encrypted connection between you and a server.</p>

<p>The syntax of the command looks like this:</p>

<pre><code>$ openssl s_client -connect &lt;host&gt;:&lt;port&gt; [options]
</code></pre>

<p>This client becomes particularly important, because one Postfix option I&rsquo;ve specified in the file <code>/etc/postfix/main.cf</code> is <code>smtpd_tls_auth_only = yes</code>. What this means is that Postfix won&rsquo;t send the line <code>250-AUTH PLAIN LOGIN</code> unless we&rsquo;re running on a secure connection. Merely using <code>telnet</code> to connect on port 25 will not initiate a secure connection.</p>

<p>There are a couple of ways we can use <code>s_client</code> to start off this encryption. The first way is to use port 465 to connect using sSMTP: <code>$ openssl s_client -connect mail.zimmerman.io:465</code>. We could also connect to port 25 and then immediately initiate an encrypted connection by issuing the STARTTLS command: <code>$ openssl s_client mail.zimmerman:25 -starttls smtp</code>. Either way, we get an encrypted connection to our server, and now the line <code>250-AUTH PLAIN LOGIN</code> line will appear in the server&rsquo;s <code>EHLO</code> response. We can continue sending SMTP commands just as with <code>telnet</code>.</p>

<h2>The Problems Set In</h2>

<p>If there&rsquo;s one thing I&rsquo;ve learned about mail servers, it&rsquo;s that they&rsquo;re hard. Like, they&rsquo;re really hard.</p>

<p>The problems first set in when I tried to test my setup with Mail.app. For whatever reason, no combination of settings would let me send mail through my server. I opened the logs located at <code>/var/log/syslog</code> and <code>/var/log/mail.log</code> to see if I could discern what was going on, but nothing showed up. After a bit of Googling, I found some information on how to use the above tools and started to diagnose my problem.</p>

<p>After using them for a little bit, I had the following diagnostic list of things I could and could not do:</p>

<ul>
<li>I could connect to port 25 using <code>telnet</code> (<code>telnet mail.zimmerman.io 25</code>)&hellip;

<ul>
<li>&hellip; but neither <code>STARTTLS</code> nor <code>AUTH</code> appeared in the <code>EHLO</code> response, so I couldn&rsquo;t send emails.</li>
</ul>
</li>
<li>I could not connect to port 465 nor port 587 using neither <code>telnet</code> nor <code>s_client</code>

<ul>
<li><code>telnet</code> simply aborted telling me that my connection had been refused, whereas <code>openssl</code> at least gave me an error number: <code>connect:errno=61</code></li>
</ul>
</li>
</ul>


<p><a class="image-link" href="/images/smtp-connection-refused-1.png"><img src="/images/smtp-connection-refused-1.png"></a></p>

<ul>
<li>I could connect to port 25 using <code>telnet</code> <strong>from my server</strong> (<code>telnet localhost 25</code> after ssh&#8217;ing)

<ul>
<li>This meant that I could send emails, because I had set <code>permit_mynetworks</code> as one of the values under <code>smtpd_recipient_restrictions</code> (i.e., you don&rsquo;t have to authenticate if you&rsquo;ve already ssh&#8217;ed in)</li>
</ul>
</li>
<li>I could connect to port 25 using <code>s_client</code> and initiate a STARTTLS command <strong>from my server</strong>

<ul>
<li>This was unnecessary, because the server would already accept my request to send emails to foreign recipients (because <code>permit_mynetworks</code> was enabled)</li>
</ul>
</li>
<li>I could still not connect to ports 465 or 587.

<ul>
<li>I got &ldquo;connection refused&rdquo; errors again, but this time the <code>openssl</code> error number was 111.</li>
</ul>
</li>
</ul>


<p><a class="image-link" href="/images/smtp-connection-refused-2.png"><img src="/images/smtp-connection-refused-2.png"></a></p>

<h2>Potential Fixes</h2>

<p>I have a few ideas on why my server won&rsquo;t let me in. I know for sure that it&rsquo;s not a firewall issue; I have all the requisite ports (25/465/587 and 143/993) open.</p>

<pre><code class="plain ufw Firewall Settings">$ ufw status
Status: active

To                         Action      From
--                         ------      ----
53                         ALLOW       Anywhere
22/tcp                     ALLOW       Anywhere
7                          ALLOW       Anywhere
25/tcp                     ALLOW       Anywhere
143                        ALLOW       Anywhere
465/tcp                    ALLOW       Anywhere
993                        ALLOW       Anywhere
587/tcp                    ALLOW       Anywhere
53                         ALLOW       Anywhere (v6)
22/tcp                     ALLOW       Anywhere (v6)
7                          ALLOW       Anywhere (v6)
25/tcp                     ALLOW       Anywhere (v6)
143                        ALLOW       Anywhere (v6)
465/tcp                    ALLOW       Anywhere (v6)
993                        ALLOW       Anywhere (v6)
587/tcp                    ALLOW       Anywhere (v6)
</code></pre>

<p>It could be an issue with my certificates. Because I&rsquo;m cheap and didn&rsquo;t want to pay excessive amounts of money for a fun summer experiment, I decided to self-sign my SSL certificates. (This means that while my traffic will be encrypted, people who try to connect to my server can&rsquo;t necessarily trust that I am who I say I am. It&rsquo;s the same reason why we have notaries to verify our signatures.) I&rsquo;m skeptical that this could be the reason, though, because nothing was showing up in the logs. If it had been a certificate error, it would have almost certainly shown up in the logs at some point.</p>

<p>Every error message that I got said the same thing: connection refused. But it only said connection refused on ports 465 and 587, ports that are expecting to receive communication over an encrypted channel. This means one of two things: my firewall is blocking the connection, which I&rsquo;ve already ruled out, or some other middle-man is kicking me out before we even get to Postfix, where something would show up in the logs.</p>

<p>I have a feeling that this could have something to do with the way my DNS is configured. As it stands, I have an A record on my <code>@</code> domain pointing to the IP address for GitHub pages, because <a href="http://zimmerman.io">zimmerman.io</a> is where I am hosting my personal site. However, I have a CNAME redirect which points <code>mail.zimmerman.io</code> to <code>metagross.zimmerman.io</code>, which is an A record linking to my droplet&rsquo;s IP address. I also have an MX record set up on the <code>@</code> domain, so that all mail directed to &ldquo;@zimmerman.io&rdquo; is sent to <code>mail.zimmerman.io</code>.</p>

<p><strong>UPDATE</strong>: After I wrote this post, I switched to the domain jez.io for all of my static site hosting. The links above should continue to work for a while, but at some point they might die.
<br></p>

<p><a class="image-link" href="/images/mail-dns-1.png"><img src="/images/mail-dns-1.png"></a></p>

<p><br>
I think that the confusion is in the multiple uses of the <code>@</code> domain. Taking a scrutinous look at the differences between my setup and the <a href="http://sealedabstract.com/code/nsa-proof-your-e-mail-in-2-hours/">tutorial</a> I&rsquo;ve been working out of, the one glaring difference is that his mail is set up on a subdomain whereas I wanted my mail to be set up on the apex domain. I thought that I made the necessary changes to my setup to get this to work, but now I&rsquo;m not so sure.</p>

<p>It&rsquo;s also quite possible that I&rsquo;m completely off the mark with this diagnosis. The world of mail servers is a murky place; certainly one that I don&rsquo;t understand that well after only two weeks. But it has been a very rewarding experience so far, and I&rsquo;d like to see if I can&rsquo;t fix this issue.</p>

<p>- - -

### Jake on the Web
<a class="image-link" href="https://avatars5.githubusercontent.com/u/5544532?v=4&u=4640ad0fd7da51dc2a84c5ae9d11a96677b4d185&s=400"><img class="left" src="https://avatars5.githubusercontent.com/u/5544532?v=4&u=4640ad0fd7da51dc2a84c5ae9d11a96677b4d185&s=400" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on
[GitHub][g] or paying a visit to [my homepage][h]. If this post was about one of
my open source projects, make sure to star it on GitHub! I love hearing what
people think, so feel free to open an issue or send me an email.
 [g]: https://www.github.com/jez/
 [h]: https://jez.io/
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitHub Pages Custom Domains]]></title>
    <link href="https://blog.jez.io/2014/05/06/github-pages-custom-domains/"/>
    <updated>2014-05-06T03:15:35-04:00</updated>
    <id>https://blog.jez.io/2014/05/06/github-pages-custom-domains</id>
    <content type="html"><![CDATA[<p>I stumbled at first getting the DNS configured for my blog, because I&rsquo;ve got a slighty more complicated setup than normal. I decided to supplement the documentation <a href="https://pages.github.com/">GitHub Pages</a> gives by recounting my personal example and the setup that worked.</p>

<!-- more -->


<p><strong>UPDATE</strong>: Since writing this post, I&rsquo;ve switched to the domain jez.io for all of my static site hosting. The circumstances of what I wanted to accomplish and the corresponding instructions are still accurate, but you can no longer visit the links referenced in the post for some context of the setup for what you&rsquo;re reading. As such, all links have been updated to point to the place where the resources now reside.</p>

<hr>


<p>If you&rsquo;ve never heard of <a href="https://pages.github.com/">GitHub Pages</a> for web hosting, you should definitely check it out. You basically get free hosting for any static (i.e. plain HTML or <a href="http://jekyllrb.com/">Jekyll</a>-served) website with git-push-to-deploy. You can even configure your site to be listed at a custom domain according to <a href="https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages">these</a> instructions, which are pretty thorough. I feel like it&rsquo;d help, though, to supplement this documentation with a fairly common example setup.</p>

<h2>My setup</h2>

<p>I have two sites which I want to host using the <code>zimmerman.io</code> domain name: my <a href="//blog.jez.io">blog</a> and my <a href="//zimmerman.io">personal site</a>. I host my personal site at <a href="//zimmerman.io">www.zimmerman.io</a>, but you can also navigate to <a href="//jez.io">zimmerman.io</a> and end up in the same places as before. It&rsquo;s served as a User Page from <a href="https://www.github.com/jez/jez.github.io">this repo</a>.</p>

<p>I host my blog at <a href="//blog.jez.io">blog.zimmerman.io</a>, and it&rsquo;s served as a Project Page in <a href="https://www.github.com/jez/blog/">this repo</a>.</p>

<h2>What the instructions say</h2>

<p>The instructions say a few things very clearly (yay, documentation!).</p>

<p>First, if I want to use a custom subdomain (like what I&rsquo;m doing for my blog) to host a repo, I can add a <code>CNAME</code> record with my DNS provider that points to what is in my case <code>z1mm32m4n.github.io</code>. This was counterintuitive to me, because I thought at first that this would make my blog.zimmerman.io domain redirect to my personal site, but that&rsquo;s not how GitHub handles it. (They&rsquo;re smarter than that.)</p>

<p>At the same time, I need to put a file in the root of the blog&rsquo;s repo (in the <code>gh-pages</code> branch because it&rsquo;s a Project Page), called <code>CNAME</code> (<a href="https://github.com/jez/blog/blob/gh-pages/CNAME">view source</a>) with the contents &lsquo;blog.zimmerman.io&rsquo;. After a little while, the DNS tables will update and everything here should work: I can now view my <em>blog</em> where I want it.</p>

<h2>What the instructions say, but not so clearly</h2>

<p>The next bit gave me some trouble at first (probably just because I was being impatient while the DNS tables were updating). The end goal was to have the <code>www</code> subdomain host my site and have the <code>@</code> (top-level or apex) domain redirect there. If you read carefully, the instructions say to do three things:</p>

<ol>
<li>Make the <code>CNAME</code> file (<a href="https://github.com/jez/jez.github.io/blob/master/CNAME">view source</a>) in my (User) Pages repository contain <code>www.zimmerman.io</code>. <strong>This</strong> is the domain at which I do want my site to be visible.</li>
<li>Create a <code>CNAME</code> record with my DNS provider pointing to <code>z1mm32m4n.github.io</code> for the <code>www</code> subdomain. From a technical standpoint on the DNS provider&rsquo;s side of things, this is the same thing we did before with the <code>blog</code> subdomain.</li>
<li>Create an <code>A</code> record pointing the <code>@</code> domain towards GitHub using the IP address they specify.</li>
</ol>


<p>This last step is where you have to have a little faith: nowhere is there an explicit file telling GitHub, &ldquo;If you get a request from zimmerman.io, send it to me!&rdquo; GitHub merely notices that there <strong>is</strong> a repo with a CNAME containing &lsquo;<strong>www</strong>.zimmerman.io&rsquo;, and so they say, &ldquo;Well, we may as well send this <strong>top level</strong> domain to the <strong>www</strong> domain referenced over here&hellip; I&rsquo;ve got nothing better to do.&rdquo;</p>

<p>This was a little confusing at first, because if I wanted the opposite direction (www.zimmerman.io to redirect to zimmerman.io), I would have still created a CNAME file, but it would have contained <code>zimmerman.io</code> and I would have created an <code>A</code> record with my DNS provider, not an actual CNAME. (I still did have to create both the <code>A</code> and <code>CNAME</code> in the end, but in this setup, the <code>A</code> record is referenced in the <code>CNAME</code> file, if that makes any sense.)</p>

<h2>Recap</h2>

<h3>My CNAME Files</h3>

<ul>
<li> For www.zimmerman.io:

<ul>
<li> CNAME file contains <code>www.zimmerman.io</code></li>
<li> CNAME file resides in <code>master</code> branch of User Pages repo for jez</li>
</ul>
</li>
<li> For blog.zimmerman.io

<ul>
<li> CNAME file contains <code>blog.zimmerman.io</code></li>
<li> CNAME file resides in <code>gh-pages</code> branch of Project Pages repo for jez/blog</li>
</ul>
</li>
</ul>


<h3>My DNS Config</h3>

<p>Here&rsquo;s a screenshot of what my records look like with my DNS provider, in case this was still unclear.</p>

<p><a class="image-link" href="/images/DNS-config.jpg"><img src="/images/DNS-config.jpg"></a></p>

<p>I&rsquo;m personally using <a href="https://www.gandi.net/">Gandi</a> for domain registration because they had the cheapest <code>.io</code> TLD registration, but their interface takes some getting used to. (It was certainly still worth the deal I got.)</p>

<p>- - -

### Jake on the Web
<a class="image-link" href="https://avatars5.githubusercontent.com/u/5544532?v=4&u=4640ad0fd7da51dc2a84c5ae9d11a96677b4d185&s=400"><img class="left" src="https://avatars5.githubusercontent.com/u/5544532?v=4&u=4640ad0fd7da51dc2a84c5ae9d11a96677b4d185&s=400" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on
[GitHub][g] or paying a visit to [my homepage][h]. If this post was about one of
my open source projects, make sure to star it on GitHub! I love hearing what
people think, so feel free to open an issue or send me an email.
 [g]: https://www.github.com/jez/
 [h]: https://jez.io/
</p>
]]></content>
  </entry>
  
</feed>
