<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Best Practices | Bits, Bytes, and Words]]></title>
  <link href="https://blog.jez.io/categories/best-practices/atom.xml" rel="self"/>
  <link href="https://blog.jez.io/"/>
  <updated>2015-04-06T04:15:26-04:00</updated>
  <id>https://blog.jez.io/</id>
  <author>
    <name><![CDATA[Jake Zimmerman]]></name>
    <email><![CDATA[jake@zimmerman.io]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Intro to Columns in HTML]]></title>
    <link href="https://blog.jez.io/2014/12/26/intro-to-columns-in-html/"/>
    <updated>2014-12-26T13:00:00-05:00</updated>
    <id>https://blog.jez.io/2014/12/26/intro-to-columns-in-html</id>
    <content type="html"><![CDATA[<p>HTML and CSS can be frustrating when first starting out. Despite all you try, nothing is in the right place. I&rsquo;ve advised more than a few friends on how to figure out this mystery and I&rsquo;ve noticed a pattern: people don&rsquo;t realize they should be using a grid.</p>

<!-- more -->


<h2>Positioning Content</h2>

<p>When something doesn&rsquo;t align correctly on the page, a natural phrase to Google is &ldquo;make div align right&rdquo; or &ldquo;move div up.&rdquo; In other media where content is positioned absolutely, like when using text boxes in Microsoft Word, these might be the right queries. With HTML &amp; CSS, though, they&rsquo;re off point. Don&rsquo;t get me wrong, there&rsquo;s definitely a time for <code>position: absolute</code>, but if this comes up when you&rsquo;re trying to make grids you&rsquo;re likely on the wrong path.</p>

<p>In HTML, the page is drawn from top to bottom, left to right. This means that your page ends up being aligned how words in a book are. Once the first word has taken up a certain amount of space, the next word starts filling up the space after it. The trick then, is knowing <em>how much</em> space the first item takes up, and how to resize it appropriately so that the second item &ldquo;falls into place.&rdquo;</p>

<h2>Blocks and Inline Elements</h2>

<p>The easiest way to explain block and inline elements is to continue our book analogy. Block elements are like titles and headings&mdash;they take up the entire page width, spanning from the left border to the right border. That&rsquo;s why if you put two headings as close as possible to each other, they&rsquo;ll still each have their own lines. There&rsquo;s no &ldquo;room&rdquo; for it to be any other way! Meanwhile, inline elements are like individual words. Where one word stops, the next one begins. A word takes up no more space than is required to size it compactly.</p>

<p>Disregarding some special cases, <em>every HTML element</em> falls into one of these two categories. Below are some examples of block elements and inline elements:</p>

<table>
<thead>
<tr>
<th style="text-align:center;"> Block </th>
<th style="text-align:center;"> Inline   </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> <code>div</code> </td>
<td style="text-align:center;"> <code>span</code>   </td>
</tr>
<tr>
<td style="text-align:center;"> <code>h1</code>  </td>
<td style="text-align:center;"> <code>a</code>      </td>
</tr>
<tr>
<td style="text-align:center;"> <code>p</code>   </td>
<td style="text-align:center;"> <code>strong</code> </td>
</tr>
<tr>
<td style="text-align:center;"> <code>ul</code>  </td>
<td style="text-align:center;"> <code>em</code>  </td>
</tr>
<tr>
<td style="text-align:center;"> <code>li</code>  </td>
<td style="text-align:center;"> <code>br</code>     </td>
</tr>
<tr>
<td style="text-align:center;"> <code>pre</code> </td>
<td style="text-align:center;"> <code>button</code> </td>
</tr>
</tbody>
</table>


<p>We know that we need to use a div to house our columns. The problem is, divs are a block elements, so they&rsquo;ll span the whole width of the page. Luckily, there&rsquo;s a relatively simple (though non-intuitive) fix to get our divs to line up.</p>

<h2>Floating Content</h2>

<p>Let&rsquo;s take a look at what we&rsquo;ve got so far. We want to have two columns, so our HTML is going to look like this:</p>

<p>&#8220;`html HTML for two columns</p>

<div class="row">
  <div class="left column">
    <!-- Your left content here -->
  </div>
  <div class="right column">
    <!-- Your right content here -->
  </div>
</div>


<pre><code>
Straightforward enough. Knowing what we know about block elements, what if we just set the width of the columns to 50%?
</code></pre>

<p>.column {
  /<em> arbitrary value for this example </em>/
  height: 300px;</p>

<p>  width: 50%;
}</p>

<p>/<em> so we can tell them appart </em>/
.left { background: red; }
.right { background: blue; }
&#8220;`</p>

<p><a href="http://codepen.io/Z1MM32M4N/pen/qENvdx?editors=110">Let&rsquo;s try it out and see what happens</a></p>

<p>Uh oh, it looks like our columns aren&rsquo;t next to each other! In fact, it looks suspciously like something we mentioned earlier: if two page headings are as close together as possible, they&rsquo;ll still be placed on their own lines. We can verify that this is the case by using the <a href="https://developer.chrome.com/devtools">Chrome dev tools</a>. Inspecting the red div, we see the culprit:</p>

<p><a class="image-link" href="/images/left-column-margin.png"><img src="/images/left-column-margin.png"></a></p>

<p>For those familiar with the Chrome dev tools, that yellow-orange box is Chrome&rsquo;s attempt to show us the invisible <em>margin</em> present on our div. Since divs are block elements, by default there&rsquo;s enough margin on the div to make it fill up the whole width of the page.</p>

<p>The solution, if you saw from the CodePen, is to add the property <code>float: left</code> to the columns. This essentially instructs the browser not to add that extra margin: instead of being positioned absolutely between the two sides of the screen, it should float to one side and forget about the other. This leaves room for the second column to file into place next to it.</p>

<p>Go <a href="http://codepen.io/Z1MM32M4N/pen/qENvdx?editors=110">back to the pen</a> and uncomment the relevant line. <a href="http://codepen.io/Z1MM32M4N/pen/XJKGdg?editors=110">Observe</a> that we&rsquo;ve accomplished exactly what we wanted to.</p>

<h2>Going Forward</h2>

<p>Cool, this solves the problem of having two columns! What&rsquo;s next?</p>

<ul>
<li>How would we make three columns? Four columns? Twelve columns?</li>
<li>Once we have multiple columns, how can we skip columns? (<strong>Hint</strong>: just because we have a column doesn&rsquo;t mean we have to put something in it)</li>
<li>We can add multiple rows by duplicating the outer &ldquo;row&rdquo; div.

<ul>
<li>What if we want two 33%-width columns in the first row, but one 33%-width column in the second row? (This is actually a good one to work through. You might want to look into the <code>clear: both</code> CSS property)</li>
</ul>
</li>
<li>The <code>border-left</code> and <code>border-right</code> CSS properties allow us to add a border to a div. We can even use <em>fancy CSS queries</em> (see below) to only add a border in between columns. But if we add a border, the columns overflow onto their own rows! Can you fix this?

<ul>
<li><strong>Warning</strong>: this one is the hardest. You will want to look into <code>box-sizing: border-box</code> and the &ldquo;CSS box model&rdquo;</li>
</ul>
</li>
</ul>


<p>Services like <a href="http://codepen.io/">CodePen</a> and <a href="http://jsfiddle.net/">JSFiddle</a> are excellent tools for trying out little experiments like this. I encourage you to actually tinker around with the <a href="http://codepen.io/Z1MM32M4N/pen/XJKGdg?editors=110">starter code from before</a> to see how you can answer all of these small questions.</p>

<p>As it turns out, HTML/CSS grids are a very heavily studied point of design. So much so, that people build entire <em>CSS frameworks</em> around providing the building blocks to make grids easily. Here&rsquo;s a list:</p>

<ul>
<li><a href="http://getbootstrap.com/">Bootstrap</a></li>
<li><a href="http://foundation.zurb.com/">Foundation</a></li>
<li><a href="http://semantic-ui.com/">Semantic UI</a></li>
<li><a href="http://unsemantic.com/">Unsemantic</a></li>
</ul>


<p>Bootstrap is by far the most common (once you see it, you&rsquo;ll start to realize how many sites look incredibly similar). However, many people misuse Bootstrap their first time around. <a href="http://www.helloerik.com/the-subtle-magic-behind-why-the-bootstrap-3-grid-works">This article</a> demystifies and documents how and why the Bootstrap 3 grid works.</p>

<p>Even once you&rsquo;re an HTML and CSS master, it can still be frustrating. (Actually, I&rsquo;d believe it if the experts were the most frustrated!). I love answering question and trying to explain things, so if you need some help working through the exercises above or you&rsquo;re working on a personal project, I&rsquo;d love to see if I can help out! Protip: put your code on GitHub or somewhere else that&rsquo;s easily accessible so that it&rsquo;s easy to share changes quickly.</p>

<h2>Appendix</h2>

<p>I mentioned an example about &ldquo;fancy CSS queries&rdquo; above. This is certainly advanced territory, but it&rsquo;s something that I get asked a lot by beginners so here goes.</p>

<p>Basically, the problem is that you only want vertical line separators in between columns, not on the edges. In ASCII art:</p>

<pre><code class="plain Beautiful ASCII Art Diagram">
        |        |
  col1  |  col2  | col 3
        |        |

        ^        ^
        | these. |
</code></pre>

<p>(Thank you, thank you, I know my drawings are beautiful XD).</p>

<p>You already know that you can use <code>.class</code> and <code>#id</code> to select items based on their classes and IDs. But there are <a href="http://code.tutsplus.com/tutorials/the-30-css-selectors-you-must-memorize--net-16048">tons more query selectors</a> you can use! I&rsquo;ll use one to accomplish what we want with the vertical dividers:</p>

<pre><code class="css Super Fancy CSS Selectors">.column {
  height: 300px;
  /* Try uncommenting me! */
  float: left;
  width: 50%;
  /* this kind of solves the "overflow" exersise I posted above YOLO */
  box-sizing: border-box;
}

/* marvel at the fanciness! */
.column:not(:last-child) {
  border-right: 5px solid black;
}

.left { background: red; }
.right { background: blue; }
</code></pre>

<p>You can combine this with a nice padding (<code>padding: 50px</code> should do the trick) on the <code>.column</code>, and you&rsquo;ve got yourself a vertical divider!</p>

<h2>Update</h2>

<p>After writing this post, I discovered a couple articles talking about the new
<code>flexbox</code> feature. From what I can tell, it looks promising in terms of ease of
use and browser compatibility. That being said, many common CSS frameworks still
use <code>float: left</code>, so the content presented here is still good information to
know. If you&rsquo;re having trouble getting floats to work, though, maybe you should
look into <code>flexbox</code> instead!</p>

<p>- - - - -
<br>
### Jake on the Web
<a class="image-link" href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on
[GitHub][g] or paying a visit to [my homepage][h]. If this post was about one of
my open source projects, make sure to star it on GitHub! I love hearing what
people think, so feel free to comment, open an issue, or send me an email.
 [g]: https://www.github.com/jez/
 [h]: https://jez.io/
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Joys of the Craft]]></title>
    <link href="https://blog.jez.io/2014/12/13/the-joys-of-the-craft/"/>
    <updated>2014-12-13T20:52:09-05:00</updated>
    <id>https://blog.jez.io/2014/12/13/the-joys-of-the-craft</id>
    <content type="html"><![CDATA[<p>A while ago, I was given the book <em>The Mythical Man-Month</em>, by Frederick P. Brooks, Jr. I finally have some time to sit down and read it, and I&rsquo;m loving it. In the first chapter, this quote on &ldquo;the joys of the craft&rdquo; (i.e., programming) struck me as particularly on point:</p>

<!-- more -->


<blockquote><h3>The Joys of the Craft</h3>

<p>Why is programming fun? What delights may its practitioner expect as his reward?</p>

<p>First is the sheer joy of making things. As the child delights in his mud pie, so the adult enjoys building things, especially things of his own design. I think this delight must be an image of God&rsquo;s delight in making things, a delight shown in the distinctness and newness of each leaf and each snowflake.</p>

<p>Second is the pleasure of making things that are useful to other people. Deep within, we want others to use our work and to find it helpful. In this respect the programming system is not essentially different from the child&rsquo;s first clay pencil holder &ldquo;for Daddy&rsquo;s office.&rdquo;</p>

<p>Third is the fascination of fashioning complex puzzle-like objects of interlocking moving parts and watching them work in subtle cycles, playing out the consequences of principles built in from the beginning. The programmed computer has all the fascination of the pinball machine or the jukebox mechanism, carried to the ultimate.</p>

<p>Fourth is the joy of always learning, which springs from the nonrepearing nature of the task. In one way or another the problem is ever new, and its solver learns something: sometimes practical, sometimes theoretical, and sometimes both.</p>

<p>Finally, there is the delight of working in such a tractable medium. The programmer, like the poet, works only slightly removed from pure thought-stuff. He builds his castles in the air, from air, creating by exertion of the imagination. Few media of creation are so flexible, so easy to polish and rework, so readily capable of realizing grand conceptual structures. (As we shall see later, this very tractability has its own problems.)</p>

<p>Yet the program construct, unlike the poet&rsquo;s words, is real in the sense that it moves and works, producing visible outputs separate from the construct itself. It prints results, draws pictures, produces sounds, moves arms. The magic of myth and legend has come true in our time. One types the correct incantation on a keyboard, and a display screen comes to life, showing things that never were nor could be.</p>

<p>Programming then is fun because it gratifies creative longings built deep within us and delights sensibilities we have in common with all men.</p>

<p>&ndash; &ldquo;The Tar Pit&rdquo;, <em>The Mythical Man-Month</em>, Frederick P. Brooks Jr.</p></blockquote>

<p>Brooks of course follows this up with &ldquo;The Woes of the Craft&rdquo;, which is equally on point. I&rsquo;m only a few pages in, but I already feel like, respectfully, I&rsquo;ve learned more than I did in all of Tech Comm (<a href="https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15221&amp;SEMESTER=F14">15-221</a>). I would absolutely recommend it to anyone considering pursing software engineering!</p>

<p>- - - - -
<br>
### Jake on the Web
<a class="image-link" href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on
[GitHub][g] or paying a visit to [my homepage][h]. If this post was about one of
my open source projects, make sure to star it on GitHub! I love hearing what
people think, so feel free to comment, open an issue, or send me an email.
 [g]: https://www.github.com/jez/
 [h]: https://jez.io/
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running a VPS, Log 2: Seriously, Back It Up]]></title>
    <link href="https://blog.jez.io/2014/06/24/running-a-vps-log-2/"/>
    <updated>2014-06-24T23:11:14-04:00</updated>
    <id>https://blog.jez.io/2014/06/24/running-a-vps-log-2</id>
    <content type="html"><![CDATA[<p>I don&rsquo;t have the best track record with configuring servers. I&rsquo;ve certainly brought down a ScottyLabs server or two before, but sometimes there&rsquo;s no avoiding that in the sake of learning. At times like these, you&rsquo;ve just gotta reboot and try again. With DigitalOcean&rsquo;s auto-backups though, this process is incredibly easy.</p>

<!-- more -->


<h2>EncFS Troubles</h2>

<p>As part of my eventual goal of hosting my own mail, I tried following <a href="//sealedabstract.com/code/nsa-proof-your-e-mail-in-2-hours/">this post</a> to set up a mail server on my VPS. Unfortunately, I never even made it out the gates. The first step is to install and set up EncFS for letting you mount encrypted filesystems, which the tutorial was planning on using to store email securely. Unfortunately, after following the steps listed to a T, my poor VPS whined and complained about being misconfigured.</p>

<p><strong>Edit</strong>: After doing a little more research, I found that the root of my issue wasn&rsquo;t something I had been doing. Apparently, you have to <a href="https://www.digitalocean.com/community/tutorials/how-to-update-a-digitalocean-server-s-kernel-using-the-control-panel">manually update the kernel</a> through the DigitalOcean web console. You can read more about it on this <a href="https://github.com/al3x/sovereign/issues/147#issuecomment-43849647">GitHub issue</a>.</p>

<p>Regardless, my first attempt to do something cool on this new VPS was a dud. All I had to show for it was a muddled, no-longer-pristine VPS with some packages and libraries that simply didn&rsquo;t work. If I were to continue with the tutorial by skipping this step, I would have never known whether the cause of any future issue was something misconfigured at this step.</p>

<h2>The Day is Saved</h2>

<p>But then I remembered: DigitalOcean is automatically backing up my droplet! After logging into the web interface, all I had to do was click a button and my whole system was reset to the way it looked 24 hours prior. It was <em>actually that easy</em>.</p>

<p>Thus, for anyone getting started with a new server, whether it be on DigitalOcean or any other service (even a box you have running in your room), I cannot stress enough the value of automatic&ndash;or at least regular&ndash;backups. Not only is this a good idea to preserve data in the event of an outage, but it lends a seemingly unbounded ability to mess around and tinker.</p>

<p>What this means is that you get all the fun of learning cool, new Linux-y things, but without ever having to worry about whether you&rsquo;ll break the whole system. Sure, this mindset isn&rsquo;t necessarily the best to adopt for a production machine, but for my circumstances, all I want is free reign to experiment and break things to my heart&rsquo;s content.</p>

<h2>Back to Square One</h2>

<p>With my first attempt at installing a mail server foiled, I think for my next attempt I&rsquo;ll try a different path. Instead of installing and configuring everything more or less manually (I really wanted to do this for the experience of it all, learning the nitty-gritty of how it works), this time around I think I&rsquo;m going to give <a href="https://github.com/al3x/sovereign">sovereign</a> a try. I&rsquo;ve heard good things, and it is in fact based on the original tutorial I had found, so it&rsquo;s looking pretty promising as of yet.</p>

<p>Whatever happens though, I&rsquo;m feeling pretty good about the fact that I can turn things around with a single click.</p>

<p>- - - - -
<br>
### Jake on the Web
<a class="image-link" href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on
[GitHub][g] or paying a visit to [my homepage][h]. If this post was about one of
my open source projects, make sure to star it on GitHub! I love hearing what
people think, so feel free to comment, open an issue, or send me an email.
 [g]: https://www.github.com/jez/
 [h]: https://jez.io/
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running a VPS, Log 1: Managing Dotfiles Across Machines]]></title>
    <link href="https://blog.jez.io/2014/06/19/running-a-vps-log-1/"/>
    <updated>2014-06-19T23:10:51-04:00</updated>
    <id>https://blog.jez.io/2014/06/19/running-a-vps-log-1</id>
    <content type="html"><![CDATA[<p>You could say I&rsquo;m a bit of a geek when it comes to configuring my terminal environment; this obsession has led me to concoct ever-elaborate setup scripts and configuration files. On top of this, between my laptop&rsquo;s multiple boot environments, the servers I use for school, work, and ScottyLabs, and now <a href="/2014/06/19/running-a-vps-log-0">metagross</a>, keeping my configuration files in sync is a must. I handle it swiftly using a combination of git and rcm.</p>

<!-- more -->


<h2>My Scripts</h2>

<p>I&rsquo;ve put a decent amount of time into my dotfiles. I like to think they&rsquo;re pretty good. That being said, I&rsquo;m not about to go over every piece of them, because that would bore even me. I might come back to these pieces in a series on getting started with the terminal (aimed at incoming CS freshmen and other up-and-coming hackers), but for now, a link will suffice.</p>

<h4><a href="https://github.com/jez/dotfiles/">jez/dotfiles</a></h4>

<h2>rcm + git</h2>

<p>rcm, short for rc file (as in .bash<b>rc</b>, .vim<b>rc</b>) management, is a tool that manages symlinks between dotfiles in one directory and your home directory. This is cool because, once all your config files contained in one folder, they can be tracked with git for version control without having to put your entire <code>$HOME</code> directory inside a git repo.</p>

<p>On a single machine, rcm works like this. You have one directory (usually <code>~/.dotfiles</code>, but configurable to any directory) which stores all the config files. In here, all files which are meant to be tracked and symlinked do <em>not</em> include the prefixed &lsquo;<code>.</code>&rsquo;; instead, it is added as part of the linking process. After installation, which is easily handled through the brew formula, the .deb, or the Makefile, there are a couple of new tools available.</p>

<p>The first worth mentioning is <code>man 7 rcm</code>, which documents what was just installed. Taking a glance at this page, we see that rcm is actually a suite of tools: <code>lsrc</code>, <code>mkrc</code>, <code>rcdn</code>, and <code>rcup</code>. While all these tools are useful, the most important is <code>rcup</code>. After collecting all your dotfiles into <code>~/.dotfiles</code>, simply executing <code>rcup</code> symlinks all the necessary files to their appropriate locations.</p>

<p>From here, you get all the benefits of git, like pushing to GitHub, collaborating with others, lightweight branching, and syncing files easily even when your workflow is distributed across many servers.</p>

<h2>Caveats</h2>

<p>To be fair, I don&rsquo;t use <code>rcm</code> in the way I think it&rsquo;s creators imagined it would be used. Specifically, the software includes certain provisions to designate which files should affect various machines using a tag system. While it could possibly work, in my mind it&rsquo;s much more tedious than what I&rsquo;ve come up with.</p>

<p>Succinctly, the issue is this: when cloning a repo and running <code>rcup</code> for the first time, you can&rsquo;t easily say &ldquo;this is my VPS, it&rsquo;s running Debian GNU/Linux, has these system binaries installed, and therefore should start up using these methods and scripts&rdquo;. For this, we&rsquo;re on our own.</p>

<h2>Installation</h2>

<p>The solution I came up with regarding a multiple-environment workflow deals with handling all the necessary machine-dependent configuration within my dotfiles <em>themselves</em>. That way I can minimize code reuse and have everything in one convenient file. As a result, <a href="https://github.com/jez/dotfiles/tree/master/bash_profile">my bash_profile</a> is a bit lengthy at about 300 lines, and it has three large case statements, but I make all this up through deployment. Deployment is <strong>incredibly</strong> swift. Again, You can take a look at the file to see how it works, but when I had finished <a href="/2014/06/19/running-a-vps-log-1">locking down my server</a>, these are the only configuration commands I had to run:</p>

<p><figure class='code'><figcaption><span>Installing rcm and dotfiles </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;install rcm using deb and dpkg&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="nv">$ </span>wget &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://thoughtbot.github.io/rcm/debs/rcm_1.2.3-1_all.deb&quot;</span>&gt;https://thoughtbot.github.io/rcm/debs/rcm_1.2.3-1_all.deb&lt;/a&gt;
</span><span class='line'><span class="nv">$ </span>sudo dpkg -i rcm_1.2.3-1_all.deb&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;clone dotfiles down, into the ~/.dotfiles directory&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="nv">$ </span>git clone &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;https://github.com/jez/dotfiles&quot;</span>&gt;https://github.com/jez/dotfiles&lt;/a&gt; ~/.dotfiles&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;make the symlinks&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="nv">$ </span>rcup
</span></code></pre></td></tr></table></div></figure></p>

<p>Voilà! After that, I had my sick bash prompt, my <a href="/2014/06/11/update-your-software-its-the-law/">snazzy update function</a>, my delightful vim colorscheme, solarized dir colors&ndash;the list goes on and on.</p>

<p>Sure, it&rsquo;s taken a bit of effort to get the point where I can run these commands and have it Just Work, but doing that work once means that from now on, whenever I sit down at a new work computer, a new VPS, a new laptop, or some other workstation, I&rsquo;m only a few commands away from my favorite settings.</p>

<p>- - - - -
<br>
### Jake on the Web
<a class="image-link" href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on
[GitHub][g] or paying a visit to [my homepage][h]. If this post was about one of
my open source projects, make sure to star it on GitHub! I love hearing what
people think, so feel free to comment, open an issue, or send me an email.
 [g]: https://www.github.com/jez/
 [h]: https://jez.io/
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Everyone Loves JavaScript]]></title>
    <link href="https://blog.jez.io/2014/06/16/why-everyone-loves-javascript/"/>
    <updated>2014-06-16T00:39:52-04:00</updated>
    <id>https://blog.jez.io/2014/06/16/why-everyone-loves-javascript</id>
    <content type="html"><![CDATA[<p>Airbnb has put together a stellar list of simple ways to make your JavaScript more maintainable and manageable. From comments and whitespace, to hoisting and type casting, this list covers nearly everything you should know when developing a JavaScript app.</p>

<!-- more -->


<h2>The Backstory</h2>

<p>Before I begin, I should mention that any views I express here are entirely my own. Now, I recently began working for the summer at Bloomberg L.P., where for the first few days we sit through a few talks and do a few labs that introduce us to the technologies we&rsquo;ll be using throughout the summer. JavaScript was one of these languages, and I found that a quote on the first slide is all too correct:</p>

<blockquote><p>&ldquo;JavaScript is both the most popular and unpopular programming language.&rdquo;</p>

<p>&ndash; Doug Crockford</p></blockquote>

<p>From there, as you might imagine, the reactions from a predominantly C++ oriented audience towards JavaScript&rsquo;s quirks were pretty amusing. There are some significant differences between these two languages, and if you&rsquo;re not careful, they can get annoying quite quickly.</p>

<h2>Links</h2>

<h3><a href="https://github.com/airbnb/javascript">airbnb/javascript</a></h3>

<p>JavaScript might have it&rsquo;s quirks, but it&rsquo;s still a vastly powerful language, especially if used well. For any aspiring JavaScript developer, I would highly recommend looking over Airbnb&rsquo;s JavaScript best practices. Even if you think you&rsquo;ve got the language down, I&rsquo;m confident you&rsquo;ll uncover something useful.</p>

<h3><a href="https://www.destroyallsoftware.com/talks/the-birth-and-death-of-javascript">The Birth and Death of JavaScript</a></h3>

<p>While you&rsquo;re here, check out this video for an incredibly humorous and satisfyingly accurate discussion of JavaScript, from birth to death.</p>

<h3><a href="https://www.destroyallsoftware.com/talks/wat">Wat</a></h3>

<p>Aaand while we&rsquo;re posting humorous JavaScript videos, I&rsquo;ve gotta throw this one into the mix.</p>

<p>- - - - -
<br>
### Jake on the Web
<a class="image-link" href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on
[GitHub][g] or paying a visit to [my homepage][h]. If this post was about one of
my open source projects, make sure to star it on GitHub! I love hearing what
people think, so feel free to comment, open an issue, or send me an email.
 [g]: https://www.github.com/jez/
 [h]: https://jez.io/
</p>
]]></content>
  </entry>
  
</feed>
