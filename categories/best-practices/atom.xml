<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Best Practices | Bits, Bytes, and Words]]></title>
  <link href="https://blog.jez.io/categories/best-practices/atom.xml" rel="self"/>
  <link href="https://blog.jez.io/"/>
  <updated>2016-03-14T17:59:12-04:00</updated>
  <id>https://blog.jez.io/</id>
  <author>
    <name><![CDATA[Jake Zimmerman]]></name>
    <email><![CDATA[jake@zimmerman.io]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SML Dev Setup]]></title>
    <link href="https://blog.jez.io/2016/03/09/sml-dev-setup/"/>
    <updated>2016-03-09T21:06:15-05:00</updated>
    <id>https://blog.jez.io/2016/03/09/sml-dev-setup</id>
    <content type="html"><![CDATA[<p>When it comes right down to it, SML is a pretty great language. It&rsquo;s clear that
extensive thought has gone into its design and implementation. I quite enjoy
programming in SML, due in no small part to my collection of workflow hacks that
make editing and developing with SML responsive and interactive.</p>

<!-- more -->


<p>We&rsquo;re going to be walking through a couple easy steps you can take to make
developing SML feel more fluid, both in and out of your editor. I have a slight
preference for Vim on OS X, but many of these steps are platform agnostic.</p>

<h2>Installing SML Locally</h2>

<p>While developing SML in a remote environment like the shared Andrew Unix
machines makes it easy to dive right in, working with SML for prolonged periods
of time is best done locally.</p>

<p>On OS X and Ubuntu, the two most popular SML implementations are already
packaged. Take the time to install a version of SML right now. At CMU, we use
<a href="http://smlnj.org/">SML/NJ</a>, which is convenient because it has a REPL that lets you play
around with SML interactively. If you&rsquo;d like to play around with compiling and
distributing programs written in SML, you might want to install <a href="http://www.mlton.org/">MLton</a>.</p>

<pre><code class="bash Install SML from your package manager"># SML/NJ on OS X
brew install smlnj
# -- or --
# MLton on OS X
brew install mlton

# SML/NJ on Ubuntu
sudo apt-get install smlnj
# -- or --
# MLton on Ubuntu
sudo apt-get install mlton
</code></pre>

<p>Feel free to install both if you&rsquo;d like; they&rsquo;ll play nicely with each other and
each offers advantages over the other.</p>

<p>Note for OS X users: if you&rsquo;ve never used <a href="http://brew.sh">Homebrew</a> before, you&rsquo;ll need
to <a href="http://brew.sh">install it first</a>.</p>

<h2>Getting Comfortable with SML/NJ</h2>

<p>The rest of these steps should apply regardless of whether you&rsquo;re working on SML
locally or remotely.</p>

<p>One thing that I&rsquo;ve seen far too many times from course documentation is that
they tell students to run their code like this:</p>

<ol>
<li>Run <code>sml</code></li>
<li>Type <code>use "foo.sml";</code> or <code>CM.make "sources.cm";</code> at the REPL</li>
</ol>


<p>Don&rsquo;t get me wrong; this works, but there&rsquo;s a better way. Being responsible
CLI-citizens, we should always be looking for ways to tab-complete. Let&rsquo;s do
this by changing our workflow:</p>

<ol>
<li>Run <code>sml foo.sml</code> or <code>sml -m sources.cm</code></li>
</ol>


<p>Look at that! We&rsquo;ve,
- dropped a step (having to launch the REPL first), and
- introduced tab completion into our workflow (because the shell has filename
  completion)</p>

<p>It&rsquo;s the little things, but they add up.</p>

<h2>Enhancing the REPL</h2>

<p>Speaking of the little things, when using the SML REPL, you don&rsquo;t have access to
all the usual command line niceties like command history and access to arrow
keys for editing, let alone Vi-like keybindings. To get started, you&rsquo;ll have to
change how you launch the SML/NJ REPL. In particular, we&rsquo;re going to preface our
commands with <code>rlwrap</code>:</p>

<pre><code class="bash"># instead of this...
$ sml

# use this:
$ rlwrap
</code></pre>

<p><code>rlwrap</code> stands for &ldquo;readline wrap.&rdquo; Readline is a library that simply adds to a
REPL program all the features mentioned above:</p>

<ul>
<li>Command history tracking</li>
<li>Line editing with arrow keys</li>
<li>Configurability through the <code>~/.inputrc</code> file

<ul>
<li>We can use this to get fancy features like Vi keybindings</li>
</ul>
</li>
</ul>


<p>For more information, see <a href="https://github.com/jez/dotfiles/blob/ed8e531eebe43a8aef05fc4cb768157d03408cea/inputrc#L12-L14">these lines</a> of my inputrc, a small part of
my <a href="https://github.com/jez/dotfiles">dotfiles repo</a> on GitHub.</p>

<h2>Setting Up Vim</h2>

<p>Programming is so much more enjoyable when you&rsquo;re not fighting your editor. For
me, this means striving to get the most out of Vim. In this section, I&rsquo;ll
outline all the cool tips and tricks I have for developing SML in Vim.</p>

<p>But first, if you&rsquo;ve never taken a look into how to configure Vim, I suggest you
start out by walking through this quick workshop called <a href="https://github.com/jez/vim-as-an-ide">Vim as an
IDE</a>. It&rsquo;ll teach you where to start when configuring Vim and get
you set up with a bunch of standard plugins that improve on the standard Vim
experience tenfold.</p>

<p>No actually, take a second and <a href="https://github.com/jez/vim-as-an-ide">walk through it</a>. We&rsquo;ll still be
here when you&rsquo;re done, and you&rsquo;ll appreciate Vim more when you&rsquo;re done.</p>

<h3>Syntastic</h3>

<p>From the Syntastic documentation:</p>

<blockquote><p>Syntastic is a syntax checking plugin for Vim that runs files through
external syntax checkers and displays any resulting errors to the user. This
can be done on demand, or automatically as files are saved. If syntax errors
are detected, the user is notified and is happy because they didn&rsquo;t have to
compile their code or execute their script to find them.</p></blockquote>

<p>And the best part? Syntastic ships with a checker for SML by default if you
have SML/NJ installed.</p>

<p>If you didn&rsquo;t just install <a href="https://github.com/scrooloose/syntastic">Syntastic</a> from the Vim as an IDE
walkthrough, you can <a href="https://github.com/scrooloose/syntastic">visit their homepage</a> for installation
instructions. Go ahead and do this now, then try writing this in a file called
<code>test.sml</code>:</p>

<pre><code class="sml test.sml">val foo : string = 42
</code></pre>

<p>You should see an &lsquo;x&rsquo; next to the line and a description of the error from the
type checker. You can imagine how handy this is.</p>

<h3>Extra Syntastic Setup</h3>

<p>Syntastic has their own set of <a href="https://github.com/scrooloose/syntastic#settings">recommended settings</a> that
you can add at your discretion. At the very least, I&rsquo;d suggest adding these
lines to your vimrc:</p>

<pre><code class="vim .vimrc">...

augroup mySyntastic
  " tell syntastic to always stick any detected errors into the location-list
  au FileType sml let g:syntastic_always_populate_loc_list = 1

  " automatically open and/or close the location-list
  au FileType sml let g:syntastic_auto_loc_list = 1
augroup END

" press &lt;Leader&gt;S (i.e., \S) to not automatically check for errors
nnoremap &lt;Leader&gt;S :SyntasticToggleMode&lt;CR&gt;

...
</code></pre>

<p>By default, whenever you save your file, Syntastic will place symbols in Vim&rsquo;s
<em>sign column</em> next to lines with errors. The first two settings above tell
Syntastic to also show a summarized list of errors at the bottom of the screen.
The final setting lets you press <code>&lt;Leader&gt;S</code> (which is usually just <code>\S</code>) to
disable all that. This is useful when you&rsquo;re still unfinished and you know your
SML isn&rsquo;t going to type check. Press it again to re-enable it.</p>

<p>Also, a tip for those who&rsquo;ve never used Vim&rsquo;s location list feature before: you
can close the list with <code>:lclose</code>.</p>

<h3><code>vim-better-sml</code></h3>

<p>The curious at this point might be wondering if Syntastic is smart enough to
figure out when the file you&rsquo;re using requires a CM file to compile and uses it
to show you where the errors are instead. As it turns out: no, <a href="https://github.com/scrooloose/syntastic/pull/1719">that&rsquo;s not a
feature Syntastic wants to include</a> by default. However, the
functionality isn&rsquo;t hard to implement, and there&rsquo;s already a plugin for it!</p>

<p><a href="https://github.com/jez/vim-better-sml">vim-better-sml</a> is one of my Vim plugins. Here&rsquo;s a quick
rundown of its features:</p>

<ul>
<li>As already mentioned, it will detect when your file requires a CM file to
build, and will pass along the information to Syntastic</li>
<li><code>let</code> expressions are indented one level under <code>fun</code> declarations</li>
<li><code>*.sig</code> files are properly detected as SML signature files</li>
<li>Apostrophe characters are treated as keywords characters</li>
<li>The comment string is properly registered for SML files</li>
</ul>


<p>For more information, including how to install it, check out the homepage:
<a href="https://github.com/jez/vim-better-sml">vim-better-sml</a>.</p>

<h2>General Vim Settings</h2>

<p>As a quick addendum, one common complaint people have when editing SML is that
it forces the line to wrap if it extends to 80 characters. Some people don&rsquo;t
like that it does this, and others don&rsquo;t like that it doesn&rsquo;t do it frequently
enough (namely, it only wraps the line if your cursor extends past 80
characters, not the end of the line).</p>

<p>If you don&rsquo;t want Vim to do any of this wrapping, run this:</p>

<pre><code class="vim Disable hard line wrapping">setlocal textwidth=0
</code></pre>

<p>If you&rsquo;d like this change to persist between Vim sessions, add it to
<code>~/.vim/after/ftplugin/sml.vim</code>. These folders and file likely don&rsquo;t exist
yet; you&rsquo;ll have to create them. The <code>after</code> folder in Vim is used to override
settings loaded from plugins. As you might have guessed, files in here are run
after plugin code is.</p>

<p>Conversely, if you&rsquo;d like a little better idea when Vim&rsquo;s going to hard wrap
your line, you can add this line to your vimrc:</p>

<pre><code class="vim Show a color column">set colorcolumn+=0
</code></pre>

<p>Note: this will only work if you&rsquo;re using Vim 7.4 or above. This setting tells
Vim to draw a solid column at the same width as the value of the <code>textwidth</code>
setting.</p>

<h2>TL;DR</h2>

<p>We covered a lot, so here&rsquo;s a quick recap:</p>

<ul>
<li>Install SML locally. It&rsquo;s super easy to do on OS X and Linux (use your package
manager), and means you don&rsquo;t have have a Wi-Fi connection to develop SML.</li>
<li>Invest time into learning Vim. Here&rsquo;s a reference: <a href="https://github.com/jez/vim-as-an-ide">Vim as an
IDE</a>.</li>
<li>Install <a href="https://github.com/scrooloose/syntastic">Syntastic</a>. It tells you what lines your errors are on.</li>
<li>Install <a href="https://github.com/jez/vim-better-sml">vim-better-sml</a>. It includes some features Syntastic
doesn&rsquo;t by default, and includes a couple extras.</li>
<li>Consider using <code>setlocal textwidth=0</code> or <code>set colorcolumn+=0</code> to deal with the
80-character restriction when writing SML files.</li>
</ul>


<p>And as always, you can see even more Vim settings in my <a href="https://github.com/jez/dotfiles">dotfiles
repo</a> on GitHub.</p>

<p>- - - - -
<br>
### Jake on the Web
<a class="image-link" href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on
[GitHub][g] or paying a visit to [my homepage][h]. If this post was about one of
my open source projects, make sure to star it on GitHub! I love hearing what
people think, so feel free to comment, open an issue, or send me an email.
 [g]: https://www.github.com/jez/
 [h]: https://jez.io/
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker Tips and Cheatsheet]]></title>
    <link href="https://blog.jez.io/2015/07/12/docker-tips-and-cheatsheet/"/>
    <updated>2015-07-12T22:32:27-04:00</updated>
    <id>https://blog.jez.io/2015/07/12/docker-tips-and-cheatsheet</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been using Docker for a couple side projects lately, but only
intermittently. That means every time I try to get back into things, I spend the
first 15 minutes or so trying to remember all the little tricks I&rsquo;ve picked up
from previous Google searches and hunts through the documentation. Rather than
continue to suffer through this cycle, I&rsquo;ve written them down here to help you
and me ramp up more quickly on our next Docker projects.</p>

<!-- more -->


<h2>Making your Docker experience easier: Docker Compose</h2>

<p>Half the complexity of Docker is wrapped up in its large, verbose set of command
line arguments and flags. Luckily, Docker has a tool called <a href="https://docs.docker.com/compose/">Docker Compose</a>
that lets us translate all our command line flags into a <code>.yml</code> file. This makes
it much easier to remember how to build and run your containers, as well as to
communicate with your teammates; you no longer need to a common &ldquo;setup.sh&rdquo;
script that remembers what obscure Docker commands and flags you used to set
things up. If you&rsquo;ve never heard of it, you might want to <a href="https://docs.docker.com/compose/">check it out
now</a>. I&rsquo;ll be mixing-and-matching my favorite <code>docker</code> and <code>docker-compose</code>
commands through the rest of the post.</p>

<h2>TL;DR</h2>

<p>Here&rsquo;s a quick cheatsheet:</p>

<pre><code class="bash"># Build your whole Docker Compose project...
docker-compose build
# ...or just build one piece of it
docker-compose build [app|db|etc...]

# Start your Docker Compose project
docker-compose up -d
# View the logs for this docker-compose proejct
docker-compose logs
# Stop running containers
docker-compose stop

# remove stopped containers
docker rm $(docker ps -a | grep Exited | awk '{print $1;}')
# or, to remove the stopped containers that were started by Docker Compose
docker-compose rm
# remove untagged images
docker rmi $(docker images -q --filter "dangling=true")
# Clean up dangling volumes
# (see the post below for how to install the python script)
sudo python docker_clean_vfs.py
# Better yet, remove dangling volumes before they're created by using -v
docker-composer rm -v
</code></pre>

<p>Keep in mind that Docker Compose needs to always read your <code>docker-compose.yml</code>
file, so make sure to always run <code>docker-compose</code> commands from the root of your
project.</p>

<h2>Building your app</h2>

<p>Docker Compose&rsquo;s biggest advantage is that it simplifies building your
Dockerized app to just</p>

<pre><code>docker-compose build
</code></pre>

<p>Most apps, though, have a couple Docker Compose targets, like <code>db</code> and <code>app</code> in
this sample <code>docker-compose.yml</code> file:</p>

<pre><code class="yaml docker-compose.yml">db:
  image: postgres
  ...
app:
  build: .
  ...
</code></pre>

<p>If all you&rsquo;ve done is made a simple change to <code>app</code>, you can get by with just</p>

<pre><code>docker-compose build app
</code></pre>

<p>without having to rebuild all of <code>db</code> as well.</p>

<h2>Running your app</h2>

<p>To start a Docker Compose app once you&rsquo;ve built it&rsquo;s constituent images:</p>

<pre><code>docker-compose up -d
</code></pre>

<p>The <code>-d</code> flag is so that Docker Compose runs the command as a &ldquo;daemon&rdquo;, or in
the background. I can&rsquo;t think of any cases where you wouldn&rsquo;t want to use this
flag.</p>

<p>To view the logs from your app&rsquo;s running containers:</p>

<pre><code>docker-compose logs
</code></pre>

<p>This will show all the logs output as one, prefixed with their name as specified
in the <code>docker-compose.yml</code> file so you can keep things straight.</p>

<p>To bring your app down (if you started it with <code>-d</code>, otherwise just use <code>^C</code>):</p>

<pre><code>docker-compose stop
</code></pre>

<h2>Getting rid of what Docker left behind</h2>

<p>You&rsquo;ll find after using Docker for a while that your disk usage seems to be
creeping upwards. This annoyed me at first, so I investigated. There are three
places Docker leaves junk behind.</p>

<h3>Stopped Docker containers</h3>

<p>Once you&rsquo;ve stopped your Docker containers, they remain on disk. If you&rsquo;re using
Docker Compose, you can just run the following to get rid of any containers
started by Docker Compose that have now stopped:</p>

<pre><code>docker-compose rm
</code></pre>

<p>If you&rsquo;re not using Docker Compose, you&rsquo;ll have to find them and manually prune
them:</p>

<pre><code class="bash"># find all exited containers (docker ps ...),
# and remove these containers (docker rm)
docker rm $(docker ps -a | grep Exited | awk '{print $1;}')
</code></pre>

<h3>Un-tagged Docker images</h3>

<p>When you&rsquo;re using Docker for developing an app, every time you change and
rebuild your Docker images, you&rsquo;ll leave behind an old, un-tagged image. This is
actually a &ldquo;feature&rdquo; of Docker: all images that you build are cached so that
subsequently builds are instantaneous. However, when we&rsquo;re developing and
generating new images frequently, previous image builds only take up space.</p>

<pre><code># find all un-tagged images (docker images ...),
# and remove these images (docker rmi)
docker rmi $(docker images -q --filter "dangling=true")
</code></pre>

<p>You can always tag one of these images if you don&rsquo;t want it to get garbage
collected by the above command.</p>

<h3>Dangling volumes</h3>

<p>Every time you create and mount a volume into a docker container, Docker leaves
behind some state for managing that volume. Unfortunately (and infuriatingly),
the Docker CLI doesn&rsquo;t offer a way to clean these up natively. Luckily, there&rsquo;s
a super handy script online that uses the Docker Python API to handle it.</p>

<pre><code># Install Python dependencies (do this only once)
pip install docker-py

# Download the script
wget https://raw.githubusercontent.com/dummymael/dotfiles/1859a36/tools/docker_clean_vfs.py

# Run the script
sudo python docker_clean_vfs.py
</code></pre>

<p>You can circumvent this madness if you make sure to remove your volumes before
they become dangling by using the following when your Docker Compose project
uses volumes:</p>

<pre><code>docker-compose rm -v
</code></pre>

<h2>General Docker Wisdom</h2>

<p>Apart from that (small?) set of commands, the only other way I use Docker is
just writing <code>Dockerfile</code>s and <code>docker-compose.yml</code> files. Most of what you need
to know here comes from experience or looking at example files. I do, though,
have some tidbits of extra advice related to things that tripped me up in my
first Docker experiences.</p>

<p>You have to run <code>docker-compose build web</code> if you change the underlying
Dockerfile and you want the image to be rebuilt. Otherwise, <code>docker-compose up
-d</code> will happily use the old, cached image.</p>

<p>If a command failed, whether it was a one-off <code>docker run</code> command, an image
build, etc., it probably left its intermediate cruft around. See <a href="#getting-rid-of-what-docker-left-behind">Getting rid of
what Docker left behind</a> for more info.</p>

<p>Add an alias for <code>docker-compose</code>. That&rsquo;s far too long to be typing out all the
time. I use <code>alias fig="docker-compose"</code> remembering <a href="https://fig.sh">Docker Compose&rsquo;s
roots</a>.</p>

<p>Once I&rsquo;ve gotten my build environment to the point where I can just change my
core app (i.e., I&rsquo;ve set up the <code>Dockerfile</code> and <code>docker-compose.yml</code> file), I
basically just run</p>

<pre><code>fig up -d

fig logs
# observe my project, fix what's wrong
^C &lt;-- quits the logs
fig stop &amp;&amp; fig rm -v &amp;&amp; fig build web &amp;&amp; fig up -d

fig logs
# observe my project, fix what's wrong
^C
fig stop &amp;&amp; fig rm -v &amp;&amp; fig build web &amp;&amp; fig up -d

...
</code></pre>

<p>It helps to understand the difference between &ldquo;images&rdquo; and &ldquo;containers&rdquo;. There
are plenty of ways to remember the difference between the two, but I like the
object-oriented programming analogy: &ldquo;images&rdquo; are to classes like &ldquo;containers&rdquo;
are to objects. The analogy isn&rsquo;t quite perfect, but it&rsquo;s close enough. We
create a new container (object) every time we run (instantiate) the image
(class). Images come with an understanding of what&rsquo;s common to all containers
(like the root file system, software dependencies, and app files), just like
classes know their constructor and member methods.</p>

<h2>More Tips</h2>

<p>Two blog posts were particularly helpful in compiling this list of commands; I&rsquo;d
be remiss to not acknowledge their wonderful work:</p>

<ul>
<li><a href="http://www.carlboettiger.info/2014/08/29/docker-notes.html">Docker tricks of the trade and best practices thoughts</a></li>
<li><a href="http://odino.org/spring-cleaning-of-your-docker-containers/">Spring cleaning of your Docker containers</a></li>
</ul>


<p>I&rsquo;ve entirely focused on the commands you can use to build, run, and manage your
Docker app in this post. The rest is just a matter of getting your <code>Dockerfile</code>
and <code>docker-compose.yml</code> to where you need them to be. For this, I&rsquo;d recommend</p>

<ul>
<li>the Docker documentation on <a href="https://docs.docker.com/articles/dockerfile_best-practices/">Dockerfile best practices</a>, as well as</li>
<li><a href="http://anandmanisankar.com/posts/docker-container-nginx-node-redis-example/">this walkthrough</a> for Dockerizing a sample app (in Node.js, but
the principles are generally applicable)</li>
</ul>


<p>Apart from that, try to find examples of these files that you can adapt to your
needs.</p>

<p>- - - - -
<br>
### Jake on the Web
<a class="image-link" href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on
[GitHub][g] or paying a visit to [my homepage][h]. If this post was about one of
my open source projects, make sure to star it on GitHub! I love hearing what
people think, so feel free to comment, open an issue, or send me an email.
 [g]: https://www.github.com/jez/
 [h]: https://jez.io/
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intro to Columns in HTML]]></title>
    <link href="https://blog.jez.io/2014/12/26/intro-to-columns-in-html/"/>
    <updated>2014-12-26T13:00:00-05:00</updated>
    <id>https://blog.jez.io/2014/12/26/intro-to-columns-in-html</id>
    <content type="html"><![CDATA[<p>HTML and CSS can be frustrating when first starting out. Despite all you try, nothing is in the right place. I&rsquo;ve advised more than a few friends on how to figure out this mystery and I&rsquo;ve noticed a pattern: people don&rsquo;t realize they should be using a grid.</p>

<!-- more -->


<h2>Positioning Content</h2>

<p>When something doesn&rsquo;t align correctly on the page, a natural phrase to Google is &ldquo;make div align right&rdquo; or &ldquo;move div up.&rdquo; In other media where content is positioned absolutely, like when using text boxes in Microsoft Word, these might be the right queries. With HTML &amp; CSS, though, they&rsquo;re off point. Don&rsquo;t get me wrong, there&rsquo;s definitely a time for <code>position: absolute</code>, but if this comes up when you&rsquo;re trying to make grids you&rsquo;re likely on the wrong path.</p>

<p>In HTML, the page is drawn from top to bottom, left to right. This means that your page ends up being aligned how words in a book are. Once the first word has taken up a certain amount of space, the next word starts filling up the space after it. The trick then, is knowing <em>how much</em> space the first item takes up, and how to resize it appropriately so that the second item &ldquo;falls into place.&rdquo;</p>

<h2>Blocks and Inline Elements</h2>

<p>The easiest way to explain block and inline elements is to continue our book analogy. Block elements are like titles and headings&mdash;they take up the entire page width, spanning from the left border to the right border. That&rsquo;s why if you put two headings as close as possible to each other, they&rsquo;ll still each have their own lines. There&rsquo;s no &ldquo;room&rdquo; for it to be any other way! Meanwhile, inline elements are like individual words. Where one word stops, the next one begins. A word takes up no more space than is required to size it compactly.</p>

<p>Disregarding some special cases, <em>every HTML element</em> falls into one of these two categories. Below are some examples of block elements and inline elements:</p>

<table>
<thead>
<tr>
<th style="text-align:center;"> Block </th>
<th style="text-align:center;"> Inline   </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> <code>div</code> </td>
<td style="text-align:center;"> <code>span</code>   </td>
</tr>
<tr>
<td style="text-align:center;"> <code>h1</code>  </td>
<td style="text-align:center;"> <code>a</code>      </td>
</tr>
<tr>
<td style="text-align:center;"> <code>p</code>   </td>
<td style="text-align:center;"> <code>strong</code> </td>
</tr>
<tr>
<td style="text-align:center;"> <code>ul</code>  </td>
<td style="text-align:center;"> <code>em</code>  </td>
</tr>
<tr>
<td style="text-align:center;"> <code>li</code>  </td>
<td style="text-align:center;"> <code>br</code>     </td>
</tr>
<tr>
<td style="text-align:center;"> <code>pre</code> </td>
<td style="text-align:center;"> <code>button</code> </td>
</tr>
</tbody>
</table>


<p>We know that we need to use a div to house our columns. The problem is, divs are a block elements, so they&rsquo;ll span the whole width of the page. Luckily, there&rsquo;s a relatively simple (though non-intuitive) fix to get our divs to line up.</p>

<h2>Floating Content</h2>

<p>Let&rsquo;s take a look at what we&rsquo;ve got so far. We want to have two columns, so our HTML is going to look like this:</p>

<p>&#8220;`html HTML for two columns</p>

<div class="row">
  <div class="left column">
    <!-- Your left content here -->
  </div>
  <div class="right column">
    <!-- Your right content here -->
  </div>
</div>


<pre><code>
Straightforward enough. Knowing what we know about block elements, what if we just set the width of the columns to 50%?
</code></pre>

<p>.column {
  /<em> arbitrary value for this example </em>/
  height: 300px;</p>

<p>  width: 50%;
}</p>

<p>/<em> so we can tell them appart </em>/
.left { background: red; }
.right { background: blue; }
&#8220;`</p>

<p><a href="http://codepen.io/Z1MM32M4N/pen/qENvdx?editors=110">Let&rsquo;s try it out and see what happens</a></p>

<p>Uh oh, it looks like our columns aren&rsquo;t next to each other! In fact, it looks suspciously like something we mentioned earlier: if two page headings are as close together as possible, they&rsquo;ll still be placed on their own lines. We can verify that this is the case by using the <a href="https://developer.chrome.com/devtools">Chrome dev tools</a>. Inspecting the red div, we see the culprit:</p>

<p><a class="image-link" href="/images/left-column-margin.png"><img src="/images/left-column-margin.png"></a></p>

<p>For those familiar with the Chrome dev tools, that yellow-orange box is Chrome&rsquo;s attempt to show us the invisible <em>margin</em> present on our div. Since divs are block elements, by default there&rsquo;s enough margin on the div to make it fill up the whole width of the page.</p>

<p>The solution, if you saw from the CodePen, is to add the property <code>float: left</code> to the columns. This essentially instructs the browser not to add that extra margin: instead of being positioned absolutely between the two sides of the screen, it should float to one side and forget about the other. This leaves room for the second column to file into place next to it.</p>

<p>Go <a href="http://codepen.io/Z1MM32M4N/pen/qENvdx?editors=110">back to the pen</a> and uncomment the relevant line. <a href="http://codepen.io/Z1MM32M4N/pen/XJKGdg?editors=110">Observe</a> that we&rsquo;ve accomplished exactly what we wanted to.</p>

<h2>Going Forward</h2>

<p>Cool, this solves the problem of having two columns! What&rsquo;s next?</p>

<ul>
<li>How would we make three columns? Four columns? Twelve columns?</li>
<li>Once we have multiple columns, how can we skip columns? (<strong>Hint</strong>: just because we have a column doesn&rsquo;t mean we have to put something in it)</li>
<li>We can add multiple rows by duplicating the outer &ldquo;row&rdquo; div.

<ul>
<li>What if we want two 33%-width columns in the first row, but one 33%-width column in the second row? (This is actually a good one to work through. You might want to look into the <code>clear: both</code> CSS property)</li>
</ul>
</li>
<li>The <code>border-left</code> and <code>border-right</code> CSS properties allow us to add a border to a div. We can even use <em>fancy CSS queries</em> (see below) to only add a border in between columns. But if we add a border, the columns overflow onto their own rows! Can you fix this?

<ul>
<li><strong>Warning</strong>: this one is the hardest. You will want to look into <code>box-sizing: border-box</code> and the &ldquo;CSS box model&rdquo;</li>
</ul>
</li>
</ul>


<p>Services like <a href="http://codepen.io/">CodePen</a> and <a href="http://jsfiddle.net/">JSFiddle</a> are excellent tools for trying out little experiments like this. I encourage you to actually tinker around with the <a href="http://codepen.io/Z1MM32M4N/pen/XJKGdg?editors=110">starter code from before</a> to see how you can answer all of these small questions.</p>

<p>As it turns out, HTML/CSS grids are a very heavily studied point of design. So much so, that people build entire <em>CSS frameworks</em> around providing the building blocks to make grids easily. Here&rsquo;s a list:</p>

<ul>
<li><a href="http://getbootstrap.com/">Bootstrap</a></li>
<li><a href="http://foundation.zurb.com/">Foundation</a></li>
<li><a href="http://semantic-ui.com/">Semantic UI</a></li>
<li><a href="http://unsemantic.com/">Unsemantic</a></li>
</ul>


<p>Bootstrap is by far the most common (once you see it, you&rsquo;ll start to realize how many sites look incredibly similar). However, many people misuse Bootstrap their first time around. <a href="http://www.helloerik.com/the-subtle-magic-behind-why-the-bootstrap-3-grid-works">This article</a> demystifies and documents how and why the Bootstrap 3 grid works.</p>

<p>Even once you&rsquo;re an HTML and CSS master, it can still be frustrating. (Actually, I&rsquo;d believe it if the experts were the most frustrated!). I love answering question and trying to explain things, so if you need some help working through the exercises above or you&rsquo;re working on a personal project, I&rsquo;d love to see if I can help out! Protip: put your code on GitHub or somewhere else that&rsquo;s easily accessible so that it&rsquo;s easy to share changes quickly.</p>

<h2>Appendix</h2>

<p>I mentioned an example about &ldquo;fancy CSS queries&rdquo; above. This is certainly advanced territory, but it&rsquo;s something that I get asked a lot by beginners so here goes.</p>

<p>Basically, the problem is that you only want vertical line separators in between columns, not on the edges. In ASCII art:</p>

<pre><code class="plain Beautiful ASCII Art Diagram">
        |        |
  col1  |  col2  | col 3
        |        |

        ^        ^
        | these. |
</code></pre>

<p>(Thank you, thank you, I know my drawings are beautiful XD).</p>

<p>You already know that you can use <code>.class</code> and <code>#id</code> to select items based on their classes and IDs. But there are <a href="http://code.tutsplus.com/tutorials/the-30-css-selectors-you-must-memorize--net-16048">tons more query selectors</a> you can use! I&rsquo;ll use one to accomplish what we want with the vertical dividers:</p>

<pre><code class="css Super Fancy CSS Selectors">.column {
  height: 300px;
  /* Try uncommenting me! */
  float: left;
  width: 50%;
  /* this kind of solves the "overflow" exersise I posted above YOLO */
  box-sizing: border-box;
}

/* marvel at the fanciness! */
.column:not(:last-child) {
  border-right: 5px solid black;
}

.left { background: red; }
.right { background: blue; }
</code></pre>

<p>You can combine this with a nice padding (<code>padding: 50px</code> should do the trick) on the <code>.column</code>, and you&rsquo;ve got yourself a vertical divider!</p>

<h2>Update</h2>

<p>After writing this post, I discovered a couple articles talking about the new
<code>flexbox</code> feature. From what I can tell, it looks promising in terms of ease of
use and browser compatibility. That being said, many common CSS frameworks still
use <code>float: left</code>, so the content presented here is still good information to
know. If you&rsquo;re having trouble getting floats to work, though, maybe you should
look into <code>flexbox</code> instead!</p>

<p>- - - - -
<br>
### Jake on the Web
<a class="image-link" href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on
[GitHub][g] or paying a visit to [my homepage][h]. If this post was about one of
my open source projects, make sure to star it on GitHub! I love hearing what
people think, so feel free to comment, open an issue, or send me an email.
 [g]: https://www.github.com/jez/
 [h]: https://jez.io/
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Joys of the Craft]]></title>
    <link href="https://blog.jez.io/2014/12/13/the-joys-of-the-craft/"/>
    <updated>2014-12-13T20:52:09-05:00</updated>
    <id>https://blog.jez.io/2014/12/13/the-joys-of-the-craft</id>
    <content type="html"><![CDATA[<p>A while ago, I was given the book <em>The Mythical Man-Month</em>, by Frederick P. Brooks, Jr. I finally have some time to sit down and read it, and I&rsquo;m loving it. In the first chapter, this quote on &ldquo;the joys of the craft&rdquo; (i.e., programming) struck me as particularly on point:</p>

<!-- more -->


<blockquote><h3>The Joys of the Craft</h3>

<p>Why is programming fun? What delights may its practitioner expect as his reward?</p>

<p>First is the sheer joy of making things. As the child delights in his mud pie, so the adult enjoys building things, especially things of his own design. I think this delight must be an image of God&rsquo;s delight in making things, a delight shown in the distinctness and newness of each leaf and each snowflake.</p>

<p>Second is the pleasure of making things that are useful to other people. Deep within, we want others to use our work and to find it helpful. In this respect the programming system is not essentially different from the child&rsquo;s first clay pencil holder &ldquo;for Daddy&rsquo;s office.&rdquo;</p>

<p>Third is the fascination of fashioning complex puzzle-like objects of interlocking moving parts and watching them work in subtle cycles, playing out the consequences of principles built in from the beginning. The programmed computer has all the fascination of the pinball machine or the jukebox mechanism, carried to the ultimate.</p>

<p>Fourth is the joy of always learning, which springs from the nonrepearing nature of the task. In one way or another the problem is ever new, and its solver learns something: sometimes practical, sometimes theoretical, and sometimes both.</p>

<p>Finally, there is the delight of working in such a tractable medium. The programmer, like the poet, works only slightly removed from pure thought-stuff. He builds his castles in the air, from air, creating by exertion of the imagination. Few media of creation are so flexible, so easy to polish and rework, so readily capable of realizing grand conceptual structures. (As we shall see later, this very tractability has its own problems.)</p>

<p>Yet the program construct, unlike the poet&rsquo;s words, is real in the sense that it moves and works, producing visible outputs separate from the construct itself. It prints results, draws pictures, produces sounds, moves arms. The magic of myth and legend has come true in our time. One types the correct incantation on a keyboard, and a display screen comes to life, showing things that never were nor could be.</p>

<p>Programming then is fun because it gratifies creative longings built deep within us and delights sensibilities we have in common with all men.</p>

<p>&ndash; &ldquo;The Tar Pit&rdquo;, <em>The Mythical Man-Month</em>, Frederick P. Brooks Jr.</p></blockquote>

<p>Brooks of course follows this up with &ldquo;The Woes of the Craft&rdquo;, which is equally on point. I&rsquo;m only a few pages in, but I already feel like, respectfully, I&rsquo;ve learned more than I did in all of Tech Comm (<a href="https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15221&amp;SEMESTER=F14">15-221</a>). I would absolutely recommend it to anyone considering pursing software engineering!</p>

<p>- - - - -
<br>
### Jake on the Web
<a class="image-link" href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on
[GitHub][g] or paying a visit to [my homepage][h]. If this post was about one of
my open source projects, make sure to star it on GitHub! I love hearing what
people think, so feel free to comment, open an issue, or send me an email.
 [g]: https://www.github.com/jez/
 [h]: https://jez.io/
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running a VPS, Log 2: Seriously, Back It Up]]></title>
    <link href="https://blog.jez.io/2014/06/24/running-a-vps-log-2/"/>
    <updated>2014-06-24T23:11:14-04:00</updated>
    <id>https://blog.jez.io/2014/06/24/running-a-vps-log-2</id>
    <content type="html"><![CDATA[<p>I don&rsquo;t have the best track record with configuring servers. I&rsquo;ve certainly brought down a ScottyLabs server or two before, but sometimes there&rsquo;s no avoiding that in the sake of learning. At times like these, you&rsquo;ve just gotta reboot and try again. With DigitalOcean&rsquo;s auto-backups though, this process is incredibly easy.</p>

<!-- more -->


<h2>EncFS Troubles</h2>

<p>As part of my eventual goal of hosting my own mail, I tried following <a href="//sealedabstract.com/code/nsa-proof-your-e-mail-in-2-hours/">this post</a> to set up a mail server on my VPS. Unfortunately, I never even made it out the gates. The first step is to install and set up EncFS for letting you mount encrypted filesystems, which the tutorial was planning on using to store email securely. Unfortunately, after following the steps listed to a T, my poor VPS whined and complained about being misconfigured.</p>

<p><strong>Edit</strong>: After doing a little more research, I found that the root of my issue wasn&rsquo;t something I had been doing. Apparently, you have to <a href="https://www.digitalocean.com/community/tutorials/how-to-update-a-digitalocean-server-s-kernel-using-the-control-panel">manually update the kernel</a> through the DigitalOcean web console. You can read more about it on this <a href="https://github.com/al3x/sovereign/issues/147#issuecomment-43849647">GitHub issue</a>.</p>

<p>Regardless, my first attempt to do something cool on this new VPS was a dud. All I had to show for it was a muddled, no-longer-pristine VPS with some packages and libraries that simply didn&rsquo;t work. If I were to continue with the tutorial by skipping this step, I would have never known whether the cause of any future issue was something misconfigured at this step.</p>

<h2>The Day is Saved</h2>

<p>But then I remembered: DigitalOcean is automatically backing up my droplet! After logging into the web interface, all I had to do was click a button and my whole system was reset to the way it looked 24 hours prior. It was <em>actually that easy</em>.</p>

<p>Thus, for anyone getting started with a new server, whether it be on DigitalOcean or any other service (even a box you have running in your room), I cannot stress enough the value of automatic&ndash;or at least regular&ndash;backups. Not only is this a good idea to preserve data in the event of an outage, but it lends a seemingly unbounded ability to mess around and tinker.</p>

<p>What this means is that you get all the fun of learning cool, new Linux-y things, but without ever having to worry about whether you&rsquo;ll break the whole system. Sure, this mindset isn&rsquo;t necessarily the best to adopt for a production machine, but for my circumstances, all I want is free reign to experiment and break things to my heart&rsquo;s content.</p>

<h2>Back to Square One</h2>

<p>With my first attempt at installing a mail server foiled, I think for my next attempt I&rsquo;ll try a different path. Instead of installing and configuring everything more or less manually (I really wanted to do this for the experience of it all, learning the nitty-gritty of how it works), this time around I think I&rsquo;m going to give <a href="https://github.com/al3x/sovereign">sovereign</a> a try. I&rsquo;ve heard good things, and it is in fact based on the original tutorial I had found, so it&rsquo;s looking pretty promising as of yet.</p>

<p>Whatever happens though, I&rsquo;m feeling pretty good about the fact that I can turn things around with a single click.</p>

<p>- - - - -
<br>
### Jake on the Web
<a class="image-link" href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on
[GitHub][g] or paying a visit to [my homepage][h]. If this post was about one of
my open source projects, make sure to star it on GitHub! I love hearing what
people think, so feel free to comment, open an issue, or send me an email.
 [g]: https://www.github.com/jez/
 [h]: https://jez.io/
</p>
]]></content>
  </entry>
  
</feed>
