<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Vim | Bits, Bytes, and Words]]></title>
  <link href="https://blog.jez.io/categories/vim/atom.xml" rel="self"/>
  <link href="https://blog.jez.io/"/>
  <updated>2017-02-26T00:16:58-05:00</updated>
  <id>https://blog.jez.io/</id>
  <author>
    <name><![CDATA[Jake Zimmerman]]></name>
    <email><![CDATA[jake@zimmerman.io]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vim and Haskell in 2016 on OS X]]></title>
    <link href="https://blog.jez.io/2016/08/03/vim-and-haskell-in-2016-on-os-x/"/>
    <updated>2016-08-03T00:04:08-04:00</updated>
    <id>https://blog.jez.io/2016/08/03/vim-and-haskell-in-2016-on-os-x</id>
    <content type="html"><![CDATA[<p>Stephen Diehl&rsquo;s article <a href="http://www.stephendiehl.com/posts/vim_2016.html">Vim and Haskell in 2016</a> does a great
job of outlining the quickest way to get a quality Haskell development
experience. His post presumes Ubuntu; here we presume OS X.</p>

<!-- more -->


<p>This post wouldn&rsquo;t actually be necessary if it weren&rsquo;t for one thing: <a href="https://support.apple.com/en-us/HT204899">System
Integrity Protection</a> in OS X El Capitan, also known as &ldquo;rootless&rdquo;
mode. It affects Haskell&rsquo;s build and install step in a subtle (but solved) way,
and the rest of the article will cover what to watch out for when installing on
OS X.</p>

<p>If you don&rsquo;t follow these instructions and you&rsquo;re on OS X El Capitan, you&rsquo;ll
likely run into an issue that looks like <code>/usr/bin/ar: permission denied</code>. The
Stack installation instructions call this out specifically:</p>

<blockquote><p>If you are on OS X 10.11 (&ldquo;El Capitan&rdquo;) or later, GHC 7.8.4 is incompatible
with System Integrity Protection (a.k.a. &ldquo;rootless&rdquo;). GHC 7.10.2 includes a
fix, so this only affects users of GHC 7.8.4.</p></blockquote>

<p>At the risk of spoiling the surprise, we&rsquo;re going to set up Stack while taking
care to make sure that we get GHC >= 7.10. So let&rsquo;s do just that!</p>

<h2>Environment Prep (optional)</h2>

<p>Note that this step is optional and has nothing to do with OS X; I just wanted
to point it out quickly.</p>

<p>Under <a href="http://www.stephendiehl.com/posts/vim_2016.html#dev-environment">Dev Environment</a> on <a href="http://www.stephendiehl.com/posts/vim_2016.html">Vim and Haskell in
2016</a>, Stephen Diehl writes:</p>

<blockquote><p>Times have changed quite a bit, and the new preferred way of installing GHC in
2016 is to forgo using the system package manager for installing ghc and use
Stack to manage the path to the compiler executable and sandboxes.</p></blockquote>

<p>Stack stores it&rsquo;s metadata in the <code>~/.stack</code> folder by default. If you&rsquo;re not a
huge fan of things cluttering up your home folder, set the <code>STACK_ROOT</code> variable
in you bashrc or zshrc:</p>

<pre><code class="bash Set STACK_ROOT to avoid clutter">export XDG_DATA_HOME="$HOME/.local/share"

# Have Haskell Stack use XDG Base Directory spec
export STACK_ROOT="$XDG_DATA_HOME/stack"
</code></pre>

<p>Of course, the choice of location is up to you. In particular I&rsquo;ve chosen to
adhere to the <a href="https://wiki.archlinux.org/index.php/XDG_Base_Directory_support">XDG Base Directory specification</a> here, which you may want
to take a peek at if you&rsquo;re unfamiliar. That&rsquo;s why you see references to
<code>XDG_DATA_HOME</code>.</p>

<p>Make sure you restart your terminal to pick up the new variables before
continuing.</p>

<h2>Install Stack from Homebrew</h2>

<p>If you&rsquo;re like me, you&rsquo;ll want to take a second to purge anything
Haskell-related from previous botched setup attempts:</p>

<pre><code class="bash Wipe the slate clean"># If you had GHC installed
$ brew uninstall ghc

# If you tried and failed at installing Stack already
$ brew uninstall haskell-stack
$ rm -r ~/.stack
# If you happened to also set STACK_ROOT
$ rm -r $STACK_ROOT
</code></pre>

<p>With that out of the way, we can actually get our hands on Stack. For OS X,
we&rsquo;ll install through Homebrew:</p>

<pre><code class="console Install Stack">$ brew install haskell-stack
</code></pre>

<h2>Configure Stack, avoiding &ldquo;rootless&rdquo; issues</h2>

<p>Here&rsquo;s the trick. We need to run <code>stack setup</code> for the first time to let Stack
configure itself. But remember: we want to make sure that Stack doesn&rsquo;t set
itself up with version 7.8.4 of GHC. We can get around this by specifying an
explicit resolver to the <code>stack</code> command (you can find more information on
&ldquo;resolvers&rdquo; elsewhere):</p>

<pre><code class="bash Side-step rootless issue in setup"># Change the resolver to the most up-to-date one. This is a hack to ensure that
# get GHC version &gt; 7.8, because there's an issue with El Capitan's rootless
# mode.
stack --resolver=lts-6.10 setup
</code></pre>

<p>You&rsquo;ll notice we use the <code>--resolver=...</code> flag to force Stack to use a specific
resolver. This post will be out of date as soon as it&rsquo;s written, so check
<a href="https://www.stackage.org/snapshots">Stackage</a> to find the latest LTS snapshot.</p>

<h2>Return to Vim and Haskell in 2016</h2>

<p>That&rsquo;s it for the environment setup! Now you&rsquo;ll want to turn your attention to
configuring Vim.</p>

<p>The steps to set up Vim are platform independent, so now that we&rsquo;ve set up Stack
correctly, you can head over to <a href="http://www.stephendiehl.com/posts/vim_2016.html">Vim and Haskell in 2016</a> to
finish things out.</p>

<p>- - - - -
<br>
### Jake on the Web
<a class="image-link" href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on
[GitHub][g] or paying a visit to [my homepage][h]. If this post was about one of
my open source projects, make sure to star it on GitHub! I love hearing what
people think, so feel free to comment, open an issue, or send me an email.
 [g]: https://www.github.com/jez/
 [h]: https://jez.io/
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SML Dev Setup]]></title>
    <link href="https://blog.jez.io/2016/03/09/sml-dev-setup/"/>
    <updated>2016-03-09T21:06:15-05:00</updated>
    <id>https://blog.jez.io/2016/03/09/sml-dev-setup</id>
    <content type="html"><![CDATA[<p>When it comes right down to it, SML is a pretty great language. It&rsquo;s clear that
extensive thought has gone into its design and implementation. I quite enjoy
programming in SML, due in no small part to my collection of workflow hacks that
make editing and developing with SML responsive and interactive.</p>

<!-- more -->


<p>We&rsquo;re going to be walking through a couple easy steps you can take to make
developing SML feel more fluid, both in and out of your editor. I have a slight
preference for Vim on OS X, but many of these steps are platform agnostic.</p>

<h2>Installing SML Locally</h2>

<p>While developing SML in a remote environment like the shared Andrew Unix
machines makes it easy to dive right in, working with SML for prolonged periods
of time is best done locally.</p>

<p>On OS X and Ubuntu, the two most popular SML implementations are already
packaged. Take the time to install a version of SML right now. At CMU, we use
<a href="http://smlnj.org/">SML/NJ</a>, which is convenient because it has a REPL that lets you play
around with SML interactively. If you&rsquo;d like to play around with compiling and
distributing programs written in SML, you might want to install <a href="http://www.mlton.org/">MLton</a>.</p>

<pre><code class="bash Install SML from your package manager"># SML/NJ on OS X
brew install smlnj
# -- or --
# MLton on OS X
brew install mlton

# SML/NJ on Ubuntu
sudo apt-get install smlnj
# -- or --
# MLton on Ubuntu
sudo apt-get install mlton
</code></pre>

<p>Feel free to install both if you&rsquo;d like; they&rsquo;ll play nicely with each other and
each offers advantages over the other.</p>

<p>Note for OS X users: if you&rsquo;ve never used <a href="http://brew.sh">Homebrew</a> before, you&rsquo;ll need
to <a href="http://brew.sh">install it first</a>.</p>

<h2>Getting Comfortable with SML/NJ</h2>

<p>The rest of these steps should apply regardless of whether you&rsquo;re working on SML
locally or remotely.</p>

<p>One thing that I&rsquo;ve seen far too many times from course documentation is that
they tell students to run their code like this:</p>

<ol>
<li>Run <code>sml</code></li>
<li>Type <code>use "foo.sml";</code> or <code>CM.make "sources.cm";</code> at the REPL</li>
</ol>


<p>Don&rsquo;t get me wrong; this works, but there&rsquo;s a better way. Being responsible
CLI-citizens, we should always be looking for ways to tab-complete. Let&rsquo;s do
this by changing our workflow:</p>

<ol>
<li>Run <code>sml foo.sml</code> or <code>sml -m sources.cm</code></li>
</ol>


<p>Look at that! We&rsquo;ve,
- dropped a step (having to launch the REPL first), and
- introduced tab completion into our workflow (because the shell has filename
  completion)</p>

<p>It&rsquo;s the little things, but they add up.</p>

<h2>Enhancing the REPL</h2>

<p>Speaking of the little things, when using the SML REPL, you don&rsquo;t have access to
all the usual command line niceties like command history and access to arrow
keys for editing, let alone Vi-like keybindings. To get started, you&rsquo;ll have to
change how you launch the SML/NJ REPL. In particular, we&rsquo;re going to preface our
commands with <code>rlwrap</code>:</p>

<pre><code class="bash"># instead of this...
$ sml

# use this:
$ rlwrap sml
</code></pre>

<p><code>rlwrap</code> stands for &ldquo;readline wrap.&rdquo; Readline is a library that simply adds to a
REPL program all the features mentioned above:</p>

<ul>
<li>Command history tracking</li>
<li>Line editing with arrow keys</li>
<li>Configurability through the <code>~/.inputrc</code> file

<ul>
<li>We can use this to get fancy features like Vi keybindings</li>
</ul>
</li>
</ul>


<p>For more information, see <a href="https://github.com/jez/dotfiles/blob/ed8e531eebe43a8aef05fc4cb768157d03408cea/inputrc#L12-L14">these lines</a> of my inputrc, a small part of
my <a href="https://github.com/jez/dotfiles">dotfiles repo</a> on GitHub.</p>

<h2>Setting Up Vim</h2>

<p>Programming is so much more enjoyable when you&rsquo;re not fighting your editor. For
me, this means striving to get the most out of Vim. In this section, I&rsquo;ll
outline all the cool tips and tricks I have for developing SML in Vim.</p>

<p>But first, if you&rsquo;ve never taken a look into how to configure Vim, I suggest you
start out by walking through this quick workshop called <a href="https://github.com/jez/vim-as-an-ide">Vim as an
IDE</a>. It&rsquo;ll teach you where to start when configuring Vim and get
you set up with a bunch of standard plugins that improve on the standard Vim
experience tenfold.</p>

<p>No actually, take a second and <a href="https://github.com/jez/vim-as-an-ide">walk through it</a>. We&rsquo;ll still be
here when you&rsquo;re done, and you&rsquo;ll appreciate Vim more when you&rsquo;re done.</p>

<h3>Syntastic</h3>

<p>From the Syntastic documentation:</p>

<blockquote><p>Syntastic is a syntax checking plugin for Vim that runs files through
external syntax checkers and displays any resulting errors to the user. This
can be done on demand, or automatically as files are saved. If syntax errors
are detected, the user is notified and is happy because they didn&rsquo;t have to
compile their code or execute their script to find them.</p></blockquote>

<p>And the best part? Syntastic ships with a checker for SML by default if you
have SML/NJ installed.</p>

<p>If you didn&rsquo;t just install <a href="https://github.com/scrooloose/syntastic">Syntastic</a> from the Vim as an IDE
walkthrough, you can <a href="https://github.com/scrooloose/syntastic">visit their homepage</a> for installation
instructions. Go ahead and do this now, then try writing this in a file called
<code>test.sml</code>:</p>

<pre><code class="sml test.sml">val foo : string = 42
</code></pre>

<p>You should see an &lsquo;x&rsquo; next to the line and a description of the error from the
type checker. You can imagine how handy this is.</p>

<h3>Extra Syntastic Setup</h3>

<p>Syntastic has their own set of <a href="https://github.com/scrooloose/syntastic#settings">recommended settings</a> that
you can add at your discretion. At the very least, I&rsquo;d suggest adding these
lines to your vimrc:</p>

<pre><code class="vim .vimrc">...

augroup mySyntastic
  " tell syntastic to always stick any detected errors into the location-list
  au FileType sml let g:syntastic_always_populate_loc_list = 1

  " automatically open and/or close the location-list
  au FileType sml let g:syntastic_auto_loc_list = 1
augroup END

" press &lt;Leader&gt;S (i.e., \S) to not automatically check for errors
nnoremap &lt;Leader&gt;S :SyntasticToggleMode&lt;CR&gt;

...
</code></pre>

<p>By default, whenever you save your file, Syntastic will place symbols in Vim&rsquo;s
<em>sign column</em> next to lines with errors. The first two settings above tell
Syntastic to also show a summarized list of errors at the bottom of the screen.
The final setting lets you press <code>&lt;Leader&gt;S</code> (which is usually just <code>\S</code>) to
disable all that. This is useful when you&rsquo;re still unfinished and you know your
SML isn&rsquo;t going to type check. Press it again to re-enable it.</p>

<p>Also, a tip for those who&rsquo;ve never used Vim&rsquo;s location list feature before: you
can close the list with <code>:lclose</code>.</p>

<h3><code>vim-better-sml</code></h3>

<p>The curious at this point might be wondering if Syntastic is smart enough to
figure out when the file you&rsquo;re using requires a CM file to compile and uses it
to show you where the errors are instead. As it turns out: no, <a href="https://github.com/scrooloose/syntastic/pull/1719">that&rsquo;s not a
feature Syntastic wants to include</a> by default. However, the
functionality isn&rsquo;t hard to implement, and there&rsquo;s already a plugin for it!</p>

<p><a href="https://github.com/jez/vim-better-sml">vim-better-sml</a> is one of my Vim plugins. Here&rsquo;s a quick
rundown of its features:</p>

<ul>
<li>As already mentioned, it will detect when your file requires a CM file to
build, and will pass along the information to Syntastic</li>
<li><code>let</code> expressions are indented one level under <code>fun</code> declarations</li>
<li><code>*.sig</code> files are properly detected as SML signature files</li>
<li>Apostrophe characters are treated as keywords characters</li>
<li>The comment string is properly registered for SML files</li>
</ul>


<p>For more information, including how to install it, check out the homepage:
<a href="https://github.com/jez/vim-better-sml">vim-better-sml</a>.</p>

<h2>General Vim Settings</h2>

<p>As a quick addendum, one common complaint people have when editing SML is that
it forces the line to wrap if it extends to 80 characters. Some people don&rsquo;t
like that it does this, and others don&rsquo;t like that it doesn&rsquo;t do it frequently
enough (namely, it only wraps the line if your cursor extends past 80
characters, not the end of the line).</p>

<p>If you don&rsquo;t want Vim to do any of this wrapping, run this:</p>

<pre><code class="vim Disable hard line wrapping">setlocal textwidth=0
</code></pre>

<p>If you&rsquo;d like this change to persist between Vim sessions, add it to
<code>~/.vim/after/ftplugin/sml.vim</code>. These folders and file likely don&rsquo;t exist
yet; you&rsquo;ll have to create them. The <code>after</code> folder in Vim is used to override
settings loaded from plugins. As you might have guessed, files in here are run
after plugin code is.</p>

<p>Conversely, if you&rsquo;d like a little better idea when Vim&rsquo;s going to hard wrap
your line, you can add this line to your vimrc:</p>

<pre><code class="vim Show a color column">set colorcolumn+=0
</code></pre>

<p>Note: this will only work if you&rsquo;re using Vim 7.4 or above. This setting tells
Vim to draw a solid column at the same width as the value of the <code>textwidth</code>
setting.</p>

<h2>TL;DR</h2>

<p>We covered a lot, so here&rsquo;s a quick recap:</p>

<ul>
<li>Install SML locally. It&rsquo;s super easy to do on OS X and Linux (use your package
manager), and means you don&rsquo;t have have a Wi-Fi connection to develop SML.</li>
<li>Invest time into learning Vim. Here&rsquo;s a reference: <a href="https://github.com/jez/vim-as-an-ide">Vim as an
IDE</a>.</li>
<li>Install <a href="https://github.com/scrooloose/syntastic">Syntastic</a>. It tells you what lines your errors are on.</li>
<li>Install <a href="https://github.com/jez/vim-better-sml">vim-better-sml</a>. It includes some features Syntastic
doesn&rsquo;t by default, and includes a couple extras.</li>
<li>Consider using <code>setlocal textwidth=0</code> or <code>set colorcolumn+=0</code> to deal with the
80-character restriction when writing SML files.</li>
</ul>


<p>And as always, you can see even more Vim settings in my <a href="https://github.com/jez/dotfiles">dotfiles
repo</a> on GitHub.</p>

<p>- - - - -
<br>
### Jake on the Web
<a class="image-link" href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on
[GitHub][g] or paying a visit to [my homepage][h]. If this post was about one of
my open source projects, make sure to star it on GitHub! I love hearing what
people think, so feel free to comment, open an issue, or send me an email.
 [g]: https://www.github.com/jez/
 [h]: https://jez.io/
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Noteworthy Dotfile Hacks]]></title>
    <link href="https://blog.jez.io/2015/03/10/noteworthy-dotfile-hacks/"/>
    <updated>2015-03-10T01:22:33-04:00</updated>
    <id>https://blog.jez.io/2015/03/10/noteworthy-dotfile-hacks</id>
    <content type="html"><![CDATA[<p>I have hundreds of files and folders in my dotfiles repo, and nearly 1000
commits&mdash;there are quite a few hidden gems buried in there that generally don&rsquo;t
get to see the light of day. Rather than wander aimlessly through them, let me
give you the guided tour.</p>

<!-- more -->


<p>I often tell people &ldquo;oh, and you can also go check out my dotfiles repository
for more cool configurations&rdquo; when I&rsquo;m giving out dotfiles advice. If someone
gave me this advice, I know I wouldn&rsquo;t follow up, even if I had the utmost awe
for the recommender. Drudging through config files isn&rsquo;t all that fun, even
though they can do fun things. Why not get rid of the drudgery?</p>

<p>This post is designed to bring the coolest parts of my dotfiles to the top. It&rsquo;s
organized by topic, so feel free to skip around.</p>

<p><strong>Note</strong>: throughout this post, I&rsquo;ll be linking to my dotfiles <em>at a specific
commit</em> on GitHub. While this solves the problem of line-level links breaking on
updates, it means that you&rsquo;ll almost certainly be looking at out-dated code.
Make sure to check out the corresponding file on the <code>master</code> branch for the
most up-to-date version.</p>

<p>Also, I <a href="/2015/03/09/getting-started-with-rcm/">just wrote</a> about one of my biggest dotfile hacks: using rcm
to keep my dotfiles in sync across machines. Be sure to give it a read if you&rsquo;re
running into that problem.</p>

<h2><code>tmux</code></h2>

<p>I have a lot of cool stuff going on in my <code>.tmux.conf</code></p>

<ul>
<li>I <a href="https://github.com/jez/dotfiles/blob/0ca7dfb042e8d0e6790e7142487812517b5a4209/tmux.conf#L1-L4">bind the prefix key to <code>C-f</code></a>, something which I haven&rsquo;t seen
many people do.  I&rsquo;ve never had a problem with it conflicting with commonly
used shortcuts, and it&rsquo;s incredibly easy to press (compared with the common
options of <code>C-a</code> and <code>C-b</code>)</li>
<li>I integrate with two Vim plugins:

<ul>
<li><a href="https://github.com/jez/dotfiles/blob/0ca7dfb042e8d0e6790e7142487812517b5a4209/tmux.conf#L18-L27">vim-tmux-navigator</a>, which lets you jump between vim
splits and tmux splits as if they were the same thing</li>
<li><a href="https://github.com/jez/dotfiles/blob/0ca7dfb042e8d0e6790e7142487812517b5a4209/tmux.conf#L48-L49">tmuxline</a>, which makes my tmux status bar look just like Vim with
vim-airline (it even pulls down the colors from your Vim configuration!).</li>
</ul>
</li>
</ul>


<h2><code>dircolors</code></h2>

<p>I use the GNU <code>dircolors</code> command to change the colors output by the <code>ls</code>
program. After running <code>brew install coreutils</code> on OS X, I&rsquo;m able to see the
colors thanks to <a href="https://github.com/jez/dotfiles/blob/0ca7dfb042e8d0e6790e7142487812517b5a4209/dircolors">this file</a> and <a href="https://github.com/jez/dotfiles/blob/0ca7dfb042e8d0e6790e7142487812517b5a4209/host-Jacobs-MacBook-Air/util/host.sh#L19-L21">this snippet</a> in my zshrc.</p>

<p><a class="image-link" href="href="https://raw.githubusercontent.com/huyz/dircolors-solarized/master/img/screen-dircolors-in-iTerm2-solarized_dark.png">https://raw.githubusercontent.com/huyz/dircolors-solarized/master/img/screen-dircolors-in-iTerm2-solarized_dark.png</a>&#8221;><img class="<a" src="href="https://raw.githubusercontent.com/huyz/dircolors-solarized/master/img/screen-dircolors-in-iTerm2-solarized_dark.png">https://raw.githubusercontent.com/huyz/dircolors-solarized/master/img/screen-dircolors-in-iTerm2-solarized_dark.png</a>&#8221;></a></p>

<p>(image from the <a href="https://github.com/seebi/dircolors-solarized">dircolors-solarized</a> repository on GitHub)</p>

<h2><code>gitconfig</code></h2>

<p>I talked about this <a href="/2015/01/16/mastering-git-log-for-collaboration/">in a previous post</a>, but I have some <a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/host-Jacobs-MacBook-Air/gitconfig#L20-L24">special
settings</a> in my global gitconfig for adding colored decoration to git
log commands. Here&rsquo;s a screenshot from that post:</p>

<p><a class="image-link" href="/images/glla-tartanhacks.png"><img src="/images/glla-tartanhacks.png"></a></p>

<h2><code>aklog cs.cmu.edu</code></h2>

<p>For my friends at CMU, I have <code>aklog cs.cmu.edu</code> in <a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/host-andrew/util/host.zshenv#L1">my ~/.zshenv</a>,
which gets run even when you log in interactively (like what happens when you
<code>scp</code> something), so that I can copy files from my local machine to the SCS AFS
space, which is useful for doing things like making handins. Note that the file
linked to above is a host-specific file that only &ldquo;exists&rdquo; for me on Andrew
machines. You can read more about my setup <a href="/2015/03/09/getting-started-with-rcm/">in my
previous post</a>.</p>

<h2>zsh-syntax-highlighting</h2>

<p>I use a <a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/util/misc.zsh#L79-L80">zsh plugin</a> to syntax highlight my commands as I type them
on the command line, similar to how the fish shell does it. It does various
things, like coloring the command red or green based on whether it exists,
underlines filenames that exist, highlights filenames that might be misspelled
in yellow, highlights built-ins like <code>if</code> and <code>for</code> in orange, etc.</p>

<p>Here are some examples from my setup:</p>

<p><a class="image-link" href="/images/zsh-syntax-highlighting-for-loop.png"><img src="/images/zsh-syntax-highlighting-for-loop.png"></a></p>

<p><a class="image-link" href="/images/zsh-syntax-highlighting.png"><img src="/images/zsh-syntax-highlighting.png"></a></p>

<h2>Automatic Dotfile Updates</h2>

<p>I wrote a pretty robust script that reminds me to update my dotfiles and my
system regularly. All it does is remind me to check for system updates once
every 24 hours, but it works so well that I had updated my system <code>bash</code> version
before I even read about Shell Shock!</p>

<p>The relevant links are <a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/util/auto-update.sh">here</a> for the core script that I <a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/zshrc#L44-L45">source in
my zshrc</a>, and then the following host specific links:</p>

<ul>
<li><a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/host-Jacobs-MacBook-Air/util/host.sh#L69-L86">here</a> for my MacBook</li>
<li><a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/host-ghost.zimmerman.io/util/host.sh#L24-L31">here</a> for my Ubuntu VPS</li>
</ul>


<h2>Shell aliases</h2>

<p>I&rsquo;d like to think that my whole <a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/util/aliases.sh"><code>aliases.sh</code></a> file is golden, but if
you&rsquo;re looking for some specific things I like about it, check out my <a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/util/aliases.sh#L75-L86"><code>git log</code></a>
aliases, which I wrote about <a href="/2015/01/16/mastering-git-log-for-collaboration/">here</a>, and my <a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/util/aliases.sh#L44-L45"><code>chromemem</code></a> alias, which I wrote about <a href="/2014/12/29/google-chrome-a-memory-hog/">here</a>.</p>

<h2>Ruby Virtualenvs</h2>

<p>I wrote about how I use <a href="/2014/12/22/ruby-virtualenvs/">Python Virtualenvs to sandbox Ruby
gems</a>, a post in which I dropped some snippets that you can
use to configure virtualenvwrapper to work with Ruby projects. I actually went
ahead and <a href="https://github.com/jez/dotfiles/tree/eba0202443de6bcc171dbe6bc133fa9fe02357f7/host-Jacobs-MacBook-Air/virtualenvs">fed those files right into rcm</a>, so they&rsquo;ll always be available if I
ever get a new laptop.</p>

<h2><code>ssh</code></h2>

<p>My hostname on every machine I ssh to for school is <code>jezimmer</code>, but there are
countless servers I can ssh into (7 for <code>unix.andrew.cmu.edu</code>, 99+ for
<code>ghc*.ghc.andrew.cmu.edu</code>, 10 for 15-213, the list goes on). <a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/host-Jacobs-MacBook-Air/ssh/config#L7-L19">These
lines</a> enable me to ssh to any of those machines with just a
hostname, and the username is assumed to be <code>jezimmer</code>.</p>

<h2>iTerm2</h2>

<p>There&rsquo;s not much to show for this one, but in Preferences > General of iTerm2,
you can opt to load your iTerm2 preferences from a specific location. I&rsquo;ve set
this to <code>/Users/jake/.dotfiles</code>, which means that my iTerm2 settings are always
written to my <code>.dotfiles/</code> directory. If I ever make changes to iTerm2, they get
propagated as changes that Git picks up on and which I subsequently check into
Git history.</p>

<h2>Vim</h2>

<p>I&rsquo;m in love with my Vim setup. If you&rsquo;re looking for help getting started
configuring Vim, you should checkout the <a href="https://github.com/jez/vim-as-an-ide">Vim plugins workshop I put
together</a>, which gets you started with a &ldquo;fully-configured&rdquo; Vim
setup. Once you think you&rsquo;ve &ldquo;mastered&rdquo; that and you&rsquo;re ready for more, here are
a list of things I&rsquo;m proud of in my <code>.vimrc</code>:</p>

<ul>
<li><a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/vimrc#L65-L67"><code>set breakindent</code></a> A feature new in Vim 7.4, this allows you to
align wrapped text at the same indentation level as the preceding text.</li>
<li><a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/vimrc#L100-L106">these mappings</a>, which let me move around (move up and down in
particular) in long lines just as if they were short.</li>
<li><a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/vimrc#L90-L91">this mapping</a>, which lets me open Vim help pages in new tabs</li>
</ul>


<h2>Other</h2>

<p>I&rsquo;ve only highlighted a fraction of my configuration files, but I think I&rsquo;ve
managed to capture a good portion of them. If you thought that one of these
snippets was useful, are having trouble getting something to work, or have
something interesting to share, leave a comment below!</p>

<p>- - - - -
<br>
### Jake on the Web
<a class="image-link" href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on
[GitHub][g] or paying a visit to [my homepage][h]. If this post was about one of
my open source projects, make sure to star it on GitHub! I love hearing what
people think, so feel free to comment, open an issue, or send me an email.
 [g]: https://www.github.com/jez/
 [h]: https://jez.io/
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim as an IDE]]></title>
    <link href="https://blog.jez.io/2015/03/03/vim-as-an-ide/"/>
    <updated>2015-03-03T00:01:19-05:00</updated>
    <id>https://blog.jez.io/2015/03/03/vim-as-an-ide</id>
    <content type="html"><![CDATA[<p>I took some screenshots to accompany my <a href="https://github.com/jez/vim-as-an-ide">Vim as an IDE</a> repo on GitHub.
This is by no means a complete walkthrough! It&rsquo;s just a reference for those who
are curious if they installed everything correctly. This is what my system looks
like for me after each step.</p>

<!-- more -->


<h2>1. <a href="https://github.com/jez/vim-as-an-ide/commit/0673f0c">Create vimrc file</a></h2>

<p>This is what Vim should look like immediately after opening it:</p>

<p><a href="/images/vim-as-an-ide/shot-01.png"><img src="/images/vim-as-an-ide/shot-01.png" alt="Vim as an IDE" /></a></p>

<p>And right after adding the two lines:</p>

<p><a href="/images/vim-as-an-ide/shot-02.png"><img src="/images/vim-as-an-ide/shot-02.png" alt="Vim as an IDE" /></a></p>

<h2>2. <a href="https://github.com/jez/vim-as-an-ide/commit/dff7da3">Add some general settings</a></h2>

<p>After you add these settings, your <code>~/.vimrc</code> should look like this when opened
in Vim:</p>

<p><a href="/images/vim-as-an-ide/shot-03_1.png"><img src="/images/vim-as-an-ide/shot-03_1.png" alt="Vim as an IDE" /></a></p>

<h2>3. <a href="https://github.com/jez/vim-as-an-ide/commit/fc77b04">Enable the mouse</a></h2>

<p>To enable the mouse, you&rsquo;ll have to figure out where the appropriate setting is
in your terminal emulator. Here&rsquo;s a screenshot of where it is in iTerm2 on OS X.</p>

<p><a href="/images/vim-as-an-ide/shot-03.png"><img src="/images/vim-as-an-ide/shot-03.png" alt="Vim as an IDE" /></a></p>

<h2>4. <a href="https://github.com/jez/vim-as-an-ide/commit/1186be2">Set up Vundle boilerplate</a></h2>

<p>If you add the changes introduced at this step before installing Vundle, you&rsquo;ll
get an error that looks like this:</p>

<p><a href="/images/vim-as-an-ide/shot-04.png"><img src="/images/vim-as-an-ide/shot-04.png" alt="Vim as an IDE" /></a></p>

<p>Otherwise, this should be the result of running <code>vim +PluginInstall</code> to install
Vundle for the first time:</p>

<p><a href="/images/vim-as-an-ide/shot-05.png"><img src="/images/vim-as-an-ide/shot-05.png" alt="Vim as an IDE" /></a></p>

<p>Remember, you can use <code>:qall</code> to quit Vim after installing plugins.</p>

<h2>5. <a href="https://github.com/jez/vim-as-an-ide/commit/457f2e2">Make Vim look good</a></h2>

<p>Your experience might diverge a little bit from these screenshots if you choose
a different colorscheme because I&rsquo;ll assume you&rsquo;re setting everything up using
Solarized Dark. If you&rsquo;re on a Mac and you&rsquo;ve imported the iTerm2 colorschemes,
you should be able to find the Solarized Dark theme here:</p>

<p><a href="/images/vim-as-an-ide/shot-06.png"><img src="/images/vim-as-an-ide/shot-06.png" alt="Vim as an IDE" /></a></p>

<p>Making that change should make Vim turn these colors:</p>

<p><a href="/images/vim-as-an-ide/shot-07.png"><img src="/images/vim-as-an-ide/shot-07.png" alt="Vim as an IDE" /></a></p>

<p>Next up is changing your font to a Powerline patched font. If you downloaded and
installed Menlo for Powerline correctly, you should be able to set it using this
panel in the preferences:</p>

<p><a href="/images/vim-as-an-ide/shot-08.png"><img src="/images/vim-as-an-ide/shot-08.png" alt="Vim as an IDE" /></a></p>

<p>Finally, running <code>vim +PluginInstall</code> to install the Solarized Vim colorscheme
and vim-airline:</p>

<p><a href="/images/vim-as-an-ide/shot-09.png"><img src="/images/vim-as-an-ide/shot-09.png" alt="Vim as an IDE" /></a></p>

<p>Here&rsquo;s what the Vim solarized plugind does to our <code>~/.vimrc</code>:</p>

<p><a href="/images/vim-as-an-ide/shot-10.png"><img src="/images/vim-as-an-ide/shot-10.png" alt="Vim as an IDE" /></a></p>

<p>If you chose to install a Powerline patched font, you can let vim-airline use
cooler arrows by uncommenting the line highlighted in this screenshot above, to
make Vim look like this:</p>

<p><a href="/images/vim-as-an-ide/shot-11.png"><img src="/images/vim-as-an-ide/shot-11.png" alt="Vim as an IDE" /></a></p>

<h2>6. <a href="https://github.com/jez/vim-as-an-ide/commit/b7ff90c">Plugins NERDTree and NERDTree Tabs</a></h2>

<p>This will be the last time that I demonstrate running <code>vim +PluginInstall</code>,
because they&rsquo;ll all basically look the same from here on out:</p>

<p><a href="/images/vim-as-an-ide/shot-12.png"><img src="/images/vim-as-an-ide/shot-12.png" alt="Vim as an IDE" /></a></p>

<p>Once you&rsquo;ve installed NERDTree and NERDTree Tabs (and added the settings I
listed for them), you should be able to type <code>\t</code> to bring up something that
looks like this:</p>

<p><a href="/images/vim-as-an-ide/shot-13.png"><img src="/images/vim-as-an-ide/shot-13.png" alt="Vim as an IDE" /></a></p>

<h2>7. <a href="https://github.com/jez/vim-as-an-ide/commit/144f979">Plugin Syntastic</a></h2>

<p>Once you&rsquo;ve installed Syntastic, it should syntax highlight your errors by
displaying little marks next to the offending lines:</p>

<p><a href="/images/vim-as-an-ide/shot-14.png"><img src="/images/vim-as-an-ide/shot-14.png" alt="Vim as an IDE" /></a></p>

<p>You can see that we&rsquo;ve forgotten a semi-colon, and Syntastic is pointing that
out for us.</p>

<p>As I was making these screenshots, I realized that I forgot to include a setting
in the right place. It&rsquo;s fine if you work through the whole workshop, but if you
pick and choose things, namely if you don&rsquo;t follow the steps for <code>vim-gitgutter</code>
eventually, you&rsquo;ll end up with this weird highlighting in the sign column. To
disable this highlighting, you can either wait until the <code>vim-gitgutter</code> step
(coming right up in 4 steps), or you can run this command (the one at the bottom
of the screenshot):</p>

<p><a href="/images/vim-as-an-ide/shot-15.png"><img src="/images/vim-as-an-ide/shot-15.png" alt="Vim as an IDE" /></a></p>

<p>To make the change permanent, you&rsquo;ll have to add that line (<code>:hi clear
SignColumn</code>) to your <code>~/.vimrc</code>.</p>

<h2>8. <a href="https://github.com/jez/vim-as-an-ide/commit/fd2c49c">Plugins vim-easytags and tagbar</a></h2>

<p>After this step, you should be able to bring up a split pane view that shows
your functions, variables, and other identifiers by pressing <code>\b</code>:</p>

<p><a href="/images/vim-as-an-ide/shot-16.png"><img src="/images/vim-as-an-ide/shot-16.png" alt="Vim as an IDE" /></a></p>

<p>If you enabled mouse reporting, you should be able to click on the things in the
pane and jump to the appropriate place in the file. I&rsquo;d strongly recommend that
you read the help for all the keybindings and actions you can use with it.</p>

<h2>9. <a href="https://github.com/jez/vim-as-an-ide/commit/80db74f">Plugin ctrlp</a></h2>

<p>When <code>CtrlP</code> is installed, you can press <code>Ctrl + P</code> to bring up a list of files.
As you type, the list will be filtered to only those that &ldquo;fuzzy match&rdquo; what
you&rsquo;ve typed in. As you can see, I typed in <code>mc</code>, which matched <code>vimrc.vim</code> and
<code>main.c</code>:</p>

<p><a href="/images/vim-as-an-ide/shot-17.png"><img src="/images/vim-as-an-ide/shot-17.png" alt="Vim as an IDE" /></a></p>

<h2>10. <a href="https://github.com/jez/vim-as-an-ide/commit/8d4223f">Plugin A.vim</a></h2>

<p>This plugin introduces a number of commands that you can read in the
documentation that enable opening &ldquo;alternate&rdquo; files, like C/C++ header files,
really quickly. I&rsquo;ve run <code>:AV</code> here as an example of one of the commands it
installs, which opens the alternate file in a vertical split pane.</p>

<p><a href="/images/vim-as-an-ide/shot-18.png"><img src="/images/vim-as-an-ide/shot-18.png" alt="Vim as an IDE" /></a></p>

<h2>11. <a href="https://github.com/jez/vim-as-an-ide/commit/1e5757e">Plugins vim-gitgutter and vim-fugitive</a></h2>

<p><code>vim-gitgutter</code> is really handy: it shows you a <code>+</code>, <code>-</code>, or <code>~</code> next to lines
that have been added, removed, or modified. This is good for both identifying
the pieces of code that have changed while you&rsquo;re working on a file as well as
reminding yourself that you have changes that need to be commited.</p>

<p><a href="/images/vim-as-an-ide/shot-19.png"><img src="/images/vim-as-an-ide/shot-19.png" alt="Vim as an IDE" /></a></p>

<p>Speaking of committing files, <code>vim-fugitive</code> lets you make Git commits from
right within Vim. Simply run <code>:Gcommit</code> to bring up a split pane where you can
craft your commit message:</p>

<p><a href="/images/vim-as-an-ide/shot-20.png"><img src="/images/vim-as-an-ide/shot-20.png" alt="Vim as an IDE" /></a></p>

<p><code>vim-fugitive</code> can do much more than just make commits. Be sure to read the
appropriate documentation to figure out what sorts of cool things you can do!</p>

<h2>12. <a href="https://github.com/jez/vim-as-an-ide/commit/2fe0507">Plugin delimitMate</a></h2>

<p>Finally, using <code>delimitMate</code> you should be able to type an opening delimiter and
have the closing one be inserted automatically. Here&rsquo;s an example on
parentheses:</p>

<p><a href="/images/vim-as-an-ide/shot-21.png"><img src="/images/vim-as-an-ide/shot-21.png" alt="Vim as an IDE" /></a></p>

<h2>13. <a href="https://github.com/jez/vim-as-an-ide/commit/b185e9f">Plugin vim-superman</a></h2>

<p>Once you&rsquo;ve added the appropriate function to your shell initialization file
(<code>~/.bashrc</code>, etc.), you should be able to run <code>vman &lt;command&gt;</code> to open man
pages. Here&rsquo;s an example on <code>vman 3 printf</code>:</p>

<p><a href="/images/printf.3.png"><img src="/images/printf.3.png" alt="Vim as an IDE" /></a></p>

<h2>14. <a href="https://github.com/jez/vim-as-an-ide/commit/44f5225">Plugin vim-tmux-navigator</a></h2>

<p>There&rsquo;s not much to show here, as this step is mostly just introducing
keybindings. If you use <code>tmux</code>, make sure to copy the appropriate snippet into
your <code>~/.tmux.conf</code> to be able to jump between tmux and Vim splits with no added
effort.</p>

<h2>15. <a href="https://github.com/jez/vim-as-an-ide/commit/5ba534e">Syntax plugins</a></h2>

<p>No screenshots again. What syntax highlighting plugins you end up installing is
largely up to you.</p>

<h2>16. <a href="https://github.com/jez/vim-as-an-ide/commit/9089a95">Add all the extra plugins that I use</a></h2>

<p>For these plugins, be sure to check the documentation. Most of them have
screenshots that show what they look like when installed and configured
correctly.</p>

<h2>Wrap Up</h2>

<p>That&rsquo;s it! I can only take you so far in making your Vim awesome. You have to
take yourself the rest of the way by investing a little bit of effort into
reading the documentation for the plugins you think could be useful to you so
that you can fully utilize them. Be sure to comment on the commits with
questions if you&rsquo;re stuck or are wondering why your setup doesn&rsquo;t look similar
to one of the above!</p>

<p>- - - - -
<br>
### Jake on the Web
<a class="image-link" href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on
[GitHub][g] or paying a visit to [my homepage][h]. If this post was about one of
my open source projects, make sure to star it on GitHub! I love hearing what
people think, so feel free to comment, open an issue, or send me an email.
 [g]: https://www.github.com/jez/
 [h]: https://jez.io/
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Offline LaTeX Development - Part 2]]></title>
    <link href="https://blog.jez.io/2015/01/10/offline-latex-development-part-2/"/>
    <updated>2015-01-10T17:00:00-05:00</updated>
    <id>https://blog.jez.io/2015/01/10/offline-latex-development-part-2</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve already written about how I develop LaTeX offline in Vim using GNU Make.
Recently, though, I found a tool that implements another feature that GUI
editors had to themselves: splitting panes.</p>

<!-- more -->


<h2><a href="/2014/10/06/offline-latex-development/">Offline LaTeX Development</a></h2>

<p>If you missed it, check out my previous post here before reading on. There&rsquo;s a
lot of handy stuff there!</p>

<h2>Split Panes</h2>

<p>Out of the box, tools like ShareLaTeX and TeXShop feature split pane editing:
you can have your LaTeX on one half of the screen and the PDF on the other.
Previously, I justified not having this feature with the reasoning that the
<code>:WV</code> binding (something I explained <a href="/2014/10/06/offline-latex-development/">here</a>) immediately opened up the
PDF and the windows switched.</p>

<p>However, I read about a tool called <a href="http://ianyh.com/amethyst/">Amethyst</a> on Hacker News the
other day and immediately realized it&rsquo;s potential for improving my LaTeX setup.
Amethyst is a tool that strives to be a tiling window manager like xmonad for OS
X. At times it falls short of this goal, but for the most part it works really
well. Just open up two apps, like MacVim and Preview, and it&rsquo;ll show them
side-by-side with no added effort. There are also plenty of keybindings to
manipulate the window arrangements.</p>

<p>Here&rsquo;s a screenshot of what the new setup looks like:</p>

<p><a class="image-link" href="/images/latex-amethyst.png"><img src="/images/latex-amethyst.png"></a></p>

<p>After looking into it a little more, it looks like there are other OS X tools
for spitting the screen into two panes, like <a href="http://www.bettertouchtool.net/">BetterTouchTool</a>, though I
haven&rsquo;t actually tried any of them out.</p>

<p>- - - - -
<br>
### Jake on the Web
<a class="image-link" href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on
[GitHub][g] or paying a visit to [my homepage][h]. If this post was about one of
my open source projects, make sure to star it on GitHub! I love hearing what
people think, so feel free to comment, open an issue, or send me an email.
 [g]: https://www.github.com/jez/
 [h]: https://jez.io/
</p>
]]></content>
  </entry>
  
</feed>
