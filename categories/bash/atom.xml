<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: bash | Bits, Bytes, and Words]]></title>
  <link href="https://blog.jez.io/categories/bash/atom.xml" rel="self"/>
  <link href="https://blog.jez.io/"/>
  <updated>2017-07-18T18:49:19-04:00</updated>
  <id>https://blog.jez.io/</id>
  <author>
    <name><![CDATA[Jake Zimmerman]]></name>
    <email><![CDATA[jake@zimmerman.io]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Show where a Python package is used]]></title>
    <link href="https://blog.jez.io/2015/06/12/show-where-a-python-package-is-used/"/>
    <updated>2015-06-12T02:36:05-04:00</updated>
    <id>https://blog.jez.io/2015/06/12/show-where-a-python-package-is-used</id>
    <content type="html"><![CDATA[<p>A while back I was doing some spring cleaning of my Python packages. I noticed
that there were a bunch of packages that I couldn&rsquo;t recall installing. I wanted
to know if I could safely remove them, so I wrote a simple bash script to tell
me called <code>pip-uses</code>.</p>

<!-- more -->


<h2>Source</h2>

<p>Rather than post the source here and let it get more out of date every time I
change it, you can find the source <a href="https://github.com/jez/bin/blob/master/pip-uses">on GitHub</a>. It&rsquo;s in my <a href="https://github.com/jez/bin">bin
repository</a>, where I keep my notable helper scripts; feel free to
poke around.</p>

<h2>Motivations</h2>

<p>I was primarily influenced by Homebrew&rsquo;s <code>brew uses</code> command. It does a nice job
of giving you exactly the information you want, and I think the way the command
is named makes sense.</p>

<pre><code class="plain Homebrew: brew uses">$ brew uses --installed pango
imagemagick
</code></pre>

<p><code>pip-uses</code> gives you basically the experience:</p>

<pre><code class="plain Pip: pip-uses">$ pip-uses stevedore
virtualenvwrapper
</code></pre>

<p>In this example, the Python package <code>virtualenvwrapper</code> uses <code>stevedore</code>, just
as <code>imagemagick</code> uses <code>pango</code>. Both commands can save you from accidentally
removing a crucial dependency and answer the burning question, &ldquo;How in the world
did this thing get installed?&rdquo;</p>

<h2>Wish List</h2>

<p>I&rsquo;m not doing much Python development these days, but if I had some spare time
I&rsquo;d love for the script to also have these features:</p>

<ul>
<li>Recursive enumeration of dependencies

<ul>
<li>It&rsquo;d be nice if <code>pip-uses</code> kept recursively searching until it found no more
dependencies. This way, it&rsquo;d be easy to see if you could safely uninstall a
whole slew of packages that you&rsquo;re no longer using.</li>
</ul>
</li>
<li>Operate on more than one package

<ul>
<li>I didn&rsquo;t need it at the time, so I didn&rsquo;t implement it, but it&rsquo;d be nice if
the command took a variable amount of arguments and ran the same logic on
all supplied packages.</li>
</ul>
</li>
<li>Integrate with <code>pip</code>

<ul>
<li>Programs like <code>brew</code> and <code>pip</code> allow developers to add &ldquo;external commands&rdquo;
by adding commands to the <code>PATH</code> that look like <code>brew-xyz</code> or <code>git-xyz</code>. I
couldn&rsquo;t find if there was a special way to add external commands to <code>pip</code>.</li>
</ul>
</li>
</ul>


<p>If you find this script useful and end up implementing one of these feature or
more on top of <code>pip-uses</code>, be sure to send me a Pull Request!</p>

<p>- - -

### Jake on the Web
<a class="image-link" href="https://avatars5.githubusercontent.com/u/5544532?v=4&u=4640ad0fd7da51dc2a84c5ae9d11a96677b4d185&s=400"><img class="left" src="https://avatars5.githubusercontent.com/u/5544532?v=4&u=4640ad0fd7da51dc2a84c5ae9d11a96677b4d185&s=400" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on
[GitHub][g] or paying a visit to [my homepage][h]. If this post was about one of
my open source projects, make sure to star it on GitHub! I love hearing what
people think, so feel free to open an issue or send me an email.
 [g]: https://www.github.com/jez/
 [h]: https://jez.io/
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Chrome: A Memory Hog]]></title>
    <link href="https://blog.jez.io/2014/12/29/google-chrome-a-memory-hog/"/>
    <updated>2014-12-29T18:00:00-05:00</updated>
    <id>https://blog.jez.io/2014/12/29/google-chrome-a-memory-hog</id>
    <content type="html"><![CDATA[<p>Whenever someone complains about a slow computer, the first thing I check is
how many Chrome tabs they have open. Chrome hogs memory like no other. For
users, this means Chrome is snappy and responsive, but oftentimes it comes at
the expense of crowding out other programs. To get an idea of how much memory
Chrome is really using, I wrote a quick bash oneliner.</p>

<!-- more -->


<h2>Why does Chrome Hog Memory?</h2>

<p><a href="http://mobile.extremetech.com/latest/221392-iframe-irony-adblock-plus-is-probably-the-reason-firefox-and-chrome-are-such-memory-hogs">An article posted to Hacker News</a> recently brought some light to
the question of why Chrome and Firefox suck up so much memory: Adblock Plus. The
general idea is that the excessive use of iframes in most websites today ramps
up the amount of processing that Adblock Plus has to do, driving memory usage
through the roof. For more specifics, check out the rest of of the article.</p>

<h2>The Oneliner</h2>

<p>For the impatient, here&rsquo;s the code. It uses standard Unix tools:</p>

<pre><code class="bash Chrome Memory Usage">$ ps -ev | grep -i chrome | awk '{print $12}' | awk '{for(i=1;i&lt;=NF;i++)s+=$i}END{print s}'
</code></pre>

<p>Pretty isn&rsquo;t it? If you want to save this as an alias for handy use, add this
line to your ~/.bashrc (or appropriate configuration file):</p>

<pre><code class="bash Add as an alias">alias chromemem="ps -ev | grep -i chrome | awk '{print \$12}' | awk '{for(i=1;i&lt;=NF;i++)s+=\$i}END{print s}'"
</code></pre>

<p>It outputs a percentage. Here&rsquo;s the alias in action:</p>

<pre><code class="bash Usage">$ chromemem
60
</code></pre>

<h2>Explanation</h2>

<p>There&rsquo;s a lot of good stuff going on here, so let&rsquo;s take it step-by-step.</p>

<p>First, we&rsquo;ll need a program that tells us memory usage. I&rsquo;m sure there are many,
but I&rsquo;m familiar with <code>ps</code>. After checking out the man page for a few options, I
came up with <code>ps -ev</code>, to show all information about all processes. Maybe
wasteful, but it works.</p>

<pre><code class="bash ps -ev">$ ps -ev
  PID STAT      TIME  SL  RE PAGEIN      VSZ    RSS   LIM     TSIZ  %CPU %MEM COMMAND
 3473 S      0:54.92   0   0      0  3579092 301244     -        0   6.7  7.2 /Applications/Google C
  365 S      3:03.17   0   0      0  3920732 206808     -        0   0.3  4.9 /Applications/Google C
  983 S      1:29.23   0   0      0  3560272 193860     -        0   0.1  4.6 /Applications/Google C
  395 S      0:13.11   0   0      0  2824936 141644     -        0   0.0  3.4 /Applications/Google C
  422 S      0:27.22   0   0      0  3345796 130796     -        0   0.0  3.1 /Applications/Google C
  ...
</code></pre>

<p>Notice that there&rsquo;s a convenient column describing memory usage as a percentage
of total available memory, as well as what command is being run in that
process. Let&rsquo;s make sure that we&rsquo;re looking at only the processes running
some sort of Chrome service before totaling up the memory. We can find these
lines with <code>ps -ev | grep -i chrome</code> (the -i means case-insensitive). Due to the
way I clipped the previous sample output, nothing changes in the first five
lines, but rest assured: we&rsquo;re only looking at Chrome processes now.</p>

<p>Now it&rsquo;s time to get rid of all the other nonsense that we included with <code>ps
-ev</code>. Luckily, there&rsquo;s a handy tool called <code>awk</code> that makes parsing text by
column easy. If we want to print the 12th column (which just so happens to
contain the memory consumption!) we can do <code>awk '{print $12}'</code>:</p>

<pre><code class="bash ps -ev | grep -i chrome | awk '{print $12}'">$ ps -ev | grep -i chrome | awk '{print $12}'
7.2
5.1
4.6
3.4
3.2
...
</code></pre>

<p>Finally, I found myself needing a way to add up a column of numbers. A quick
Google search led me to <a href="http://stackoverflow.com/questions/2572495/read-from-file-and-add-numbers">this StackOverflow question</a>, and I picked the
<code>awk</code> solution because I knew I could just pipe the input to awk (as opposed to
having to do weird hacks to get it to work with a bash for loop):</p>

<pre><code class="bash Final Solution">$ ps -emv | grep -i chrome | awk '{print $12}' | awk '{for(i=1;i&lt;=NF;i++)s+=$i}END{print s}'
60.4
</code></pre>

<p>Of course, you could change the last <code>awk</code> command to print out something
fancier like</p>

<pre><code class="bash Final Solution">$ ps -emv | grep -i chrome | awk '{print $12}' | awk '{for(i=1;i&lt;=NF;i++)s+=$i}END{print "Chrome is using "s"% of total memory."}'
Chrome is using 60.4% of total memory.
</code></pre>

<p>There you have it! Bash oneliners save the day yet again.</p>

<h2>Update</h2>

<p>After writing this article, I stopped using Ad Block Plus, and I noticed a
significant drop in Chrome&rsquo;s memory usage. Obviously, though, that came at the
cost of not blocking ads! Also, from time to time I would encounter a site that
seemed sluggish, presumably because of all the ads attempting to be loaded. My
simple solution to this was just to disable JavaScript on that page (I use an
extension called Quick JavaScript Switcher), but this wasn&rsquo;t an automated
solution.</p>

<p>Then I discovered <a href="https://github.com/gorhill/uBlock">Î¼Block</a>, an &ldquo;efficient blocker for Chromium and
Firefox.&rdquo; The fancy graphs on it&rsquo;s homepage convinced me to give it a shot, and
from what I can tell so far it&rsquo;s responsive and effective.</p>

<p>- - -

### Jake on the Web
<a class="image-link" href="https://avatars5.githubusercontent.com/u/5544532?v=4&u=4640ad0fd7da51dc2a84c5ae9d11a96677b4d185&s=400"><img class="left" src="https://avatars5.githubusercontent.com/u/5544532?v=4&u=4640ad0fd7da51dc2a84c5ae9d11a96677b4d185&s=400" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on
[GitHub][g] or paying a visit to [my homepage][h]. If this post was about one of
my open source projects, make sure to star it on GitHub! I love hearing what
people think, so feel free to open an issue or send me an email.
 [g]: https://www.github.com/jez/
 [h]: https://jez.io/
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim as a Man Page Viewer]]></title>
    <link href="https://blog.jez.io/2014/12/20/vim-as-a-man-page-viewer/"/>
    <updated>2014-12-20T21:17:46-05:00</updated>
    <id>https://blog.jez.io/2014/12/20/vim-as-a-man-page-viewer</id>
    <content type="html"><![CDATA[<p>Man pages are an essential part of every developer&rsquo;s workflow. Unfortunately,
the default system pager <code>less</code> isn&rsquo;t the best interface. That&rsquo;s why I wrote a
Vim plugin and a short shell function to take care of opening man pages in Vim.</p>

<!-- more -->


<h2>The Plugin</h2>

<p>If you&rsquo;re eager to dive right into the source or to install the plugin, head on
over to the <a href="https://github.com/jez/vim-superman">GitHub repository</a>. It&rsquo;s a whopping 32 SLOC, so feel
free to peek under the hood.</p>

<h2>Why?</h2>

<p>You might be thinking, &ldquo;But Jake, <code>man</code> works just fine for me, why would I
switch?&rdquo; I&rsquo;m glad you asked!</p>

<h3>Mouse Support</h3>

<p>The first reason why I was interested in getting man pages to open in Vim was
because I wanted to be able to scroll with the mouse. When I have to read man
pages for a long time, usually as a part of some more all-encompasing bit of
research, I find scrolling to be a much better interface for quickly perusing
the content of a man page.</p>

<h3>Syntax Highlighting</h3>

<p>As it turns out, man pages have a syntax to them, and Vim does a pretty
excellent job at highlighting them. Rather than talk about it, here are some
screenshots. Note how code samples (C system calls and library functions) are
also syntax highlighted appropriately.</p>

<pre><code class="bash Example 1">vman vim
</code></pre>

<p><a class="image-link" href="/images/vim.1.png"><img src="/images/vim.1.png"></a></p>

<pre><code class="bash Example 2">vman 3 printf
</code></pre>

<p><a class="image-link" href="/images/printf.3.png"><img src="/images/printf.3.png"></a></p>

<h3>All the benefits of Vim</h3>

<p>While <code>less</code> makes a good effort to emulate certain Vim keybindings (or maybe
it&rsquo;s the other way around, I don&rsquo;t know which came first), <code>less</code> certainly
falls short of the full power of Vim.</p>

<p>For example, once you&rsquo;ve opened a man page in Vim, you can open a new tab or
split side-by-side with the man page. Especially if you&rsquo;re switching between Vim
and the man page often, being able to open man pages in tabs or splits is
invaluable.</p>

<h2>Mine doesn&rsquo;t look like yours!</h2>

<p>A couple of my other plugins are showing in the screenshots above. I&rsquo;m using the
<a href="https://github.com/altercation/vim-colors-solarized">Solarized Dark color scheme</a>, the plugin
<a href="https://github.com/bling/vim-airline">vim-airline</a> to take over the statuslines at the very top and
bottom, and iTerm2 on Mac OS X 10.10.</p>

<p>You can see my complete configuration <a href="https://github.com/jez/dotfiles">on GitHub</a>.</p>

<h2>Feedback</h2>

<p>As a matter of fact, this was my first Vim plugin! If you notice anything out of
place, even if it&rsquo;s a small detail, I&rsquo;d love to hear it. Make no assumptions
about the reasoning behind why certain decisions were made, because I have none
XD</p>

<p>- - -

### Jake on the Web
<a class="image-link" href="https://avatars5.githubusercontent.com/u/5544532?v=4&u=4640ad0fd7da51dc2a84c5ae9d11a96677b4d185&s=400"><img class="left" src="https://avatars5.githubusercontent.com/u/5544532?v=4&u=4640ad0fd7da51dc2a84c5ae9d11a96677b4d185&s=400" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on
[GitHub][g] or paying a visit to [my homepage][h]. If this post was about one of
my open source projects, make sure to star it on GitHub! I love hearing what
people think, so feel free to open an issue or send me an email.
 [g]: https://www.github.com/jez/
 [h]: https://jez.io/
</p>
]]></content>
  </entry>
  
</feed>
