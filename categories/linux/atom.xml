<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | Bits, Bytes, and Words]]></title>
  <link href="https://blog.jez.io/categories/linux/atom.xml" rel="self"/>
  <link href="https://blog.jez.io/"/>
  <updated>2017-03-21T23:08:10-04:00</updated>
  <id>https://blog.jez.io/</id>
  <author>
    <name><![CDATA[Jake Zimmerman]]></name>
    <email><![CDATA[jake@zimmerman.io]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Leaking Free Disk Space]]></title>
    <link href="https://blog.jez.io/2015/08/03/leaking-free-disk-space/"/>
    <updated>2015-08-03T03:05:31-04:00</updated>
    <id>https://blog.jez.io/2015/08/03/leaking-free-disk-space</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been watching a disk space leakage creep slowly upwards for months now;
finally, I figured out where it was going!</p>

<!-- more -->


<p>Whenever I set up a VPS, I follow Brian Kennedy&rsquo;s excellent <a href="http://plusbryan.com/my-first-5-minutes-on-a-server-or-essential-security-for-linux-servers">My First 5 Minutes
On A Server; Or, Essential Security for Linux Servers</a>. It covers
setting up a number of initial tools that make server administration much
easier:</p>

<ul>
<li>fail2ban, for blocking suspicious log in activity</li>
<li>setting up a non-root user</li>
<li>ufw, a simple firewall program</li>
<li>unattended-upgrades, which installs security upgrades periodically</li>
<li>logwatch, so you can read a digest of what&rsquo;s happened in your logs</li>
</ul>


<p>Ever since I set up my VPS, I&rsquo;d seen the disk space creep up in the daily
logwatch digest. I had looked a few times and figured it must be related to some
sort of misconfiguration of the Ruby app server I have running on it right now.</p>

<p>Recently, it got up to more than half of my disk space gone. For a VPS that I
used maybe twice a month, this was ridiculous. I investigated once more and
finally came up with the culprit: <code>unattended-upgrades</code> wasn&rsquo;t autoremoving
packages. I had gigabytes worth of packages that could be autoremoved.</p>

<h2>Solution</h2>

<p>There&rsquo;s a one-line config file fix. Add this to
/etc/apt/apt.conf.d/50unattended-upgrades:</p>

<pre><code class="plain /etc/apt/apt.conf.d/50unattended-upgrades">...
// Do automatic removal of new unused dependencies after the upgrade
// (equivalent to apt-get autoremove)
Unattended-Upgrade::Remove-Unused-Dependencies "true";
...
</code></pre>

<p>Update: It looks like a bug in unattented-upgrades is <a href="https://bugs.launchpad.net/ubuntu/+source/unattended-upgrades/+bug/1267059">preventing it from
automatically removing header packages</a>. For the time being you will have
to either manually auto-remove these packages, or add <code>sudo apt-get autoremove
-y</code> to your crontab.</p>

<p>Update: The bug has been addressed and closed. It now correctly removes header
packages!</p>

<p>- - - - -
<br>
### Jake on the Web
<a class="image-link" href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on
[GitHub][g] or paying a visit to [my homepage][h]. If this post was about one of
my open source projects, make sure to star it on GitHub! I love hearing what
people think, so feel free to comment, open an issue, or send me an email.
 [g]: https://www.github.com/jez/
 [h]: https://jez.io/
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running a VPS, Log 0: Getting Set Up]]></title>
    <link href="https://blog.jez.io/2014/06/19/running-a-vps-log-0/"/>
    <updated>2014-06-19T21:45:29-04:00</updated>
    <id>https://blog.jez.io/2014/06/19/running-a-vps-log-0</id>
    <content type="html"><![CDATA[<p>Since last Christmas, I&rsquo;ve had a raspberry pi running as a server at my home back in Wisconsin. I had tons of plans for this little guy, but I quickly discovered that he was going to be a bit <em>too</em> little for most of them. Thus, I am now the proud sysadmin of my own virtual private server.</p>

<!-- more -->


<h2>Hosting</h2>

<p>Because at this point in my life I&rsquo;m moving around too much to host my own server somewhere, I decided to contract this part out. I didn&rsquo;t look around too much at VPS providers, but I eventually settled in on DigitalOcean, because it was both recommended at the CClub talk and the most cost-effective of the all the providers I checked. For $10 per month I get a 1-core processor, 1GB of RAM, 30GB of SSD storage, and 2TB of network data transfer. More than enough for a casual VPS.</p>

<h2><a href="http://plusbryan.com/my-first-5-minutes-on-a-server-or-essential-security-for-linux-servers">Safety First</a></h2>

<p>Especially in light of recent security and privacy breeches, the first thing to do on any server is to lock it down. For that, I followed <a href="http://plusbryan.com/my-first-5-minutes-on-a-server-or-essential-security-for-linux-servers">these instructions</a>, with a few modifications.</p>

<p>The post goes over setting up a few simple daemons and setup commands that can be completed in 5 minutes if you&rsquo;ve done this before or half an hour if you want to stop and read up on all the protocols as you go. While I won&rsquo;t reiterate the steps, the list includes setting up the root and an additional sudo user, installing <a href="http://www.fail2ban.org/wiki/index.php/Main_Page">fail2ban</a> for combating brute-force login attempts, setting up ssh logins, setting up a firewall with <a href="https://wiki.ubuntu.com/UncomplicatedFirewall">Uncomplicated Firewall</a>, and a few other sanity checks.</p>

<h2>Personalization</h2>

<p>At this point, the server was safe, but I still couldn&rsquo;t call it &ldquo;mine.&rdquo; My .bash_profile, .vimrc, and all my other configuration scripts were missing. Fortunately, I had prepared for this moment, and getting everything in working order was incredibly easy. Because there&rsquo;s so much to talk about, I&rsquo;ll be [writing about it] in another post, but in the meantime, I&rsquo;m using a program called <a href="https://github.com/thoughtbot/rcm">rcm</a> that turns <a href="https://github.com/jez/dotfiles">GitHub</a> into the perfect place to store configuration scripts.</p>

<p>I also spent a long time pondering the consequences of <a href="http://xkcd.com/910/">this comic</a>. Eventually I settled on the name of my favorite Pokemon: Metagross. So without further ado, I&rsquo;d like to introduce my shiny new login message:</p>

<center>
<a class="image-link" href="/images/metagross-motd.png"><img src="/images/metagross-motd.png"></a>
</center>


<h2>Onwards</h2>

<p>So there we are! I&rsquo;ve got a bunch of things in the works and even more things planned, so it should be a nice, long-running summer project.</p>

<hr />

<h3>For the Curious</h3>

<p>While I didn&rsquo;t end up using my raspberry pi very extensively, I did manage to get a few things out of it. For one, it gave me my first experiences using Arch Linux. Admittedly, I didn&rsquo;t get the full experience as it came essentially pre-loaded with it, but it was an experience nonetheless. At some point, once I&rsquo;ve settled into living in one place for more than a few months, I plan on building a desktop and running Arch for the lulz.</p>

<p>Also, and this part is still the biggest reason why I keep it up, is that I can run the No-IP Dynamic Update Client as a daemon to keep tabs on the public IP address for my house back in Wisconsin. This lets me do cool things, like ssh into my raspi from anywhere, administer my family&rsquo;s wireless router when it breaks, and potentially log into one of their computers if I needed to (although whenever I do remote into their computer&rsquo;s, I almost always use the Chrome Remote Desktop Client because it&rsquo;s incredibly easy to use but still entirely full-featured).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding a Network Printer to a Linux Server]]></title>
    <link href="https://blog.jez.io/2014/05/06/adding-a-network-printer-to-a-linux-server/"/>
    <updated>2014-05-06T02:09:29-04:00</updated>
    <id>https://blog.jez.io/2014/05/06/adding-a-network-printer-to-a-linux-server</id>
    <content type="html"><![CDATA[<p>It&rsquo;s one thing to plug in a CD, click through a few dialogs, and wait for the computer to chime at you saying that your printer has been installed. Unfortunately, this is not how server administration works. Here&rsquo;s my account of installing multiple network-attached printers on a Debian server.</p>

<!-- more -->


<h2>TL;DR</h2>

<p>For those who only care about the solution: <a href="#tldr">TL;DR</a>.</p>

<h2>The Hard Way</h2>

<p>As I mentioned in my last post, I&rsquo;m a part of a student organization called <a href="//www.scottylabs.org">ScottyLabs</a>. We do tons of cool things, but the project which I&rsquo;m currently working on is <a href="//print.scottylabs.org">Print@ScottyLabs</a>. It&rsquo;s a really handy service which lets you send an attachment to <a href="&#109;&#97;&#x69;&#108;&#116;&#111;&#x3a;&#112;&#x72;&#105;&#x6e;&#x74;&#64;&#x73;&#x63;&#111;&#x74;&#x74;&#121;&#108;&#97;&#98;&#115;&#x2e;&#111;&#114;&#x67;">&#x70;&#x72;&#105;&#110;&#x74;&#64;&#115;&#x63;&#111;&#116;&#116;&#121;&#108;&#x61;&#x62;&#x73;&#x2e;&#111;&#114;&#x67;</a> and have it sent to the printer. I&rsquo;m currently in the process of rewriting much of the code base from scratch to support a plethora of highly-requested features, so there will no doubt be more posts about my exploits.</p>

<p>Luckily, CMU (and arguably every college) is not terribly notable for keeping up-to-date information on it&rsquo;s website. This means that I got the &ldquo;wonderful&rdquo; opportunity to dig through CUPS documentation, sketchy printer manufacturer websites, and the depths of the Internet to finagle together a solution. Here&rsquo;s to hoping that you have a far more pleasurable experience. Without further ado, these are the steps I went through to get it done.</p>

<h2>What Didn&rsquo;t Work</h2>

<p>The Common Unix Printing System (CUPS) is a relatively new standard which is designed to improve over the rather haphazard methods used for printing in the past. It improves in a lot of ways and has a few neat features. One of these is a handy web interface which lets you interact with your configuration files, add printers, view the print queue, etc. through a beginner-friendly GUI, which described me perfectly when I started and still does now.</p>

<p>By default, when <code>cupsd</code> (the CUPS daemon) starts up, it listens on <code>http://localhost:631</code> incoming HTTP requests. By default, external requests are refused. You can either enable these in a configuration file somewhere or <a href="http://ubuntuguide.org/wiki/Using_SSH_to_Port_Forward">tunnel your traffic</a> through an <code>ssh</code> proxy, &ldquo;tricking&rdquo; the server into thinking your requests are coming locally. Additionally, you must be either <code>root</code> or in the <code>lpadmin</code> group to access the administration parts of this web GUI.</p>

<p>But for whatever reason, neither using the <code>root</code> username and password nor adding myself to the <code>lpadmin</code> group worked. I was incessantly blocked by the interface when I tried to give it my credentials. Defeated, I needed to find another way.</p>

<p>I’m telling you this as a sort of justification for the super hacky solution that I came up with (but that works in the end, even if it’s non-standard). If you have any ideas on why this failed, I&rsquo;d love to hear them!</p>

<h2>When in doubt, duct tape</h2>

<p>The instructions to install CMU print drivers on Linux only work for environments with desktop environments installed. (You can read these instructions <a href="http://www.cmu.edu/computing/clusters/printing/how-to/linux/pers-cluster.html">here</a>). So, in keeping with the UNIX philosophy that everything’s a file, the solution I came up with was essentially to follow these instructions on a <strong>personal Linux box</strong>, then <strong>copy and modify</strong> the corresponding files to achieve the same effect on the server we need them to be on.</p>

<p>It’s at this point that you’re probably wondering why I didn’t just do a little research and figure out how to make these modifications myself, or perhaps figure out where the files I needed were coming from. There are a couple of reasons. First, that takes a lot of time, I&rsquo;m lazy, and whatever I came up with didn&rsquo;t need to scale. Second, when you install a CUPS printer, you need a PostScript Printer Description (PPD) file to tell CUPS how the printer works. Despite my best efforts searching the web, I couldn’t find a central repository where these .ppd files were stored. However, most desktop environments have the ability to search <strong>somewhere mystical</strong> (read: you should tell me if you know) and download these .ppd files.</p>

<p><a name="tldr"></a></p>

<h2>Do you think I really care, just tell me how it works</h2>

<p>The process is not too complicated. Go back to the <a href="http://www.cmu.edu/computing/clusters/printing/how-to/linux/pers-cluster.html">CMU instructions</a> to install a printer on a personal Linux machine. Following them should be fairly self explanatory. Say perhaps that you want to install the print drivers for the queue <code>andrew-color</code>. After following along and inserting “andrew-color” as the print queue where required, you’ll come up to a screen that asks you to name your printer. This name does not have to be the name of the queue, but I always make it that when I&rsquo;m working with the CMU printers. Either way, be sure to remember what you entered for this name (again, I’m using the name “andrew-color”).</p>

<p>Also, part of the process should involve you specifying a PPD file. The easiest way to do this is to go to a printer that dispatches jobs from that queue and to get the make and model for it. In the case of andrew-color, the Wean printer is an HP Color LaserJet CP6015x. Using this information, we can use the Gnome/KDE/XFCE window, enter our make and model, and have it spit out the recommended PPD file to use (although it likely won&rsquo;t call as such).</p>

<p>Now that everything is all installed, we can pluck the information we need. If you’re on a standard Linux install, your CUPS files will be in <code>/etc/cups</code>. The specific files that are of interest to us are <code>/etc/cups/printers.conf</code> and <code>/etc/cups/ppd/&lt;your-printer-name&gt;.ppd</code>, so my file is called <code>/etc/cups/ppd/andrew-color.ppd</code>. We need the entire .ppd file, and it will go into the corresponding directory on our server. As for <code>printers.conf</code>, we just need a specific entry. This file is a list of all the installed printers, each wrapped in <code>&lt;Printer your-printer-name&gt;&lt;/Printer&gt;</code> tags. Yank this text however you want from your local computer to the server, and add it to the corresponding <code>printers.conf</code> file. If your personal Linux machine made the <code>&lt;Printer&gt;&lt;/Printer&gt;</code> tags into <code>&lt;DefaultPrinter x&gt;&lt;/DefaultPrinter&gt;</code> tags, go ahead and change this to just <code>&lt;Printer x&gt;&lt;/Printer&gt;</code>. To recap, now I’ve got about 20 lines of additional configuration data added to the <code>printers.conf</code> file on my server, beginning with the line <code>&lt;Printer andrew-color&gt;</code> and ends with the line <code>&lt;/Printer&gt;</code>.</p>

<p>For my installation, I have one more thing to do. Somewhere in the middle of this entry, there is a line which reads something like <code>Filter application/vnd.cups-postscript 0 hpps</code>. CUPS has a filtering functionality that lets you interact with the data before it gets printed, which you can read more about <a href="http://en.wikipedia.org/wiki/CUPS#Filtering_process">here</a>. We want to make sure that we use the <code>foomatic</code> filters (because that&rsquo;s how our server is configured), so we have to change the existing filters so that they read
~~~
Filter application/vnd.cups-raw 0 -
Filter application/vnd.cups-postscript 100 foomatic-rip
Filter application/vnd.cups-pdf 0 foomatic-rip
~~~
After all this, if you’ve copied the PPD file into the right folder (<code>/etc/cups/ppd/</code>), then you’re all set! Restart CUPS with <code>sudo /etc/init.d/cups restart</code> so that your changes take effect. You can print using <code>lp</code> and the <code>-d</code> flag to specify the print queue you want. Remember that we picked the name “andrew-color” for our print queue above, so a sample <code>lp</code> command would look like this:</p>

<p><code>lp -t ‘My First Color Print Job’ -U jezimmer -d andrew-color /path/to/myfile.pdf</code></p>

<p>Happy printing!</p>

<p>- - - - -
<br>
### Jake on the Web
<a class="image-link" href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on
[GitHub][g] or paying a visit to [my homepage][h]. If this post was about one of
my open source projects, make sure to star it on GitHub! I love hearing what
people think, so feel free to comment, open an issue, or send me an email.
 [g]: https://www.github.com/jez/
 [h]: https://jez.io/
</p>
]]></content>
  </entry>
  
</feed>
