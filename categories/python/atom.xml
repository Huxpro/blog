<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | Bits, Bytes, and Words]]></title>
  <link href="https://blog.jez.io/categories/python/atom.xml" rel="self"/>
  <link href="https://blog.jez.io/"/>
  <updated>2016-03-10T00:20:19-05:00</updated>
  <id>https://blog.jez.io/</id>
  <author>
    <name><![CDATA[Jake Zimmerman]]></name>
    <email><![CDATA[jake@zimmerman.io]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Show Where a Python Package Is Used]]></title>
    <link href="https://blog.jez.io/2015/06/12/show-where-a-python-package-is-used/"/>
    <updated>2015-06-12T02:36:05-04:00</updated>
    <id>https://blog.jez.io/2015/06/12/show-where-a-python-package-is-used</id>
    <content type="html"><![CDATA[<p>A while back I was doing some spring cleaning of my Python packages. I noticed
that there were a bunch of packages that I couldn&rsquo;t recall installing. I wanted
to know if I could safely remove them, so I wrote a simple bash script to tell
me called <code>pip-uses</code>.</p>

<!-- more -->


<h2>Source</h2>

<p>Rather than post the source here and let it get more out of date every time I
change it, you can find the source <a href="https://github.com/jez/bin/blob/master/pip-uses">on GitHub</a>. It&rsquo;s in my <a href="https://github.com/jez/bin">bin
repository</a>, where I keep my notable helper scripts; feel free to
poke around.</p>

<h2>Motivations</h2>

<p>I was primarily influenced by Homebrew&rsquo;s <code>brew uses</code> command. It does a nice job
of giving you exactly the information you want, and I think the way the command
is named makes sense.</p>

<pre><code class="plain Homebrew: brew uses">$ brew uses --installed pango
imagemagick
</code></pre>

<p><code>pip-uses</code> gives you basically the experience:</p>

<pre><code class="plain Pip: pip-uses">$ pip-uses stevedore
virtualenvwrapper
</code></pre>

<p>In this example, the Python package <code>virtualenvwrapper</code> uses <code>stevedore</code>, just
as <code>imagemagick</code> uses <code>pango</code>. Both commands can save you from accidentally
removing a crucial dependency and answer the burning question, &ldquo;How in the world
did this thing get installed?&rdquo;</p>

<h2>Wish List</h2>

<p>I&rsquo;m not doing much Python development these days, but if I had some spare time
I&rsquo;d love for the script to also have these features:</p>

<ul>
<li>Recursive enumeration of dependencies

<ul>
<li>It&rsquo;d be nice if <code>pip-uses</code> kept recursively searching until it found no more
dependencies. This way, it&rsquo;d be easy to see if you could safely uninstall a
whole slew of packages that you&rsquo;re no longer using.</li>
</ul>
</li>
<li>Operate on more than one package

<ul>
<li>I didn&rsquo;t need it at the time, so I didn&rsquo;t implement it, but it&rsquo;d be nice if
the command took a variable amount of arguments and ran the same logic on
all supplied packages.</li>
</ul>
</li>
<li>Integrate with <code>pip</code>

<ul>
<li>Programs like <code>brew</code> and <code>pip</code> allow developers to add &ldquo;external commands&rdquo;
by adding commands to the <code>PATH</code> that look like <code>brew-xyz</code> or <code>git-xyz</code>. I
couldn&rsquo;t find if there was a special way to add external commands to <code>pip</code>.</li>
</ul>
</li>
</ul>


<p>If you find this script useful and end up implementing one of these feature or
more on top of <code>pip-uses</code>, be sure to send me a Pull Request!</p>

<p>- - - - -
<br>
### Jake on the Web
<a class="image-link" href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on
[GitHub][g] or paying a visit to [my homepage][h]. If this post was about one of
my open source projects, make sure to star it on GitHub! I love hearing what
people think, so feel free to comment, open an issue, or send me an email.
 [g]: https://www.github.com/jez/
 [h]: https://jez.io/
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Virtualenvs]]></title>
    <link href="https://blog.jez.io/2014/12/22/ruby-virtualenvs/"/>
    <updated>2014-12-22T13:52:40-05:00</updated>
    <id>https://blog.jez.io/2014/12/22/ruby-virtualenvs</id>
    <content type="html"><![CDATA[<p>A while back I found a command that removes all Ruby gems installed on a system
when you&rsquo;re using rbenv. It worked great, so I decided to build on top of it.
After a bit of research, I found a much better solution to the root of my
problems: sandboxing Ruby gems.</p>

<!-- more -->


<h2>Ugh, Ruby&hellip;</h2>

<p>If you&rsquo;re anything like me, you can never do anything right on the first try
using Ruby. At one point, I found myself needing a script to just nuke
everything and start over&hellip; That&rsquo;s when I found Ian Vaughan&rsquo;s <a href="https://gist.github.com/IanVaughan/2902499">script</a> that
magically removes all gems. I was delighted to see that it worked perfectly on
the first try, and went about the rest of my business.</p>

<h2>Modifications</h2>

<p>There were two ways though in which this script&rsquo;s functionality differed from
what I wanted it to do: it always removed <strong>all</strong> gems, and it left behind a
<code>.ruby_version</code> file after it was used, clobbering any file that might have been
there before.</p>

<p>In my updated script, you can specify a list of ruby versions as arguments, and
it will only gems from those versions instead of all of them.  Also, it saves
and restores the value of the old <code>.ruby_version</code> file once it&rsquo;s done.</p>

<p>The new script is available <a href="https://gist.github.com/jez/cc2ba08062c6183a489c">as a fork of the original Gist</a> and also as
a part of of <a href="https://github.com/jez/bin/blob/master/uninstall_gems">my personal bin folder</a>.</p>

<h2>The Underlying Problem: Virtualenv&rsquo;s in Ruby</h2>

<p>After a bit of reflection, I realized I should be trying to solve the underlying
problem: different projects had different dependencies, and gems from one
project were bleeding into gems from another. If you&rsquo;re a Python developer, you
don&rsquo;t have this issue: <a href="http://virtualenvwrapper.readthedocs.org/en/latest/">virtualenvwrapper</a>, <code>pip</code>, and <code>requirements.txt</code>
files make this a non-issue.</p>

<p>After looking into if there existed a similar Ruby solution, I came up with
<a href="http://honza.ca/2011/06/install-ruby-gems-into-virtualenv">this blog post</a> outlining how you can do the exact same thing using
virtualenvs but with Ruby gems! Once again, it needed a little bit of
modification so that everything works again as you&rsquo;d expect when you
<code>deactivate</code>. Add these lines to your virtualenv&rsquo;s <code>postactivate</code> script:</p>

<pre><code class="python $VIRTUAL_ENV/bin/postactivate">export OLD_GEMHOME="$GEM_HOME"
export GEM_HOME="$VIRTUAL_ENV/gems"

export OLD_GEM_PATH="$GEM_PATH"
export GEM_PATH=""

export OLD_PATH="$PATH"
export PATH="$GEM_HOME/bin:$PATH"
</code></pre>

<p>And then add this complementary section to your <code>predeactivate</code> script:</p>

<pre><code class="python $VIRTUAL_ENV/bin/predeactivate">export GEM_HOME="$OLD_GEM_HOME"
unset OLD_GEM_HOME

export GEM_PATH="$OLD_GEM_PATH"
unset OLD_GEM_PATH

export PATH="$OLD_PATH"
unset OLD_PATH
</code></pre>

<p>Now, whenever you install gems, they&rsquo;ll install to the folder
<code>$VIRTUAL_ENV/gems/</code> instead of the system&rsquo;s location, so no gems bleed into
another project!</p>

<h2>One Step Further</h2>

<p>Bringing up this web page, copying those snippets, and pasting them in the two
necessary files every time is a bit tedious. To automate this process, we can
tap into virtualenvwrapper&rsquo;s configurability using hooks. Instead of dropping
those snippets into <code>$VIRTUAL_ENV/bin/{post,prede}activate,</code>, place them in
<code>$VIRTUALENVWRAPPER_HOOK_DIR/{post,prede}activate</code>.</p>

<p>Now every time you <code>workon</code> a virtualenv, the appropriate configuration will
be set up. Note that this means every normal Python project you use will have
this Ruby configuration added (not just the Ruby projects), but that shouldn&rsquo;t
matter because they interoperate nicely. If it&rsquo;s really an issue, you can stick
with the per-virtualenv solution above.</p>

<p>Note: a side effect of this nice sandboxing is that you can normally run
commands without prefixing them with <code>bundle exec ...</code>, which is actually really
handy.</p>

<p>- - - - -
<br>
### Jake on the Web
<a class="image-link" href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on
[GitHub][g] or paying a visit to [my homepage][h]. If this post was about one of
my open source projects, make sure to star it on GitHub! I love hearing what
people think, so feel free to comment, open an issue, or send me an email.
 [g]: https://www.github.com/jez/
 [h]: https://jez.io/
</p>
]]></content>
  </entry>
  
</feed>
