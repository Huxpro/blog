<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Latex | Bits, Bytes, and Words]]></title>
  <link href="https://blog.jez.io/categories/latex/atom.xml" rel="self"/>
  <link href="https://blog.jez.io/"/>
  <updated>2015-12-29T00:43:28-05:00</updated>
  <id>https://blog.jez.io/</id>
  <author>
    <name><![CDATA[Jake Zimmerman]]></name>
    <email><![CDATA[jake@zimmerman.io]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The LaTeX Homework Document Class]]></title>
    <link href="https://blog.jez.io/2015/01/10/the-latex-homework-document-class/"/>
    <updated>2015-01-10T18:00:00-05:00</updated>
    <id>https://blog.jez.io/2015/01/10/the-latex-homework-document-class</id>
    <content type="html"><![CDATA[<p>There are LaTeX document classes for typesetting books, articles, exams,
presentations, and more. Now, there&rsquo;s one for homework assignments, too.</p>

<!-- more -->


<h2><a href="https://github.com/jez/latex-homework-class">Source</a></h2>

<p>Check out and download the source <a href="https://github.com/jez/latex-homework-class">on GitHub</a>.</p>

<h2>What</h2>

<p>This is a LaTeX document class. That means you use it with
<code>\documentclass{homework}</code> at the top of the document. It provides a document
layout and some helper commands that make working with questions easy.</p>

<h2>Installation</h2>

<p>Certainly the easiest way to start using this template is to copy the .cls file
to your computer in the same directory as your LaTeX project directory.</p>

<p>A better way to install this template is to fork <a href="https://github.com/jez/latex-homework-class">the above
repository</a> and then clone that fork to a particular folder on your
computer:</p>

<pre><code class="bash Install">git clone https://github.com/&lt;your-username&gt;/latex-hw-template
</code></pre>

<p>Then, whenever you need to use the template, you can copy the template wherever.
Also, if there are ever any updates, you can simply run</p>

<pre><code class="bash Update">git pull
</code></pre>

<p>to update the template.</p>

<h3>Preferred Installation</h3>

<p>The <em>best</em> way to install this file is to <a href="https://github.com/jez/latex-solarized#installation">follow the instructions
here</a>, keeping in mind that you&rsquo;re trying to install a <code>.cls</code> file
instead of three <code>.sty</code> files.</p>

<h2>Usage</h2>

<p>See the <a href="https://github.com/jez/latex-homework-class/blob/master/homework.tex">homework.tex</a> file for an exhaustive list of usage
examples. There are also comments explaining features for which there are no
examples given.</p>

<p>The result is the following:</p>

<p><a class="image-link" href="/images/homework-class.png"><img src="/images/homework-class.png"></a></p>

<p>The class file also has a bunch of helper <code>\usepackage</code>s that you might want to
take a look at in <a href="https://github.com/jez/latex-homework-class/blob/master/homework.cls">homework.cls</a>.</p>

<p>For your convenience, the file <a href="https://github.com/jez/latex-homework-class/blob/master/template.tex">template.tex</a> is a nearly-empty
LaTeX file that contains the bare essentials to get started using the homework
class.</p>

<h3><code>\question</code></h3>

<p>To start a question, just type <code>\question</code>. It will add the text &ldquo;Question #&rdquo;
with a line underneath to the document. If you&rsquo;d like to change &ldquo;Question&rdquo; to
something else, use</p>

<pre><code class="tex Change the Question Type">\renewcommand{\questiontype}{Whatever You Want}
% Now questions will be titled "Whatever You Want #"
</code></pre>

<p>Similarly, if you ever need to skip numbers, you can do</p>

<pre><code class="tex Non-contiguous Question Numbers">\setcounter{\questionCounter}{&lt;target number - 1&gt;}
</code></pre>

<p>So, to skip to the 10th question, <code>&lt;target number - 1&gt;</code> = 9.</p>

<p>See <a href="https://github.com/jez/latex-homework-class/blob/master/homework.tex">homework.tex</a> for more.</p>

<h3><code>\question*</code></h3>

<p>Some classes like to give their homework questions fancy names. If this is the
case, you can use <code>\question*{The Question's Name}</code> to make a named question.</p>

<p>See <a href="https://github.com/jez/latex-homework-class/blob/master/homework.tex">homework.tex</a> for more.</p>

<h3>Question Parts</h3>

<p>Another common thing on homework assignments is to have multi-part questions. To
deal with these, use the form</p>

<pre><code class="tex Lettered Question Parts">\begin{alphaparts}
  \questionpart
    This will be part (a).
  \questionpart
    This will be part (b).
\end{alphaparts}
</code></pre>

<p>or
<code>tex Numbered Question Parts
\begin{arabicparts}
  \questionpart
    This will be part x.1.
  \questionpart
    This will be part x.2.
\end{arabicparts}
</code></p>

<p>See <a href="https://github.com/jez/latex-homework-class/blob/master/homework.tex">homework.tex</a> for more.</p>

<h3>Induction Proofs</h3>

<p>In math classes, induction proofs come up a lot, and they almost always have the
same form: base case, induction hypothesis, and induction step.</p>

<pre><code class="tex Induction Environment">\begin{induction}
  \basecase
    This is my fancy base case.
  \indhyp
    Assume some claim.
  \indstep
    Finish off the proof
\end{induction}
</code></pre>

<h2>Markdown</h2>

<p>One of my favorite features of this document class is that it redefines the
<code>\section</code> macros. This means you can use tools like Markdown, which have a
concise syntax, together with a tool like <a href="http://johnmacfarlane.net/pandoc/"><code>pandoc</code></a> to convert Markdown
into LaTeX. As an example, consider that we have the Markdown:</p>

<pre><code class="plain my-homework.md">#

This is my first answer.

#

This is my next answer.

$$a^2 + b^2 = c^2$$
</code></pre>

<p>Running <code>pandoc -f markdown -t latex my-homework.md</code> will output</p>

<pre><code class="tex Convert markdown to LaTeX">% $ pandoc -f markdown -t latex my-homework.md
\section{}\label{section}

This is my first answer.

\section{}\label{section-1}

This is my next answer.

\[a^2 + b^2 = c^2\]
</code></pre>

<p>And since <code>\section</code> is the same thing as \question, we&rsquo;re golden, and this
compiles as we&rsquo;d want it to. Throw it into the blank
<a href="https://github.com/jez/latex-homework-class/blob/master/template.tex">template.tex</a> file included in the repo, and you&rsquo;ve got yourself
a typeset homework.</p>

<h2>More</h2>

<p>I&rsquo;ve make a lot of other LaTeX-related posts. Be sure to <a href="/categories#latex">check them out</a>
as well! My hope is that you find something that makes developing LaTeX just
that much easier.</p>

<p>- - - - -
<br>
### Jake on the Web
<a class="image-link" href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on
[GitHub][g] or paying a visit to [my homepage][h]. If this post was about one of
my open source projects, make sure to star it on GitHub! I love hearing what
people think, so feel free to comment, open an issue, or send me an email.
 [g]: https://www.github.com/jez/
 [h]: https://jez.io/
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Offline LaTeX Development - Part 2]]></title>
    <link href="https://blog.jez.io/2015/01/10/offline-latex-development-part-2/"/>
    <updated>2015-01-10T17:00:00-05:00</updated>
    <id>https://blog.jez.io/2015/01/10/offline-latex-development-part-2</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve already written about how I develop LaTeX offline in Vim using GNU Make.
Recently, though, I found a tool that implements another feature that GUI
editors had to themselves: splitting panes.</p>

<!-- more -->


<h2><a href="/2014/10/06/offline-latex-development/">Offline LaTeX Development</a></h2>

<p>If you missed it, check out my previous post here before reading on. There&rsquo;s a
lot of handy stuff there!</p>

<h2>Split Panes</h2>

<p>Out of the box, tools like ShareLaTeX and TeXShop feature split pane editing:
you can have your LaTeX on one half of the screen and the PDF on the other.
Previously, I justified not having this feature with the reasoning that the
<code>:WV</code> binding (something I explained <a href="/2014/10/06/offline-latex-development/">here</a>) immediately opened up the
PDF and the windows switched.</p>

<p>However, I read about a tool called <a href="http://ianyh.com/amethyst/">Amethyst</a> on Hacker News the
other day and immediately realized it&rsquo;s potential for improving my LaTeX setup.
Amethyst is a tool that strives to be a tiling window manager like xmonad for OS
X. At times it falls short of this goal, but for the most part it works really
well. Just open up two apps, like MacVim and Preview, and it&rsquo;ll show them
side-by-side with no added effort. There are also plenty of keybindings to
manipulate the window arrangements.</p>

<p>Here&rsquo;s a screenshot of what the new setup looks like:</p>

<p><a class="image-link" href="/images/latex-amethyst.png"><img src="/images/latex-amethyst.png"></a></p>

<p>After looking into it a little more, it looks like there are other OS X tools
for spitting the screen into two panes, like <a href="http://www.bettertouchtool.net/">BetterTouchTool</a>, though I
haven&rsquo;t actually tried any of them out.</p>

<p>- - - - -
<br>
### Jake on the Web
<a class="image-link" href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on
[GitHub][g] or paying a visit to [my homepage][h]. If this post was about one of
my open source projects, make sure to star it on GitHub! I love hearing what
people think, so feel free to comment, open an issue, or send me an email.
 [g]: https://www.github.com/jez/
 [h]: https://jez.io/
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Offline LaTeX Development]]></title>
    <link href="https://blog.jez.io/2014/10/06/offline-latex-development/"/>
    <updated>2014-10-06T18:00:00-04:00</updated>
    <id>https://blog.jez.io/2014/10/06/offline-latex-development</id>
    <content type="html"><![CDATA[<p>While online clients like ShareLaTeX or writeLaTeX are popular for getting started with LaTeX quickly, developing LaTeX locally with Vim and the command line is my preferred LaTeX workflow. In this post, I&rsquo;ll describe the changes I&rsquo;ve made that make working with LaTeX on the command line a seamless experience.</p>

<!-- more -->


<h2>Install LaTeX</h2>

<p>Obviously, to work with LaTeX locally, you&rsquo;ll need LaTeX installed. To check if you already have it installed, you can run <code>which pdflatex</code>. If it&rsquo;s installed, this command will tell you the path to program. Otherwise, it won&rsquo;t print anything.</p>

<h3>On Linux</h3>

<p>Installing LaTeX on Linux isn&rsquo;t too bad. Usually it&rsquo;s included in your distribution&rsquo;s package manager. I&rsquo;ll be focusing on OS X for the majority of this post though, so Google around if you end up having trouble.</p>

<h3>On OS X</h3>

<p>To install LaTeX on a Mac, we&rsquo;ll be installing MacTeX, which includes the command line LaTeX utilities as well as a couple graphical clients for LaTeX development. You can try compiling from source, but as Homebrew points out when you try to <code>brew install linux</code>:</p>

<pre><code class="plain brew install latex">$ brew install latex
Error: No available formula for latex
Installing TeX from source is weird and gross, requires a lot of patches,
and only builds 32-bit (and thus can't use Homebrew deps on Snow Leopard.)

We recommend using a MacTeX distribution: http://www.tug.org/mactex/
</code></pre>

<p>With that in mind, head on over to <a href="http://www.tug.org/mactex/">http://www.tug.org/mactex/</a> and download the file <code>MacTeX.pkg</code>. Once this has downloaded and you&rsquo;ve clicked through the installer, you should be ready to go with LaTeX. Verify this by running <code>which pdflatex</code> again.</p>

<h2>Use Vim</h2>

<p>The biggest productivity improvement you gain from developing LaTeX locally is that you get to use Vim. Make sure you have a nice colorscheme for both your terminal and for Vim. <strong>I can&rsquo;t stress enough how important it is to make your terminal look nice</strong>: you want to enjoy your terminal experience, and this is one of the easiest ways to do so.</p>

<h2>Use Make</h2>

<p>Compiling LaTeX is pretty straightforward. To generate a PDF, all you have to do is run the command</p>

<pre><code class="bash pdflatex">$ pdflatex &lt;myfile&gt;.tex
</code></pre>

<p>And you&rsquo;ll get a file called <code>&lt;myfile&gt;.pdf</code> in the current directory, plus some intermediate files. We can go one step further and put a bunch of useful build targets into a Makefile and use it to build our PDF:</p>

<pre><code class="make LaTeX Makefile https://gist.github.com/jez/b248a409d19c9f1c94cd"># NOTE: Change "written" to the name of your TeX file with no extension
TARGET=written

all: $(TARGET).pdf

## Generalized rule: how to build a .pdf from each .tex
LATEXPDFS=$(patsubst %.tex,%.pdf,$(wildcard *.tex))
$(LATEXPDFS): %.pdf: %.tex
  pdflatex -interaction nonstopmode $(patsubst %.pdf,%.tex,$@)

clean:
  rm *.aux *.log || true

veryclean: clean
  rm $(TARGET).pdf

view: $(TARGET).pdf
  if [ "Darwin" = "$(shell uname)" ]; then open $(TARGET).pdf ; else evince $(TARGET).pdf ; fi

submit: $(TARGET).pdf
  cp $(TARGET).pdf ../

print: $(TARGET).pdf
  lpr $(TARGET).pdf

.PHONY: all clean veryclean view print
</code></pre>

<p>If you save this to a file called <code>Makefile</code> in the same directory as your LaTeX file, we can just run <code>make</code> instead of running <code>pdflatex &lt;myfile&gt;.tex</code>!</p>

<p>As you can see, there are a bunch of other handy targets here:</p>

<ul>
<li><code>make clean</code> will remove all intermediate files that are created.</li>
<li><code>make veryclean</code> will remove all intermediate files and the compiled PDF file.</li>
<li><code>make view</code> will compile the file and then open it up in a PDF viewer (if you&rsquo;re on OS X, or on Linux and have <code>evince</code> installed).</li>
<li><code>make print</code> will send your document to the default printer with the default options for that printer.</li>
<li><code>make submit</code> will copy your file into the parent directory. This is handy when you&rsquo;re working in a subfolder on an assignment to isolate the intermediate files, but your class has provided a handin script that needs the PDF file to be in the parent directory.</li>
</ul>


<h2>Workflow Tips</h2>

<p>Right now, our workflow looks like this:</p>

<ul>
<li>Create TeX file</li>
<li>Edit in Vim</li>
<li>Switch to terminal</li>
<li>Run make view to compile and view</li>
</ul>


<p>We can actually optimize this workflow to one less step: we don&rsquo;t have to get out of Vim to run make!</p>

<p>Vim has a command <code>:make</code> that will look for a Makefile in the current directory and run it&rsquo;s <code>all</code> target. It also takes a target as an optional argument, so we can do <code>:make view</code> to compile and view the document from within Vim!</p>

<p>Taking this one step further, we can add a command to shorten this. If we add</p>

<pre><code class="vim Save, Compile and View in Vim">command WV w | make view
</code></pre>

<p>to our <code>.vimrc</code>, we&rsquo;ll only have to type <code>:WV</code> to save, compile, and view our PDF output.</p>

<h2>Wrap Up</h2>

<p>That&rsquo;s it! I like this experience for a bunch of reasons:</p>

<ul>
<li><strong>It&rsquo;s faster</strong>. Compiling LaTeX without having to wait for a web client to load is really nice.</li>
<li><strong>It&rsquo;s more stable</strong>. You can still edit, compile, and view your work if you don&rsquo;t have access to the Internet.</li>
<li><strong>It&rsquo;s faster</strong>. Using Vim to edit text is much more convenient than a standard text editor.</li>
</ul>


<p>Do you have a LaTeX tip, a fancier Makefile, or a favorite vim plugin for LaTeX? Share it in the comments!</p>

<p>- - - - -
<br>
### Jake on the Web
<a class="image-link" href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on
[GitHub][g] or paying a visit to [my homepage][h]. If this post was about one of
my open source projects, make sure to star it on GitHub! I love hearing what
people think, so feel free to comment, open an issue, or send me an email.
 [g]: https://www.github.com/jez/
 [h]: https://jez.io/
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solarized LaTeX Listings]]></title>
    <link href="https://blog.jez.io/2014/10/04/solarized-latex-listings/"/>
    <updated>2014-10-04T06:35:05-04:00</updated>
    <id>https://blog.jez.io/2014/10/04/solarized-latex-listings</id>
    <content type="html"><![CDATA[<p>Out of the box, LaTeX listings are pretty bad. With a bit of work, you can ascribe some colors to the code, but you&rsquo;re still stuck with choosing a theme. Given that I recently just switched to the Solarized colorscheme in Vim and iTerm2, I made a LaTeX package that styles code listings with the predefined Solarized light colors.</p>

<!-- more -->


<h2><a href="https://github.com/jez/latex-solarized">Source</a></h2>

<p>The source for this theme is on GitHub, and the README has pretty good documentation. Here&rsquo;s an example of the final result:</p>

<p><a class="image-link" href="/images/solarized-light-screenshot.png"><img src="/images/solarized-light-screenshot.png"></a></p>

<p>After you install them in the right place, you can include <code>\usepackage{solarized-light}</code> to turn source code listings light (as in above), <code>\usepackage{solarized-dark}</code> to have listings styled with the dark Solarized theme, and just <code>\usepackage{solarized}</code> to have access to the raw Solarized color codes (see the source for their names).</p>

<p>Once you&rsquo;ve done this, you just have to include your code in your LaTeX file using the <code>listings</code> packages. You might want to check out <a href="http://en.wikibooks.org/wiki/LaTeX/Source_Code_Listings">the LaTeX wiki</a> for more information on how to get started quickly with code listings, or <a href="http://mirror.hmc.edu/ctan/macros/latex/contrib/listings/listings.pdf">the official documentation</a> for a more comprehensive reference.</p>

<p>- - - - -
<br>
### Jake on the Web
<a class="image-link" href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on
[GitHub][g] or paying a visit to [my homepage][h]. If this post was about one of
my open source projects, make sure to star it on GitHub! I love hearing what
people think, so feel free to comment, open an issue, or send me an email.
 [g]: https://www.github.com/jez/
 [h]: https://jez.io/
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A LaTeX Homework Template]]></title>
    <link href="https://blog.jez.io/2014/10/04/a-latex-homework-template/"/>
    <updated>2014-10-04T02:03:27-04:00</updated>
    <id>https://blog.jez.io/2014/10/04/a-latex-homework-template</id>
    <content type="html"><![CDATA[<p>Writing a LaTeX document from scratch for every assignment is tedious. Especially for homework assignments, a lot of the structure is repetitive. Read on to learn about the homework template I&rsquo;ve adapted for use in all my technical classes.</p>

<!-- more -->


<h2>Background</h2>

<p>I&rsquo;ve been using LaTeX for assignments in college for over a year now, and from the get-go I loved it; It&rsquo;s a powerful way to transform plain text (which is editable in Vim!) into beautiful documents. In fact, I use LaTeX + Vim or Google Docs exclusively&ndash;no Microsoft Office. People often don&rsquo;t understand why I prefer this combination, claiming that LaTeX is time consuming and tedious. But with a good template and some Vim-foo, editing LaTeX is a breeze. In a later post, I&rsquo;ll elaborate how I use Vim + Unix as an IDE for LaTeX. For now, though, let&rsquo;s take a look at my template!</p>

<h2><a href="https://github.com/jez/latex-hw-template">The Template</a></h2>

<p>For those who like to learn by doing, I invite you to <strong><a href="https://github.com/jez/latex-hw-template">jump over to GitHub</a></strong> where you can see the source, download the template, and start tinkering. The source isn&rsquo;t that long, and it comes with tons of examples to get you going.</p>

<p>The rest of this post goes into some fancy use cases for how to get the best out of this template. If you don&rsquo;t read it now, check it out later if you want to take advantage of it&rsquo;s more powerful features. You can also leave comments here asking how something works, and issues on GitHub if something&rsquo;s broken.</p>

<h2>Screenshot</h2>

<p>Here&rsquo;s a quick overview of what the theme looks like. You&rsquo;ll have to use your imagination a bit: this outline is more of a list of examples. I&rsquo;d show you how nice one of my actual homeworks looks, but then I&rsquo;d be giving out my homework!</p>

<p><a class="image-link" href="href="https://raw.githubusercontent.com/jez/latex-hw-template/master/screenshot.png">https://raw.githubusercontent.com/jez/latex-hw-template/master/screenshot.png</a>&#8221;><img class="<a" src="href="https://raw.githubusercontent.com/jez/latex-hw-template/master/screenshot.png">https://raw.githubusercontent.com/jez/latex-hw-template/master/screenshot.png</a>&#8221;></a></p>

<h2>Usage</h2>

<p>My main use case for LaTeX is (unsurprisingly) to typeset homeworks for math and CS classes. In these classes, the questions are either numbered or have specific names, and they ask for your name, lecture, recitation section, student ID, email address, etc. It turns out that there are some pretty simple ways of modularizing each of these desired features.</p>

<h3>Personal Info</h3>

<p>To solve the issue of entering personal information, the template defines a bunch of commands at the top of the file that enumerate all the fields you&rsquo;ll likely want to include on your homework.</p>

<pre><code class="latex Personal Information ">\newcommand{\myname}{Jacob Zimmerman}
\newcommand{\myemail}{jezimmer}
\newcommand{\myhwtype}{Homework}
\newcommand{\myhwnum}{0}
\newcommand{\myclass}{12-345}
\newcommand{\mylecture}{0}
\newcommand{\mysection}{Z}
</code></pre>

<p><strong>This is where forking comes in particularly handy</strong>. You&rsquo;d like to be able to define your own defaults and push them somewhere, but you also want to be able to update the template as new changes become available. If you fork the repo, you can both have a repository where you can include your own changes as well as pull any updates as they become available. (If you&rsquo;re new to forks, you should definitely <a href="https://help.github.com/articles/fork-a-repo/">check them out</a>).</p>

<h3>Questions</h3>

<p>Whenever I have an assignment to do, the questions generally come down to one of two forms: named or numbered questions. As such, there are two environments in the template that let you easily create a space to put your answers for each type of question. These are named <code>namedquestion</code> and <code>numedquestion</code> (<strong>not</strong> <code>numberedquestion</code>).</p>

<p><strong>The <code>namedquestion</code> environment</strong> takes one required argument: the name! This environment is handy any time the questions don&rsquo;t have numbers attached to them, or if the ordering of the questions doesn&rsquo;t conform nicely to a sequential numbering.</p>

<p><strong>The <code>numedquestion</code> environment</strong> takes no arguments, but that doesn&rsquo;t mean you can&rsquo;t configure it. By default, <code>numedquestions</code> begin counting at 1 and go up sequentially from there. To change this, you manually set the contents of the <code>questionCounter</code> counter. Using</p>

<pre><code class="latex">\setcounter{questionCounter}{-1}
</code></pre>

<p>Before the first question will start the numbering at 0. You can use this pattern (set the <code>questionCounter</code> to one less than the next question) to arbitrarily skip around with your numbering. There&rsquo;s an example of this in the source.</p>

<p>There are also times when you&rsquo;d like numbered questions to be of the form &ldquo;X.y&rdquo;, where &ldquo;X&rdquo; is the section number that the question comes from, and &ldquo;y&rdquo; is the number of the question within that section. The template tracks the value of &ldquo;X&rdquo; in <code>\writtensection</code>. By default, the template sets this to 0, which causes the section number to be omitted. If you manually set <code>\writtensection</code> to a non-zero value, this number will be prepended to all questions. When you do this, the value of &ldquo;y&rdquo; is determined by <code>questionCounter</code>.</p>

<p>Similar to what we could do with <code>questionCounter</code>, you can manually turn on the section counter for certain questions by including something like</p>

<pre><code>\renewcommand{\writtensection}{X}
</code></pre>

<p>in front of that particular question. Use <code>\renewcommand{\writtensection}{0}</code> after that question if you&rsquo;d like to turn it back off.</p>

<h3>Question Parts</h3>

<p>All in all, these two environments will take care of 90% of what you need to do in your homework. Sometimes, though, questions have multiple parts. To handle this, there are two environments, <code>alphaparts</code> and <code>arabicparts</code>, that take care of alphabetic and numeric question parts, respectively.</p>

<p>The uses of these environments are pretty straightforward and have no real special cases. Each environment wraps around the <code>enumerate</code> environment. This means you can just use a normal <code>\item</code> to indicate a specific part of the question.</p>

<h3>Induction Proofs</h3>

<p>There&rsquo;s one more thing that I&rsquo;d like to mention here. Different people have different ways of typesetting induction proofs, with varying degrees of success. Personally, I like the <code>description</code> environment for outlining the base case, induction hypothesis, and inductive step of the proof. It works well for basically every induction proof, and looks nice and clean.</p>

<h2>Feedback</h2>

<p>Be sure to let me know how you like this template! It works for me, but obviously I&rsquo;m only using it for a small number of things on exactly one system. If something doesn&rsquo;t seem to work, or if you&rsquo;d like to see a particular feature implemented, comment or create a GitHub issue to let me know!</p>

<p>- - - - -
<br>
### Jake on the Web
<a class="image-link" href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on
[GitHub][g] or paying a visit to [my homepage][h]. If this post was about one of
my open source projects, make sure to star it on GitHub! I love hearing what
people think, so feel free to comment, open an issue, or send me an email.
 [g]: https://www.github.com/jez/
 [h]: https://jez.io/
</p>
]]></content>
  </entry>
  
</feed>
