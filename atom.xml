<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Bits, Bytes, and Words]]></title>
  <link href="https://blog.jez.io/atom.xml" rel="self"/>
  <link href="https://blog.jez.io/"/>
  <updated>2015-05-24T00:11:51-07:00</updated>
  <id>https://blog.jez.io/</id>
  <author>
    <name><![CDATA[Jake Zimmerman]]></name>
    <email><![CDATA[jake@zimmerman.io]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Why Zsh?]]></title>
    <link href="https://blog.jez.io/2015/03/10/why-zsh/"/>
    <updated>2015-03-10T09:58:37-07:00</updated>
    <id>https://blog.jez.io/2015/03/10/why-zsh</id>
    <content type="html"><![CDATA[<p>People often ask me why I switched to zsh. Back when I had first switched, I was
hesitant to answer because I was still finding my way around. Now that I&rsquo;ve been
using it, I&rsquo;ve managed to distill down a few things zsh does well that sets it
apart as my shell of choice.</p>

<!-- more -->


<h2>Syntax Highlighting</h2>

<p>In zsh, there&rsquo;s a <a href="https://github.com/zsh-users/zsh-syntax-highlighting">plugin that syntax highlights</a> the
current command line as you type. It&rsquo;s incredibly useful to receive instant
feedback about whether a command you&rsquo;re typing is valid. Turns running commands
at the command line into nearly the same experience as typing code into your
favorite text editor.</p>

<p><a class="image-link" href="https://blog.jez.io/images/zsh-syntax-highlighting.png"><img src="https://blog.jez.io/images/zsh-syntax-highlighting.png"></a></p>

<p>The screenshot above features some of the syntax elements it highlights by
default:</p>

<ul>
<li>commands that exist (also aliases, functions, etc.) are changed to green</li>
<li>those that don&rsquo;t are changed to red</li>
<li>text corresponding to files and folders that exist are underlined</li>
<li>text that looks like a file was misspelled is changed to yellow</li>
<li>text that doesn&rsquo;t correspond to the name of a file nor that looks like a
misspelling for an existing file is left unchanged</li>
</ul>


<p>It also highlights strings, globs, and environment variables (if they&rsquo;re typed
within strings).</p>

<p>There&rsquo;s probably no technical limitation for why this couldn&rsquo;t be done in bash, but
as of yet no one has done it.</p>

<h2>Better Tab Completion</h2>

<p>In zsh when you tab complete, the matches are listed below the current line,
whereas in bash they&rsquo;re listed above it. For an example, check out the
screenshot. I perform the same keystrokes in bash and zsh:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd </span>D&lt;TAB&gt;
</span></code></pre></td></tr></table></div></figure>


<p><a class="image-link" href="https://blog.jez.io/images/zsh-tab-completion.png"><img src="https://blog.jez.io/images/zsh-tab-completion.png"></a></p>

<p>In bash, pressing TAB prints out the completions followed by a new line. In zsh,
they&rsquo;re simply listed conveniently below the current line. If I continued to
complete many things in that line or ran the command, zsh would overwrite the
old completions, but bash would keep on printing additional lines, taking up
precious screen space.</p>

<h2>Better Completion Support</h2>

<p>When I used bash, I managed to have pretty wide support for tab completion in
programs. I&rsquo;m talking much more than just completing filenames. As such, I was
pretty skeptical that there&rsquo;d be much more that zsh could offer.</p>

<p>While zsh&rsquo;s edge wasn&rsquo;t immediately apparent in this aspect, I&rsquo;d like to declare
it a winner now. I had to fight pretty hard to get my bash completions where
they were. By comparison, zsh comes with so many more completions built in, and
if you decide to use oh-my-zsh (a collection of zsh plugins) on top of zsh,
adding new functionality is one line away.</p>

<p>I now have things like environment variable completion, tmux completion, deep
git command completion, and much more.</p>

<h2>Great, how do I start?</h2>

<p>The first step is to change your shell to zsh: <code>chsh -s $(which zsh)</code>. Once
you&rsquo;ve done that, you&rsquo;ll need a <code>.zshrc</code> and <code>.zshenv</code>. If you&rsquo;re looking for a
reference, you can see my <a href="https://github.com/jez/dotfiles/blob/master/util/misc.zsh"><code>misc.zsh</code></a> file in my <a href="https://github.com/jez/dotfiles">dotfiles</a>
repo on GitHub, a file which eventually gets sourced in my <a href="https://github.com/jez/dotfiles/blob/master/zshrc"><code>.zshrc</code></a>. It
contains most of everything that you need to get started using zsh on OS X. Keep
in mind that it&rsquo;s somewhat opinionated (it heavily favors vim keybindings and
uses oh-my-zsh among other things). You might also want to check out my
<a href="https://blog.jez.io/2015/03/10/noteworthy-dotfile-hacks/">Noteworthy Dotfile Hacks</a> post, where I talked about what I
think are the most notable features I have in my dotfiles.</p>

<hr />

<p><br></p>

<h3>Jake on the Web</h3>

<p><a class="image-link" href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on
<a href="https://www.github.com/jez/">GitHub</a> or paying a visit to <a href="https://jez.io/">my homepage</a>. If this post was about one of
my open source projects, make sure to star it on GitHub! I love hearing what
people think, so feel free to comment, open an issue, or send me an email.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Noteworthy Dotfile Hacks]]></title>
    <link href="https://blog.jez.io/2015/03/09/noteworthy-dotfile-hacks/"/>
    <updated>2015-03-09T22:22:33-07:00</updated>
    <id>https://blog.jez.io/2015/03/09/noteworthy-dotfile-hacks</id>
    <content type="html"><![CDATA[<p>There are some hidden gems in my dotfiles. This is a post to showcase them,
putting them front and center.</p>

<!-- more -->


<p>I often tell people &ldquo;oh, and you can also go check out my dotfiles repository
for more cool configurations&rdquo; when I&rsquo;m giving out dotfiles advice. If someone
gave me this advice, I know I wouldn&rsquo;t follow up, even if I had the utmost awe
for the recommender. Drudging through config files isn&rsquo;t all that fun, even
though they can do fun things. Why not get rid of the drudgery?</p>

<p>This post is designed to bring the coolest parts of my dotfiles to the top. It&rsquo;s
organized by topic, so feel free to skip around.</p>

<p><strong>Note</strong>: throughout this post, I&rsquo;ll be linking to my dotfiles <em>at a specific
commit</em> on GitHub. While this solves the problem of line-level links breaking on
updates, it means that you&rsquo;ll almost certainly be looking at out-dated code.
Make sure to check out the corresponding file on the <code>master</code> branch for the
most up-to-date version.</p>

<p>Also, I <a href="https://blog.jez.io/2015/03/09/getting-started-with-rcm/">just wrote</a> about one of my biggest dotfile hacks: using rcm
to keep my dotfiles in sync across machines. Be sure to give it a read if you&rsquo;re
running into that problem.</p>

<h2><code>tmux</code></h2>

<p>I have a lot of cool stuff going on in my <code>.tmux.conf</code></p>

<ul>
<li>I <a href="https://github.com/jez/dotfiles/blob/0ca7dfb042e8d0e6790e7142487812517b5a4209/tmux.conf#L1-L4">bind the prefix key to <code>C-f</code></a>, something which I haven&rsquo;t seen
many people do.  I&rsquo;ve never had a problem with it conflicting with commonly
used shortcuts, and it&rsquo;s incredibly easy to press (compared with the common
options of <code>C-a</code> and <code>C-b</code>)</li>
<li>I integrate with two Vim plugins:

<ul>
<li><a href="https://github.com/jez/dotfiles/blob/0ca7dfb042e8d0e6790e7142487812517b5a4209/tmux.conf#L18-L27">vim-tmux-navigator</a>, which lets you jump between vim
splits and tmux splits as if they were the same thing</li>
<li><a href="https://github.com/jez/dotfiles/blob/0ca7dfb042e8d0e6790e7142487812517b5a4209/tmux.conf#L48-L49">tmuxline</a>, which makes my tmux status bar look just like Vim with
vim-airline (it even pulls down the colors from your Vim configuration!).</li>
</ul>
</li>
</ul>


<h2><code>dircolors</code></h2>

<p>I use the GNU <code>dircolors</code> command to change the colors output by the <code>ls</code>
program. After running <code>brew install coreutils</code> on OS X, I&rsquo;m able to see the
colors thanks to <a href="https://github.com/jez/dotfiles/blob/0ca7dfb042e8d0e6790e7142487812517b5a4209/dircolors">this file</a> and <a href="https://github.com/jez/dotfiles/blob/0ca7dfb042e8d0e6790e7142487812517b5a4209/host-Jacobs-MacBook-Air/util/host.sh#L19-L21">this snippet</a> in my zshrc.</p>

<p><a class="image-link" href="https://raw.githubusercontent.com/huyz/dircolors-solarized/master/img/screen-dircolors-in-iTerm2-solarized_dark.png"><img src="https://raw.githubusercontent.com/huyz/dircolors-solarized/master/img/screen-dircolors-in-iTerm2-solarized_dark.png"></a></p>

<p>(image from the <a href="https://github.com/seebi/dircolors-solarized">dircolors-solarized</a> repository on GitHub)</p>

<h2><code>gitconfig</code></h2>

<p>I talked about this <a href="https://blog.jez.io/2015/01/16/mastering-git-log-for-collaboration/">in a previous post</a>, but I have some <a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/host-Jacobs-MacBook-Air/gitconfig#L20-L24">special
settings</a> in my global gitconfig for adding colored decoration to git
log commands.</p>

<h2><code>aklog cs.cmu.edu</code></h2>

<p>For my friends at CMU, I have <code>aklog cs.cmu.edu</code> in <a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/host-andrew/util/host.zshenv#L1">my
~/.zshenv</a>, which gets run even when you log in interactively
(like what happens when you <code>scp</code> something), so that I can copy files from my
local machine to the SCS AFS space, which is useful for doing things like making
handins. Note that the file linked to above is a host-specific file that only
&ldquo;exists&rdquo; for me on Andrew machines. You can read more about my setup <a href="https://blog.jez.io/2015/03/09/getting-started-with-rcm/">in my
previous post</a>.</p>

<h2>zsh-syntax-highlighting</h2>

<p>I use a <a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/util/misc.zsh#L79-L80">zsh plugin</a> to syntax highlight my commands as I type them
on the command line, similar to how the fish shell does it. It does various
things, like coloring the command red or green based on whether it exists,
underlines filenames that exist, highlights filenames that might be misspelled
in yellow, highlights built-ins like <code>if</code> and <code>for</code> in orange, etc.</p>

<h2>Automatic Dotfile Updates</h2>

<p>I wrote a pretty robust script that reminds me to update my dotfiles and my
system regularly. All it does is remind me to check for system updates once
every 24 hours, but it works so well that I had updated my system <code>bash</code> version
before I even read about Shell Shock!</p>

<p>The relevant links are <a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/util/auto-update.sh">here</a> for the core script that I <a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/zshrc#L44-L45">source in
my zshrc</a>, and then the following host specific links:
- <a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/host-Jacobs-MacBook-Air/util/host.sh#L69-L86">here</a> for my MacBook
- <a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/host-ghost.zimmerman.io/util/host.sh#L24-L31">here</a> for my Ubuntu VPS</p>

<h2>Shell aliases</h2>

<p>I&rsquo;d like to think that my whole <a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/util/aliases.sh"><code>aliases.sh</code></a> file is golden, but if
you&rsquo;re looking for some specific things I like about it, check out my <a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/util/aliases.sh#L75-L86"><code>git log</code></a>
aliases, which I wrote about <a href="https://blog.jez.io/2015/01/16/mastering-git-log-for-collaboration/">here</a>, and my <a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/util/aliases.sh#L44-L45"><code>chromemem</code></a> alias, which I wrote about <a href="https://blog.jez.io/2014/12/29/google-chrome-a-memory-hog/">here</a>.</p>

<h2>Ruby Virtualenvs</h2>

<p>I wrote about how I use <a href="https://blog.jez.io/2014/12/22/ruby-virtualenvs/">Python Virtualenvs to sandbox Ruby
gems</a>, a post in which I dropped some snippets that you can
use to configure virtualenvwrapper to work with Ruby projects. I actually went
ahead and <a href="https://github.com/jez/dotfiles/tree/eba0202443de6bcc171dbe6bc133fa9fe02357f7/host-Jacobs-MacBook-Air/virtualenvs">fed those files right into rcm</a>, so they&rsquo;ll always be available if I
ever get a new laptop.</p>

<h2><code>ssh</code></h2>

<p>My hostname on every machine I ssh to for school is <code>jezimmer</code>, but there are
countless servers I can ssh into (7 for <code>unix.andrew.cmu.edu</code>, 99+ for
<code>ghc*.ghc.andrew.cmu.edu</code>, 10 for 15-213, the list goes on). <a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/host-Jacobs-MacBook-Air/ssh/config#L7-L19">These
lines</a> enable me to ssh to any of those machines with just a
hostname, and the username is assumed to be <code>jezimmer</code>.</p>

<h2>iTerm2</h2>

<p>There&rsquo;s not much to show for this one, but in Preferences > General of iTerm2,
you can opt to load your iTerm2 preferences from a specific location. I&rsquo;ve set
this to <code>/Users/jake/.dotfiles</code>, which means that my iTerm2 settings are always
written to my <code>.dotfiles/</code> directory. If I ever make changes to iTerm2, they get
propagated as changes that Git picks up on and which I subsequently check into
Git history.</p>

<h2>Vim</h2>

<p>I&rsquo;m in love with my Vim setup. If you&rsquo;re looking for help getting started
configuring Vim, you should checkout the <a href="https://github.com/jez/vim-as-an-ide">Vim plugins workshop I put
together</a>, which gets you started with a &ldquo;fully-configured&rdquo; Vim
setup. Once you think you&rsquo;ve &ldquo;mastered&rdquo; that and you&rsquo;re ready for more, here are
a list of things I&rsquo;m proud of in my <code>.vimrc</code>:</p>

<ul>
<li><a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/vimrc#L65-L67"><code>set breakindent</code></a> A feature new in Vim 7.4, this allows you to
align wrapped text at the same indentation level as the preceding text.</li>
<li><a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/vimrc#L100-L106">these mappings</a>, which let me move around (move up and down in
particular) in long lines just as if they were short.</li>
<li><a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/vimrc#L90-L91">this mapping</a>, which lets me open Vim help pages in new tabs</li>
</ul>


<h2>Other</h2>

<p>I&rsquo;ve only highlighted a fraction of my configuration files, but I think I&rsquo;ve
managed to capture a good portion of them. If you thought that one of these
snippets was useful, are having trouble getting something to work, or have
something interesting to share, leave a comment below!</p>

<hr />

<p><br></p>

<h3>Jake on the Web</h3>

<p><a class="image-link" href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on
<a href="https://www.github.com/jez/">GitHub</a> or paying a visit to <a href="https://jez.io/">my homepage</a>. If this post was about one of
my open source projects, make sure to star it on GitHub! I love hearing what
people think, so feel free to comment, open an issue, or send me an email.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With RCM]]></title>
    <link href="https://blog.jez.io/2015/03/09/getting-started-with-rcm/"/>
    <updated>2015-03-09T16:30:39-07:00</updated>
    <id>https://blog.jez.io/2015/03/09/getting-started-with-rcm</id>
    <content type="html"><![CDATA[<p>I recently rewrote most of my dotfiles to clean them up and in the process
decided to take a renewed look at using <a href="https://robots.thoughtbot.com/rcm-for-rc-files-in-dotfiles-repos">rcm</a>&rsquo;s array of features to manage
syncing my dotfiles across multiple servers and hosts.</p>

<!-- more -->


<h2>Installation and Usage</h2>

<p>Thoughbot has written some excellent documentation for rcm, including a whole
set of man pages and a <a href="https://robots.thoughtbot.com/rcm-for-rc-files-in-dotfiles-repos">nice blog post</a> that runs through its core
features. As far as <a href="https://github.com/thoughtbot/rcm#installation">installation</a> goes, there&rsquo;s a package for just
about every platform on top of the standard autotools, so you should have no
problem getting up and running.</p>

<p>Rather than just run through the same stuff, I&rsquo;m going to walk through some of
the places where my experience varied from the examples given in the
documentation.</p>

<h2>Background</h2>

<p>I&rsquo;ve already been using rcm for a while now, though my setup was a little
non-standard as far as rcm installations go; instead of using the system built
into rcm for managing host-specific configuration files, I had <a href="https://github.com/jez/dotfiles/blob/6beee7eb426a21102da174f65d1a706bedc28b57/zshrc#L135-L204">huge case
statements</a> littering my config files. After starting to get a little
traffic for <a href="https://github.com/jez/vim-as-an-ide">some of my other configuration work</a>, I decided it was time to
make my config files something worth looking at.</p>

<p>Thus, given the state of my old files, much of my effort this time around
were spent refactoring my current setup to increase modularity and get it to
integrate nicely with rcm. I think that this use case is a little
under-documented and lacking in first-class support in the suite, so I&rsquo;ll talk
about how I got around this later on. That being said, if you&rsquo;re coming from no
dotfiles management software or are interested in trying out something new,
you&rsquo;ll have a much smoother experience.</p>

<h2>Goals</h2>

<p>My two goals for the refactor that I mentioned above were to</p>

<ul>
<li>make everything modular, so that people could more easily pick and choose
pieces from my dotfiles to include in theirs, and</li>
<li>make it easy to swap around host-specific configurations.</li>
</ul>


<p>While the work required to achieve this setup was a bit hairy, maintaining it
should be straightforward from now on.</p>

<p>If you haven&rsquo;t taken a second to peruse some of the <a href="http://thoughtbot.github.io/rcm/rcm.7.html">documentation</a> yet,
it probably wouldn&rsquo;t hurt to do so now. It&rsquo;s about to get technical.</p>

<h2>Host-independent files</h2>

<p>I started this time around with the host independent files, because they
required no real refactoring. Linking these up was a simple matter of running
commands that looked like</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkrc &lt;rc-file&gt;</span></code></pre></td></tr></table></div></figure>


<p>I ran this on files like my <code>.vimrc</code>, <code>.tmux.conf</code>, <code>.ackrc</code>, and other simple
files. I also handled my <code>.vim/</code> folder in this step, but slightly differently.
The default rcm behavior is to create symlinks when given a single file, and to
recursively descend and create symlinks when given a folder. For folders like my
<code>.vim/</code> folder, which can get pretty large pretty quickly, I used the <code>-S</code>
option to force rcm to symlink the directory:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkrc -S .vim/</span></code></pre></td></tr></table></div></figure>


<p>The first time I ran <code>mkrc</code>, it automatically created a folder called
<code>~/.dotfiles</code>, which is where all my dotfiles files will live from now on. Then,
every time <code>mkrc</code> is run, it moves the file into this folder and creates a
symbolic link where it use to exist. I always thought this was a curious name
for the program, &ldquo;make rc file&rdquo;, but really what I just mentioned is all there
is to it: <code>mkrc</code> <em>moves</em> and <em>links</em> an rc file.</p>

<p><a class="image-link" href="https://blog.jez.io/images/mkrc-host-independent.png"><img src="https://blog.jez.io/images/mkrc-host-independent.png"></a></p>

<p>Above you can see the results of this first step on a couple files: my <code>.vimrc</code>
and my <code>.vim/</code> folder. You can see that where there once were a file and a
folder, there are now two symbolic links, which point to the moved files inside
of my <code>.dotfiles/</code> directory.</p>

<h2>Host-dependent files</h2>

<p>Next up are obviously the host-dependent files, though we can split this
category once more based on which need to be refactored.</p>

<h3>Just Add Water</h3>

<p>For my host-dependent
files that didn&rsquo;t need to be refactored, like my <code>.ssh/config</code> and my
<code>.gitconfig</code> (files which, by the way, I wasn&rsquo;t tracking at all before this
rewrite), I just ran the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkrc -o .gitconfig</span></code></pre></td></tr></table></div></figure>


<p>When I&rsquo;m on my Mac, this goes through the same move + link procedure described
above, but it moves the file into the <code>~/.dotfiles/host-Jacobs-MacBook-Air/</code>
subfolder.</p>

<h3>Refactor and Profit</h3>

<p>Finally, I dealt with the piece of my dotfiles that was sorely lacking a
refactor: my <code>.zshrc</code>. For this, I took a cue from <a href="https://github.com/holman/dotfiles">Zach Holman&rsquo;s
dotfiles</a> organization and broke up my zshrc into it&rsquo;s components, like
<code>aliases.sh</code>, <code>colors.sh</code>, and more. Most important of these components was
the <code>host.sh</code> file, which contained all the host-specific configurations that I
was doing. Whenever I deploy my <code>.zshrc</code> on a new host now, rcm will put a
<code>host.sh</code> file in a location where my <code>.zshrc</code> knows where to look, but the
contents of that file change depending on the host. Getting the many <code>host.sh</code>
files in place is where I think mkrc&rsquo;s power can be improved.</p>

<p>The <code>mkrc -o</code> command takes an option that lets you specify a host explicitly
(<code>-B &lt;hostname&gt;</code>) rather than calculating it with the <code>hostname</code> command, but it doesn&rsquo;t
let you specify that you&rsquo;d just like to move the file, rather than move and link
it. As such, when I was refactoring, I created a bunch of files:
<code>host-Jacobs-MacBook-Air.sh</code>, <code>host-ghost.zimmerman.io.sh</code>, etc., creating one
<code>host-&lt;something&gt;.sh</code> file for each host that I needed to deploy my dotfiles to.
Then, for each of these files, I</p>

<ul>
<li>ran <code>mkrc -o -B &lt;hostname&gt; host-&lt;hostname&gt;.sh</code></li>
<li>removed the link created by <code>mkrc</code> (I skipped this step the last time around,
when I had just linked the correct <code>host.sh</code> file for the host I was working
on)</li>
<li>renamed the file that rcm created in the <code>.dotfiles/host-&lt;hostname&gt;/</code> folder
to just <code>host.sh</code>.</li>
</ul>


<p>Since there were a bunch of different host-specific files in my case, this
process was a little tedious. It&rsquo;d have been nice if there was an option to
automate my use case, but I&rsquo;m not sure if it&rsquo;s common enough to warrant
the additional complexity, especially considering it&rsquo;s a one-time cost.</p>

<p>In any case, with all this in place, I had finally met my two goals: everything
was modular, and host-specific configurations were clearly defined and easily
deployable.</p>

<h2>Up Next</h2>

<p>If you&rsquo;re reading this and wondering where to go next, you could:</p>

<ul>
<li>take a dive into the rcm documentation to get started applying it to your own
set of dotfiles</li>
<li>browse my <a href="https://github.com/jez/dotfiles">new-and-improved dotfiles</a> repository on GitHub</li>
<li>wait for an upcoming post where I point out some of the noteworthy things I&rsquo;ve
added in my dotfiles</li>
</ul>


<p>If you&rsquo;re using rcm or trying to get started with it but are having issues, feel
free to drop questions in the comments and I&rsquo;ll see if I can&rsquo;t help sort things
out.</p>

<hr />

<p><br></p>

<h3>Jake on the Web</h3>

<p><a class="image-link" href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on
<a href="https://www.github.com/jez/">GitHub</a> or paying a visit to <a href="https://jez.io/">my homepage</a>. If this post was about one of
my open source projects, make sure to star it on GitHub! I love hearing what
people think, so feel free to comment, open an issue, or send me an email.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim as an IDE]]></title>
    <link href="https://blog.jez.io/2015/03/02/vim-as-an-ide/"/>
    <updated>2015-03-02T21:01:19-08:00</updated>
    <id>https://blog.jez.io/2015/03/02/vim-as-an-ide</id>
    <content type="html"><![CDATA[<p>I took some screenshots to accompany my <a href="https://github.com/jez/vim-as-an-ide">Vim as an IDE</a> repo on GitHub.
This is by no means a complete walkthrough! It&rsquo;s just a reference for those who
are curious if they installed everything correctly. This is what my system looks
like for me after each step.</p>

<!-- more -->


<h2>1. <a href="https://github.com/jez/vim-as-an-ide/commit/0673f0c">Create vimrc file</a></h2>

<p>This is what Vim should look like immediately after opening it:</p>

<p><a href="https://blog.jez.io/images/vim-as-an-ide/shot-01.png"><img src="https://blog.jez.io/images/vim-as-an-ide/shot-01.png" alt="Vim as an IDE" /></a></p>

<p>And right after adding the two lines:</p>

<p><a href="https://blog.jez.io/images/vim-as-an-ide/shot-02.png"><img src="https://blog.jez.io/images/vim-as-an-ide/shot-02.png" alt="Vim as an IDE" /></a></p>

<h2>2. <a href="https://github.com/jez/vim-as-an-ide/commit/dff7da3">Add some general settings</a></h2>

<p>After you add these settings, your <code>~/.vimrc</code> should look like this when opened
in Vim:</p>

<p><a href="https://blog.jez.io/images/vim-as-an-ide/shot-03_1.png"><img src="https://blog.jez.io/images/vim-as-an-ide/shot-03_1.png" alt="Vim as an IDE" /></a></p>

<h2>3. <a href="https://github.com/jez/vim-as-an-ide/commit/fc77b04">Enable the mouse</a></h2>

<p>To enable the mouse, you&rsquo;ll have to figure out where the appropriate setting is
in your terminal emulator. Here&rsquo;s a screenshot of where it is in iTerm2 on OS X.</p>

<p><a href="https://blog.jez.io/images/vim-as-an-ide/shot-03.png"><img src="https://blog.jez.io/images/vim-as-an-ide/shot-03.png" alt="Vim as an IDE" /></a></p>

<h2>4. <a href="https://github.com/jez/vim-as-an-ide/commit/1186be2">Set up Vundle boilerplate</a></h2>

<p>If you add the changes introduced at this step before installing Vundle, you&rsquo;ll
get an error that looks like this:</p>

<p><a href="https://blog.jez.io/images/vim-as-an-ide/shot-04.png"><img src="https://blog.jez.io/images/vim-as-an-ide/shot-04.png" alt="Vim as an IDE" /></a></p>

<p>Otherwise, this should be the result of running <code>vim +PluginInstall</code> to install
Vundle for the first time:</p>

<p><a href="https://blog.jez.io/images/vim-as-an-ide/shot-05.png"><img src="https://blog.jez.io/images/vim-as-an-ide/shot-05.png" alt="Vim as an IDE" /></a></p>

<p>Remember, you can use <code>:qall</code> to quit Vim after installing plugins.</p>

<h2>5. <a href="https://github.com/jez/vim-as-an-ide/commit/457f2e2">Make Vim look good</a></h2>

<p>Your experience might diverge a little bit from these screenshots if you choose
a different colorscheme because I&rsquo;ll assume you&rsquo;re setting everything up using
Solarized Dark. If you&rsquo;re on a Mac and you&rsquo;ve imported the iTerm2 colorschemes,
you should be able to find the Solarized Dark theme here:</p>

<p><a href="https://blog.jez.io/images/vim-as-an-ide/shot-06.png"><img src="https://blog.jez.io/images/vim-as-an-ide/shot-06.png" alt="Vim as an IDE" /></a></p>

<p>Making that change should make Vim turn these colors:</p>

<p><a href="https://blog.jez.io/images/vim-as-an-ide/shot-07.png"><img src="https://blog.jez.io/images/vim-as-an-ide/shot-07.png" alt="Vim as an IDE" /></a></p>

<p>Next up is changing your font to a Powerline patched font. If you downloaded and
installed Menlo for Powerline correctly, you should be able to set it using this
panel in the preferences:</p>

<p><a href="https://blog.jez.io/images/vim-as-an-ide/shot-08.png"><img src="https://blog.jez.io/images/vim-as-an-ide/shot-08.png" alt="Vim as an IDE" /></a></p>

<p>Finally, running <code>vim +PluginInstall</code> to install the Solarized Vim colorscheme
and vim-airline:</p>

<p><a href="https://blog.jez.io/images/vim-as-an-ide/shot-09.png"><img src="https://blog.jez.io/images/vim-as-an-ide/shot-09.png" alt="Vim as an IDE" /></a></p>

<p>Here&rsquo;s what the Vim solarized plugind does to our <code>~/.vimrc</code>:</p>

<p><a href="https://blog.jez.io/images/vim-as-an-ide/shot-10.png"><img src="https://blog.jez.io/images/vim-as-an-ide/shot-10.png" alt="Vim as an IDE" /></a></p>

<p>If you chose to install a Powerline patched font, you can let vim-airline use
cooler arrows by uncommenting the line highlighted in this screenshot above, to
make Vim look like this:</p>

<p><a href="https://blog.jez.io/images/vim-as-an-ide/shot-11.png"><img src="https://blog.jez.io/images/vim-as-an-ide/shot-11.png" alt="Vim as an IDE" /></a></p>

<h2>6. <a href="https://github.com/jez/vim-as-an-ide/commit/b7ff90c">Plugins NERDTree and NERDTree Tabs</a></h2>

<p>This will be the last time that I demonstrate running <code>vim +PluginInstall</code>,
because they&rsquo;ll all basically look the same from here on out:</p>

<p><a href="https://blog.jez.io/images/vim-as-an-ide/shot-12.png"><img src="https://blog.jez.io/images/vim-as-an-ide/shot-12.png" alt="Vim as an IDE" /></a></p>

<p>Once you&rsquo;ve installed NERDTree and NERDTree Tabs (and added the settings I
listed for them), you should be able to type <code>\t</code> to bring up something that
looks like this:</p>

<p><a href="https://blog.jez.io/images/vim-as-an-ide/shot-13.png"><img src="https://blog.jez.io/images/vim-as-an-ide/shot-13.png" alt="Vim as an IDE" /></a></p>

<h2>7. <a href="https://github.com/jez/vim-as-an-ide/commit/144f979">Plugin Syntastic</a></h2>

<p>Once you&rsquo;ve installed Syntastic, it should syntax highlight your errors by
displaying little marks next to the offending lines:</p>

<p><a href="https://blog.jez.io/images/vim-as-an-ide/shot-14.png"><img src="https://blog.jez.io/images/vim-as-an-ide/shot-14.png" alt="Vim as an IDE" /></a></p>

<p>You can see that we&rsquo;ve forgotten a semi-colon, and Syntastic is pointing that
out for us.</p>

<p>As I was making these screenshots, I realized that I forgot to include a setting
in the right place. It&rsquo;s fine if you work through the whole workshop, but if you
pick and choose things, namely if you don&rsquo;t follow the steps for <code>vim-gitgutter</code>
eventually, you&rsquo;ll end up with this weird highlighting in the sign column. To
disable this highlighting, you can either wait until the <code>vim-gitgutter</code> step
(coming right up in 4 steps), or you can run this command (the one at the bottom
of the screenshot):</p>

<p><a href="https://blog.jez.io/images/vim-as-an-ide/shot-15.png"><img src="https://blog.jez.io/images/vim-as-an-ide/shot-15.png" alt="Vim as an IDE" /></a></p>

<p>To make the change permanent, you&rsquo;ll have to add that line (<code>:hi clear
SignColumn</code>) to your <code>~/.vimrc</code>.</p>

<h2>8. <a href="https://github.com/jez/vim-as-an-ide/commit/fd2c49c">Plugins vim-easytags and tagbar</a></h2>

<p>After this step, you should be able to bring up a split pane view that shows
your functions, variables, and other identifiers by pressing <code>\b</code>:</p>

<p><a href="https://blog.jez.io/images/vim-as-an-ide/shot-16.png"><img src="https://blog.jez.io/images/vim-as-an-ide/shot-16.png" alt="Vim as an IDE" /></a></p>

<p>If you enabled mouse reporting, you should be able to click on the things in the
pane and jump to the appropriate place in the file. I&rsquo;d strongly recommend that
you read the help for all the keybindings and actions you can use with it.</p>

<h2>9. <a href="https://github.com/jez/vim-as-an-ide/commit/80db74f">Plugin ctrlp</a></h2>

<p>When <code>CtrlP</code> is installed, you can press <code>Ctrl + P</code> to bring up a list of files.
As you type, the list will be filtered to only those that &ldquo;fuzzy match&rdquo; what
you&rsquo;ve typed in. As you can see, I typed in <code>mc</code>, which matched <code>vimrc.vim</code> and
<code>main.c</code>:</p>

<p><a href="https://blog.jez.io/images/vim-as-an-ide/shot-17.png"><img src="https://blog.jez.io/images/vim-as-an-ide/shot-17.png" alt="Vim as an IDE" /></a></p>

<h2>10. <a href="https://github.com/jez/vim-as-an-ide/commit/8d4223f">Plugin A.vim</a></h2>

<p>This plugin introduces a number of commands that you can read in the
documentation that enable opening &ldquo;alternate&rdquo; files, like C/C++ header files,
really quickly. I&rsquo;ve run <code>:AV</code> here as an example of one of the commands it
installs, which opens the alternate file in a vertical split pane.</p>

<p><a href="https://blog.jez.io/images/vim-as-an-ide/shot-18.png"><img src="https://blog.jez.io/images/vim-as-an-ide/shot-18.png" alt="Vim as an IDE" /></a></p>

<h2>11. <a href="https://github.com/jez/vim-as-an-ide/commit/1e5757e">Plugins vim-gitgutter and vim-fugitive</a></h2>

<p><code>vim-gitgutter</code> is really handy: it shows you a <code>+</code>, <code>-</code>, or <code>~</code> next to lines
that have been added, removed, or modified. This is good for both identifying
the pieces of code that have changed while you&rsquo;re working on a file as well as
reminding yourself that you have changes that need to be commited.</p>

<p><a href="https://blog.jez.io/images/vim-as-an-ide/shot-19.png"><img src="https://blog.jez.io/images/vim-as-an-ide/shot-19.png" alt="Vim as an IDE" /></a></p>

<p>Speaking of committing files, <code>vim-fugitive</code> lets you make Git commits from
right within Vim. Simply run <code>:Gcommit</code> to bring up a split pane where you can
craft your commit message:</p>

<p><a href="https://blog.jez.io/images/vim-as-an-ide/shot-20.png"><img src="https://blog.jez.io/images/vim-as-an-ide/shot-20.png" alt="Vim as an IDE" /></a></p>

<p><code>vim-fugitive</code> can do much more than just make commits. Be sure to read the
appropriate documentation to figure out what sorts of cool things you can do!</p>

<h2>12. <a href="https://github.com/jez/vim-as-an-ide/commit/2fe0507">Plugin delimitMate</a></h2>

<p>Finally, using <code>delimitMate</code> you should be able to type an opening delimiter and
have the closing one be inserted automatically. Here&rsquo;s an example on
parentheses:</p>

<p><a href="https://blog.jez.io/images/vim-as-an-ide/shot-21.png"><img src="https://blog.jez.io/images/vim-as-an-ide/shot-21.png" alt="Vim as an IDE" /></a></p>

<h2>13. <a href="https://github.com/jez/vim-as-an-ide/commit/b185e9f">Plugin vim-superman</a></h2>

<p>Once you&rsquo;ve added the appropriate function to your shell initialization file
(<code>~/.bashrc</code>, etc.), you should be able to run <code>vman &lt;command&gt;</code> to open man
pages. Here&rsquo;s an example on <code>vman 3 printf</code>:</p>

<p><a href="https://blog.jez.io/images/printf.3.png"><img src="https://blog.jez.io/images/printf.3.png" alt="Vim as an IDE" /></a></p>

<h2>14. <a href="https://github.com/jez/vim-as-an-ide/commit/44f5225">Plugin vim-tmux-navigator</a></h2>

<p>There&rsquo;s not much to show here, as this step is mostly just introducing
keybindings. If you use <code>tmux</code>, make sure to copy the appropriate snippet into
your <code>~/.tmux.conf</code> to be able to jump between tmux and Vim splits with no added
effort.</p>

<h2>15. <a href="https://github.com/jez/vim-as-an-ide/commit/5ba534e">Syntax plugins</a></h2>

<p>No screenshots again. What syntax highlighting plugins you end up installing is
largely up to you.</p>

<h2>16. <a href="https://github.com/jez/vim-as-an-ide/commit/9089a95">Add all the extra plugins that I use</a></h2>

<p>For these plugins, be sure to check the documentation. Most of them have
screenshots that show what they look like when installed and configured
correctly.</p>

<h2>Wrap Up</h2>

<p>That&rsquo;s it! I can only take you so far in making your Vim awesome. You have to
take yourself the rest of the way by investing a little bit of effort into
reading the documentation for the plugins you think could be useful to you so
that you can fully utilize them. Be sure to comment on the commits with
questions if you&rsquo;re stuck or are wondering why your setup doesn&rsquo;t look similar
to one of the above!</p>

<hr />

<p><br></p>

<h3>Jake on the Web</h3>

<p><a class="image-link" href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on
<a href="https://www.github.com/jez/">GitHub</a> or paying a visit to <a href="https://jez.io/">my homepage</a>. If this post was about one of
my open source projects, make sure to star it on GitHub! I love hearing what
people think, so feel free to comment, open an issue, or send me an email.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New GitHub Username]]></title>
    <link href="https://blog.jez.io/2015/02/03/new-github-username/"/>
    <updated>2015-02-03T01:01:04-08:00</updated>
    <id>https://blog.jez.io/2015/02/03/new-github-username</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve changed my GitHub username from Z1MM32M4N to jez (hopefully it&rsquo;ll be a
little easier to type now!). Make sure you update any remote URLs for repos of
mine that you&rsquo;ve cloned.</p>

<!-- more -->


<h2>Updating your Git remotes</h2>

<p>If you&rsquo;ve cloned one of my repositories, you can update it&rsquo;s URL by running</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git remote -v
</span></code></pre></td></tr></table></div></figure>


<p>to check the current remote URL, which should look something like
<code>https://github.com/Z1MM32M4N/&lt;repo name&gt;</code>. Then, you can run</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git remote <span class="nb">set</span>-url origin https://github.com/jez/&lt;repo name&gt;
</span></code></pre></td></tr></table></div></figure>


<p>to actually change the URL.</p>

<p>Because of the way that GitHub handles username changes, you should be able to
continue using the current URLs at least for the time being, but any time you
pull you&rsquo;ll get a message from GitHub asking to update the remote URLs.</p>

<p>I tried to update all links referencing Z1MM32M4N to use the new username, but
I&rsquo;m sure I&rsquo;ve missed a few. If you find a &ldquo;broken&rdquo; link, shoot me a message
letting me know!</p>

<hr />

<p><br></p>

<h3>Jake on the Web</h3>

<p><a class="image-link" href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on
<a href="https://www.github.com/jez/">GitHub</a> or paying a visit to <a href="https://jez.io/">my homepage</a>. If this post was about one of
my open source projects, make sure to star it on GitHub! I love hearing what
people think, so feel free to comment, open an issue, or send me an email.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mastering Git Log for Collaboration]]></title>
    <link href="https://blog.jez.io/2015/01/16/mastering-git-log-for-collaboration/"/>
    <updated>2015-01-16T17:57:01-08:00</updated>
    <id>https://blog.jez.io/2015/01/16/mastering-git-log-for-collaboration</id>
    <content type="html"><![CDATA[<p>Git is an incredibly powerful platform for collaboration. The ability to create
light-weight branches as well as push to and pull from multiple remote repos is
the foundation of this power. Learning to harness the <code>git log</code> command will
help with visualizing all the information that supports these features, refining
and invigorating your current workflows.</p>

<!-- more -->


<h2>Learn Git Branching</h2>

<p>Obviously, to take full advantage of the collaborative features of Git, you
first have to learn how to use Git branching. There&rsquo;s an <a href="http://pcottle.github.io/learnGitBranching/">excellent interactive
tutorial</a> that instructs by converting the Git commands you
run into fancy web animations. If you have a basic understanding of Git but have
always wanted to learn about some of its more powerful features, this is the
best tutorial out there. For a taste of how it works, there&rsquo;s also a
<a href="http://pcottle.github.io/learnGitBranching/?demo">non-interactive demo</a> that features the animations which make this
tutorial so well-designed.</p>

<p>After I ran through this tutorial, I felt for the first time like I <em>really</em>
knew Git. Unfortunately, being a visual learner, I struggled when trying to
apply the same abstractions to actual git repositories. Shortly thereafter, I
discovered that the <code>git log</code> command actually has features to replicate many of
the same visualizations, but from right within the terminal!</p>

<h2><code>git log</code></h2>

<p>The following is a set of shell aliases that let you run <code>git log</code> with a
lengthy set of flags culminating in some pretty awesome Git logs. I&rsquo;m going to
leave a discussion of what the individual flags do to the man pages and just
skip straight to the good part. Feel free to copy and paste these into your
<code>~/.bashrc</code>, <code>~/.zshrc</code>, or similar file.</p>

<figure class='code'><figcaption><span>pretty git log aliases</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># pretty Git log</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">gl</span><span class="o">=</span><span class="s1">&#39;git log --graph --pretty=&quot;%C(bold green)%h%Creset%C(auto)%d%Creset %s&quot;&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># pretty Git log, all references</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">gll</span><span class="o">=</span><span class="s1">&#39;gl --all&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># pretty Git log, show authors</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">gla</span><span class="o">=</span><span class="s1">&#39;git log --graph --pretty=&quot;%C(bold green)%h%Creset %C(yellow)%an%Creset%C(auto)%d%Creset %s&quot;&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># pretty Git log, all references, show authors</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">glla</span><span class="o">=</span><span class="s1">&#39;gla --all&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, there are four aliases, and each does something a little
different. The first, <code>gl</code>, just shows the graph for the current branch. <code>gll</code>
shows the graph for <em>all</em> branches, including those which may have diverged from
the current branch. Then there&rsquo;s a variation on each of these, <code>gla</code> and
<code>glla</code>, which add author information to the logs produced by their
companion.</p>

<p>On top of it all, I&rsquo;ve customized the colors to work especially nicely if you&rsquo;re
using the <a href="ethanschoonover.com/solarized">Solarized</a> color scheme in your terminal. If you don&rsquo;t do
anything but copy the above aliases, the only thing that will look different
from the screenshots below is the text between the parentheses, which will
instead all be the same color. To color these the same as below, add this text to
the end of your <code>~/.gitconfig</code> file:</p>

<figure class='code'><figcaption><span>Global Git configuration settings</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[color "decorate"]
</span><span class='line'>  head = bold white
</span><span class='line'>  branch = bold magenta
</span><span class='line'>  remotebranch = blue
</span><span class='line'>  tag = bold red</span></code></pre></td></tr></table></div></figure>


<p>Of course, feel free to tinker with these colors to your liking.</p>

<h2>Screenshots</h2>

<p>Here are an abundant number of screenshots showing what the commands look like
for the <a href="https://github.com/ScottyLabs/tartanhacks">TartanHacks website</a> and the <a href="https://github.com/autolab/Autolab">Autolab Project</a>.</p>

<h3>gl</h3>

<p><a class="image-link" href="https://blog.jez.io/images/gl-tartanhacks.png"><img src="https://blog.jez.io/images/gl-tartanhacks.png"></a></p>

<p>Even when just using <code>gl</code>, you&rsquo;ll be able to see all branches that lie further
down on the tree. For example, from the <code>add_gitignore</code> branch we can see the
<code>origin/gh-pages</code> branch because it&rsquo;s along the same path in history.</p>

<h3>gll</h3>

<p><a class="image-link" href="https://blog.jez.io/images/gll-tartanhacks.png"><img src="https://blog.jez.io/images/gll-tartanhacks.png"></a></p>

<p>Here we see that multiple branches have diverged from <code>origin/gh-pages</code>; both
<code>add_gitignore</code> and <code>fix_seo_and_readability</code> share <code>origin/gh-pages</code> as a
common ancestor, but neither have anything in common with the other, which is
why <code>fix_seo_and_readability</code> only showed up once we used <code>gll</code>.</p>

<h3>gla</h3>

<p><a class="image-link" href="https://blog.jez.io/images/gla-tartanhacks.png"><img src="https://blog.jez.io/images/gla-tartanhacks.png"></a></p>

<p>Same as <code>gl</code> above, but with author information!</p>

<h3>glla</h3>

<p><a class="image-link" href="https://blog.jez.io/images/glla-tartanhacks.png"><img src="https://blog.jez.io/images/glla-tartanhacks.png"></a></p>

<p>Same as <code>gll</code> above, but again with author information!</p>

<hr />

<p>Here are the same four examples, but for the <a href="https://github.com/autolab/Autolab">Autolab</a> repo. It&rsquo;s a
little more involved because more people are working on it simultaneously. For
projects like this, which have several open pull requests and feature branches,
these aliases really shine.</p>

<h3>gl</h3>

<p><a class="image-link" href="https://blog.jez.io/images/gl-autolab.png"><img src="https://blog.jez.io/images/gl-autolab.png"></a></p>

<h3>gll</h3>

<p><a class="image-link" href="https://blog.jez.io/images/gll-autolab.png"><img src="https://blog.jez.io/images/gll-autolab.png"></a></p>

<h3>gla</h3>

<p><a class="image-link" href="https://blog.jez.io/images/gla-autolab.png"><img src="https://blog.jez.io/images/gla-autolab.png"></a></p>

<h3>glla</h3>

<p><a class="image-link" href="https://blog.jez.io/images/glla-autolab.png"><img src="https://blog.jez.io/images/glla-autolab.png"></a></p>

<h2>Dotfiles</h2>

<p>If you&rsquo;re hungry for more handy Git aliases or just some general ways to beef up
your terminal experience, you can find these four aliases and more in the
<a href="https://github.com/jez/dotfiles/blob/master/zshrc">zshrc</a> in my <a href="https://github.com/jez/dotfiles">dotfiles repository</a> on GitHub.</p>

<h2>Update</h2>

<p>After testing out these aliases on various environments, I discovered that one
of the features I was using in the pretty format (the one that colors remotes
and branches, <code>%C(auto)</code>) is not available in older versions of Git. These are
the revised versions of the above aliases that I use on older machines:</p>

<figure class='code'><figcaption><span>Compatible Git log aliases</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># pretty Git log</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">gl</span><span class="o">=</span><span class="s1">&#39;git log --graph --pretty=&quot;%C(bold green)%h%Creset%C(blue)%d%Creset %s&quot;&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># pretty Git log, all references</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">gll</span><span class="o">=</span><span class="s1">&#39;gl --all&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># pretty Git log, show authors</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">gla</span><span class="o">=</span><span class="s1">&#39;git log --graph --pretty=&quot;%C(bold green)%h%Creset %C(yellow)%an%Creset%C(blue)%d%Creset %s&quot;&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># pretty Git log, all references, show authors</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">glla</span><span class="o">=</span><span class="s1">&#39;gla --all&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The only real difference is that all the remotes, branches, and tags are blue,
instead of being configurable in you <code>~/.gitconfig</code> file.</p>

<hr />

<p><br></p>

<h3>Jake on the Web</h3>

<p><a class="image-link" href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on
<a href="https://www.github.com/jez/">GitHub</a> or paying a visit to <a href="https://jez.io/">my homepage</a>. If this post was about one of
my open source projects, make sure to star it on GitHub! I love hearing what
people think, so feel free to comment, open an issue, or send me an email.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The LaTeX Homework Document Class]]></title>
    <link href="https://blog.jez.io/2015/01/10/the-latex-homework-document-class/"/>
    <updated>2015-01-10T15:00:00-08:00</updated>
    <id>https://blog.jez.io/2015/01/10/the-latex-homework-document-class</id>
    <content type="html"><![CDATA[<p>There are LaTeX document classes for typesetting books, articles, exams,
presentations, and more. Now, there&rsquo;s one for homework assignments, too.</p>

<!-- more -->


<h2><a href="https://github.com/jez/latex-homework-class">Source</a></h2>

<p>Check out and download the source <a href="https://github.com/jez/latex-homework-class">on GitHub</a>.</p>

<h2>What</h2>

<p>This is a LaTeX document class. That means you use it with
<code>\documentclass{homework}</code> at the top of the document. It provides a document
layout and some helper commands that make working with questions easy.</p>

<h2>Installation</h2>

<p>Certainly the easiest way to start using this template is to copy the .cls file
to your computer in the same directory as your LaTeX project directory.</p>

<p>A better way to install this template is to fork <a href="https://github.com/jez/latex-homework-class">the above
repository</a> and then clone that fork to a particular folder on your
computer:</p>

<figure class='code'><figcaption><span>Install</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone https://github.com/&lt;your-username&gt;/latex-hw-template
</span></code></pre></td></tr></table></div></figure>


<p>Then, whenever you need to use the template, you can copy the template wherever.
Also, if there are ever any updates, you can simply run</p>

<figure class='code'><figcaption><span>Update</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git pull
</span></code></pre></td></tr></table></div></figure>


<p>to update the template.</p>

<h3>Preferred Installation</h3>

<p>The <em>best</em> way to install this file is to <a href="https://github.com/jez/latex-solarized#installation">follow the instructions
here</a>, keeping in mind that you&rsquo;re trying to install a <code>.cls</code> file
instead of three <code>.sty</code> files.</p>

<h2>Usage</h2>

<p>See the <a href="https://github.com/jez/latex-homework-class/blob/master/homework.tex">homework.tex</a> file for an exhaustive list of usage
examples. There are also comments explaining features for which there are no
examples given.</p>

<p>The result is the following:</p>

<p><a class="image-link" href="https://blog.jez.io/images/homework-class.png"><img src="https://blog.jez.io/images/homework-class.png"></a></p>

<p>The class file also has a bunch of helper <code>\usepackage</code>s that you might want to
take a look at in <a href="https://github.com/jez/latex-homework-class/blob/master/homework.cls">homework.cls</a>.</p>

<p>For your convenience, the file <a href="https://github.com/jez/latex-homework-class/blob/master/template.tex">template.tex</a> is a nearly-empty
LaTeX file that contains the bare essentials to get started using the homework
class.</p>

<h3><code>\question</code></h3>

<p>To start a question, just type <code>\question</code>. It will add the text &ldquo;Question #&rdquo;
with a line underneath to the document. If you&rsquo;d like to change &ldquo;Question&rdquo; to
something else, use</p>

<figure class='code'><figcaption><span>Change the Question Type</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='tex'><span class='line'><span class="k">\renewcommand</span><span class="nb">{</span><span class="k">\questiontype</span><span class="nb">}{</span>Whatever You Want<span class="nb">}</span>
</span><span class='line'><span class="c">% Now questions will be titled &quot;Whatever You Want #&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Similarly, if you ever need to skip numbers, you can do</p>

<figure class='code'><figcaption><span>Non-contiguous Question Numbers</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='tex'><span class='line'><span class="k">\setcounter</span><span class="nb">{</span><span class="k">\questionCounter</span><span class="nb">}{</span>&lt;target number - 1&gt;<span class="nb">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, to skip to the 10th question, <code>&lt;target number - 1&gt;</code> = 9.</p>

<p>See <a href="https://github.com/jez/latex-homework-class/blob/master/homework.tex">homework.tex</a> for more.</p>

<h3><code>\question*</code></h3>

<p>Some classes like to give their homework questions fancy names. If this is the
case, you can use <code>\question*{The Question's Name}</code> to make a named question.</p>

<p>See <a href="https://github.com/jez/latex-homework-class/blob/master/homework.tex">homework.tex</a> for more.</p>

<h3>Question Parts</h3>

<p>Another common thing on homework assignments is to have multi-part questions. To
deal with these, use the form</p>

<figure class='code'><figcaption><span>Lettered Question Parts</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='tex'><span class='line'><span class="k">\begin</span><span class="nb">{</span>alphaparts<span class="nb">}</span>
</span><span class='line'>  <span class="k">\questionpart</span>
</span><span class='line'>    This will be part (a).
</span><span class='line'>  <span class="k">\questionpart</span>
</span><span class='line'>    This will be part (b).
</span><span class='line'><span class="k">\end</span><span class="nb">{</span>alphaparts<span class="nb">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>or</p>

<figure class='code'><figcaption><span>Numbered Question Parts</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='tex'><span class='line'><span class="k">\begin</span><span class="nb">{</span>arabicparts<span class="nb">}</span>
</span><span class='line'>  <span class="k">\questionpart</span>
</span><span class='line'>    This will be part x.1.
</span><span class='line'>  <span class="k">\questionpart</span>
</span><span class='line'>    This will be part x.2.
</span><span class='line'><span class="k">\end</span><span class="nb">{</span>arabicparts<span class="nb">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>See <a href="https://github.com/jez/latex-homework-class/blob/master/homework.tex">homework.tex</a> for more.</p>

<h3>Induction Proofs</h3>

<p>In math classes, induction proofs come up a lot, and they almost always have the
same form: base case, induction hypothesis, and induction step.</p>

<figure class='code'><figcaption><span>Induction Environment</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='tex'><span class='line'><span class="k">\begin</span><span class="nb">{</span>induction<span class="nb">}</span>
</span><span class='line'>  <span class="k">\basecase</span>
</span><span class='line'>    This is my fancy base case.
</span><span class='line'>  <span class="k">\indhyp</span>
</span><span class='line'>    Assume some claim.
</span><span class='line'>  <span class="k">\indstep</span>
</span><span class='line'>    Finish off the proof
</span><span class='line'><span class="k">\end</span><span class="nb">{</span>induction<span class="nb">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Markdown</h2>

<p>One of my favorite features of this document class is that it redefines the
<code>\section</code> macros. This means you can use tools like Markdown, which have a
concise syntax, together with a tool like <a href="http://johnmacfarlane.net/pandoc/"><code>pandoc</code></a> to convert Markdown
into LaTeX. As an example, consider that we have the Markdown:</p>

<figure class='code'><figcaption><span>my-homework.md</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#
</span><span class='line'>
</span><span class='line'>This is my first answer.
</span><span class='line'>
</span><span class='line'>#
</span><span class='line'>
</span><span class='line'>This is my next answer.
</span><span class='line'>
</span><span class='line'>$$a^2 + b^2 = c^2$$</span></code></pre></td></tr></table></div></figure>


<p>Running <code>pandoc -f markdown -t latex my-homework.md</code> will output</p>

<figure class='code'><figcaption><span>Convert markdown to LaTeX</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='tex'><span class='line'><span class="c">% $ pandoc -f markdown -t latex my-homework.md</span>
</span><span class='line'><span class="k">\section</span><span class="nb">{}</span><span class="k">\label</span><span class="nb">{</span>section<span class="nb">}</span>
</span><span class='line'>
</span><span class='line'>This is my first answer.
</span><span class='line'>
</span><span class='line'><span class="k">\section</span><span class="nb">{}</span><span class="k">\label</span><span class="nb">{</span>section-1<span class="nb">}</span>
</span><span class='line'>
</span><span class='line'>This is my next answer.
</span><span class='line'>
</span><span class='line'><span class="sb">\[</span><span class="nb">a^</span><span class="m">2</span><span class="nb"> </span><span class="o">+</span><span class="nb"> b^</span><span class="m">2</span><span class="nb"> </span><span class="o">=</span><span class="nb"> c^</span><span class="m">2</span><span class="s">\]</span>
</span></code></pre></td></tr></table></div></figure>


<p>And since <code>\section</code> is the same thing as \question, we&rsquo;re golden, and this
compiles as we&rsquo;d want it to. Throw it into the blank
<a href="https://github.com/jez/latex-homework-class/blob/master/template.tex">template.tex</a> file included in the repo, and you&rsquo;ve got yourself
a typeset homework.</p>

<h2>More</h2>

<p>I&rsquo;ve make a lot of other LaTeX-related posts. Be sure to <a href="https://blog.jez.io/categories#latex">check them out</a>
as well! My hope is that you find something that makes developing LaTeX just
that much easier.</p>

<hr />

<p><br></p>

<h3>Jake on the Web</h3>

<p><a class="image-link" href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on
<a href="https://www.github.com/jez/">GitHub</a> or paying a visit to <a href="https://jez.io/">my homepage</a>. If this post was about one of
my open source projects, make sure to star it on GitHub! I love hearing what
people think, so feel free to comment, open an issue, or send me an email.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Offline LaTeX Development - Part 2]]></title>
    <link href="https://blog.jez.io/2015/01/10/offline-latex-development-part-2/"/>
    <updated>2015-01-10T14:00:00-08:00</updated>
    <id>https://blog.jez.io/2015/01/10/offline-latex-development-part-2</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve already written about how I develop LaTeX offline in Vim using GNU Make.
Recently, though, I found a tool that implements another feature that GUI
editors had to themselves: splitting panes.</p>

<!-- more -->


<h2><a href="https://blog.jez.io/2014/10/06/offline-latex-development/">Offline LaTeX Development</a></h2>

<p>If you missed it, check out my previous post here before reading on. There&rsquo;s a
lot of handy stuff there!</p>

<h2>Split Panes</h2>

<p>Out of the box, tools like ShareLaTeX and TeXShop feature split pane editing:
you can have your LaTeX on one half of the screen and the PDF on the other.
Previously, I justified not having this feature with the reasoning that the
<code>:WV</code> binding (something I explained <a href="https://blog.jez.io/2014/10/06/offline-latex-development/">here</a>) immediately opened up the
PDF and the windows switched.</p>

<p>However, I read about a tool called <a href="http://ianyh.com/amethyst/">Amethyst</a> on Hacker News the
other day and immediately realized it&rsquo;s potential for improving my LaTeX setup.
Amethyst is a tool that strives to be a tiling window manager like xmonad for OS
X. At times it falls short of this goal, but for the most part it works really
well. Just open up two apps, like MacVim and Preview, and it&rsquo;ll show them
side-by-side with no added effort. There are also plenty of keybindings to
manipulate the window arrangements.</p>

<p>Here&rsquo;s a screenshot of what the new setup looks like:</p>

<p><a class="image-link" href="https://blog.jez.io/images/latex-amethyst.png"><img src="https://blog.jez.io/images/latex-amethyst.png"></a></p>

<p>After looking into it a little more, it looks like there are other OS X tools
for spitting the screen into two panes, like <a href="http://www.bettertouchtool.net/">BetterTouchTool</a>, though I
haven&rsquo;t actually tried any of them out.</p>

<hr />

<p><br></p>

<h3>Jake on the Web</h3>

<p><a class="image-link" href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on
<a href="https://www.github.com/jez/">GitHub</a> or paying a visit to <a href="https://jez.io/">my homepage</a>. If this post was about one of
my open source projects, make sure to star it on GitHub! I love hearing what
people think, so feel free to comment, open an issue, or send me an email.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Chrome: A Memory Hog]]></title>
    <link href="https://blog.jez.io/2014/12/29/google-chrome-a-memory-hog/"/>
    <updated>2014-12-29T15:00:00-08:00</updated>
    <id>https://blog.jez.io/2014/12/29/google-chrome-a-memory-hog</id>
    <content type="html"><![CDATA[<p>Whenever someone complains about a slow computer, the first thing I check is
how many Chrome tabs they have open. Chrome hogs memory like no other. For
users, this means Chrome is snappy and responsive, but oftentimes it comes at
the expense of crowding out other programs. To get an idea of how much memory
Chrome is really using, I wrote a quick bash oneliner.</p>

<!-- more -->


<h2>Why does Chrome Hog Memory?</h2>

<p><a href="http://mobile.extremetech.com/latest/221392-iframe-irony-adblock-plus-is-probably-the-reason-firefox-and-chrome-are-such-memory-hogs">An article posted to Hacker News</a> recently brought some light to
the question of why Chrome and Firefox suck up so much memory: Adblock Plus. The
general idea is that the excessive use of iframes in most websites today ramps
up the amount of processing that Adblock Plus has to do, driving memory usage
through the roof. For more specifics, check out the rest of of the article.</p>

<h2>The Oneliner</h2>

<p>For the impatient, here&rsquo;s the code. It uses standard Unix tools:</p>

<figure class='code'><figcaption><span>Chrome Memory Usage</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ps -ev <span class="p">|</span> grep -i chrome <span class="p">|</span> awk <span class="s1">&#39;{print $12}&#39;</span> <span class="p">|</span> awk <span class="s1">&#39;{for(i=1;i&lt;=NF;i++)s+=$i}END{print s}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pretty isn&rsquo;t it? If you want to save this as an alias for handy use, add this
line to your ~/.bashrc (or appropriate configuration file):</p>

<figure class='code'><figcaption><span>Add as an alias</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">alias </span><span class="nv">chromemem</span><span class="o">=</span><span class="s2">&quot;ps -ev | grep -i chrome | awk &#39;{print \$12}&#39; | awk &#39;{for(i=1;i&lt;=NF;i++)s+=\$i}END{print s}&#39;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>It outputs a percentage. Here&rsquo;s the alias in action:</p>

<figure class='code'><figcaption><span>Usage</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>chromemem
</span><span class='line'>60
</span></code></pre></td></tr></table></div></figure>


<h2>Explanation</h2>

<p>There&rsquo;s a lot of good stuff going on here, so let&rsquo;s take it step-by-step.</p>

<p>First, we&rsquo;ll need a program that tells us memory usage. I&rsquo;m sure there are many,
but I&rsquo;m familiar with <code>ps</code>. After checking out the man page for a few options, I
came up with <code>ps -ev</code>, to show all information about all processes. Maybe
wasteful, but it works.</p>

<figure class='code'><figcaption><span>ps -ev</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ps -ev
</span><span class='line'>  PID STAT      TIME  SL  RE PAGEIN      VSZ    RSS   LIM     TSIZ  %CPU %MEM COMMAND
</span><span class='line'> <span class="m">3473</span> S      0:54.92   <span class="m">0</span>   <span class="m">0</span>      <span class="m">0</span>  <span class="m">3579092</span> <span class="m">301244</span>     -        <span class="m">0</span>   6.7  7.2 /Applications/Google C
</span><span class='line'>  <span class="m">365</span> S      3:03.17   <span class="m">0</span>   <span class="m">0</span>      <span class="m">0</span>  <span class="m">3920732</span> <span class="m">206808</span>     -        <span class="m">0</span>   0.3  4.9 /Applications/Google C
</span><span class='line'>  <span class="m">983</span> S      1:29.23   <span class="m">0</span>   <span class="m">0</span>      <span class="m">0</span>  <span class="m">3560272</span> <span class="m">193860</span>     -        <span class="m">0</span>   0.1  4.6 /Applications/Google C
</span><span class='line'>  <span class="m">395</span> S      0:13.11   <span class="m">0</span>   <span class="m">0</span>      <span class="m">0</span>  <span class="m">2824936</span> <span class="m">141644</span>     -        <span class="m">0</span>   0.0  3.4 /Applications/Google C
</span><span class='line'>  <span class="m">422</span> S      0:27.22   <span class="m">0</span>   <span class="m">0</span>      <span class="m">0</span>  <span class="m">3345796</span> <span class="m">130796</span>     -        <span class="m">0</span>   0.0  3.1 /Applications/Google C
</span><span class='line'>  ...
</span></code></pre></td></tr></table></div></figure>


<p>Notice that there&rsquo;s a convenient column describing memory usage as a percentage
of total available memory, as well as what command is being run in that
process. Let&rsquo;s make sure that we&rsquo;re looking at only the processes running
some sort of Chrome service before totaling up the memory. We can find these
lines with <code>ps -ev | grep -i chrome</code> (the -i means case-insensitive). Due to the
way I clipped the previous sample output, nothing changes in the first five
lines, but rest assured: we&rsquo;re only looking at Chrome processes now.</p>

<p>Now it&rsquo;s time to get rid of all the other nonsense that we included with <code>ps
-ev</code>. Luckily, there&rsquo;s a handy tool called <code>awk</code> that makes parsing text by
column easy. If we want to print the 12th column (which just so happens to
contain the memory consumption!) we can do <code>awk '{print $12}'</code>:</p>

<figure class='code'><figcaption><span>ps -ev | grep -i chrome | awk &#8216;{print $12}&#8217;</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ps -ev <span class="p">|</span> grep -i chrome <span class="p">|</span> awk <span class="s1">&#39;{print $12}&#39;</span>
</span><span class='line'>7.2
</span><span class='line'>5.1
</span><span class='line'>4.6
</span><span class='line'>3.4
</span><span class='line'>3.2
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>Finally, I found myself needing a way to add up a column of numbers. A quick
Google search led me to <a href="http://stackoverflow.com/questions/2572495/read-from-file-and-add-numbers">this StackOverflow question</a>, and I picked the
<code>awk</code> solution because I knew I could just pipe the input to awk (as opposed to
having to do weird hacks to get it to work with a bash for loop):</p>

<figure class='code'><figcaption><span>Final Solution</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ps -emv <span class="p">|</span> grep -i chrome <span class="p">|</span> awk <span class="s1">&#39;{print $12}&#39;</span> <span class="p">|</span> awk <span class="s1">&#39;{for(i=1;i&lt;=NF;i++)s+=$i}END{print s}&#39;</span>
</span><span class='line'>60.4
</span></code></pre></td></tr></table></div></figure>


<p>Of course, you could change the last <code>awk</code> command to print out something
fancier like</p>

<figure class='code'><figcaption><span>Final Solution</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ps -emv <span class="p">|</span> grep -i chrome <span class="p">|</span> awk <span class="s1">&#39;{print $12}&#39;</span> <span class="p">|</span> awk <span class="s1">&#39;{for(i=1;i&lt;=NF;i++)s+=$i}END{print &quot;Chrome is using &quot;s&quot;% of total memory.&quot;}&#39;</span>
</span><span class='line'>Chrome is using 60.4% of total memory.
</span></code></pre></td></tr></table></div></figure>


<p>There you have it! Bash oneliners save the day yet again.</p>

<h2>Update</h2>

<p>After writing this article, I stopped using Ad Block Plus, and I noticed a
significant drop in Chrome&rsquo;s memory usage. Obviously, though, that came at the
cost of not blocking ads! Also, from time to time I would encounter a site that
seemed sluggish, presumably because of all the ads attempting to be loaded. My
simple solution to this was just to disable JavaScript on that page (I use an
extension called Quick JavaScript Switcher), but this wasn&rsquo;t an automated
solution.</p>

<p>Then I discovered <a href="https://github.com/gorhill/uBlock">μBlock</a>, an &ldquo;efficient blocker for Chromium and
Firefox.&rdquo; The fancy graphs on it&rsquo;s homepage convinced me to give it a shot, and
from what I can tell so far it&rsquo;s responsive and effective.</p>

<hr />

<p><br></p>

<h3>Jake on the Web</h3>

<p><a class="image-link" href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on
<a href="https://www.github.com/jez/">GitHub</a> or paying a visit to <a href="https://jez.io/">my homepage</a>. If this post was about one of
my open source projects, make sure to star it on GitHub! I love hearing what
people think, so feel free to comment, open an issue, or send me an email.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intro to Columns in HTML]]></title>
    <link href="https://blog.jez.io/2014/12/26/intro-to-columns-in-html/"/>
    <updated>2014-12-26T10:00:00-08:00</updated>
    <id>https://blog.jez.io/2014/12/26/intro-to-columns-in-html</id>
    <content type="html"><![CDATA[<p>HTML and CSS can be frustrating when first starting out. Despite all you try, nothing is in the right place. I&rsquo;ve advised more than a few friends on how to figure out this mystery and I&rsquo;ve noticed a pattern: people don&rsquo;t realize they should be using a grid.</p>

<!-- more -->


<h2>Positioning Content</h2>

<p>When something doesn&rsquo;t align correctly on the page, a natural phrase to Google is &ldquo;make div align right&rdquo; or &ldquo;move div up.&rdquo; In other media where content is positioned absolutely, like when using text boxes in Microsoft Word, these might be the right queries. With HTML &amp; CSS, though, they&rsquo;re off point. Don&rsquo;t get me wrong, there&rsquo;s definitely a time for <code>position: absolute</code>, but if this comes up when you&rsquo;re trying to make grids you&rsquo;re likely on the wrong path.</p>

<p>In HTML, the page is drawn from top to bottom, left to right. This means that your page ends up being aligned how words in a book are. Once the first word has taken up a certain amount of space, the next word starts filling up the space after it. The trick then, is knowing <em>how much</em> space the first item takes up, and how to resize it appropriately so that the second item &ldquo;falls into place.&rdquo;</p>

<h2>Blocks and Inline Elements</h2>

<p>The easiest way to explain block and inline elements is to continue our book analogy. Block elements are like titles and headings&mdash;they take up the entire page width, spanning from the left border to the right border. That&rsquo;s why if you put two headings as close as possible to each other, they&rsquo;ll still each have their own lines. There&rsquo;s no &ldquo;room&rdquo; for it to be any other way! Meanwhile, inline elements are like individual words. Where one word stops, the next one begins. A word takes up no more space than is required to size it compactly.</p>

<p>Disregarding some special cases, <em>every HTML element</em> falls into one of these two categories. Below are some examples of block elements and inline elements:</p>

<table>
<thead>
<tr>
<th style="text-align:center;"> Block </th>
<th style="text-align:center;"> Inline   </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> <code>div</code> </td>
<td style="text-align:center;"> <code>span</code>   </td>
</tr>
<tr>
<td style="text-align:center;"> <code>h1</code>  </td>
<td style="text-align:center;"> <code>a</code>      </td>
</tr>
<tr>
<td style="text-align:center;"> <code>p</code>   </td>
<td style="text-align:center;"> <code>strong</code> </td>
</tr>
<tr>
<td style="text-align:center;"> <code>ul</code>  </td>
<td style="text-align:center;"> <code>em</code>  </td>
</tr>
<tr>
<td style="text-align:center;"> <code>li</code>  </td>
<td style="text-align:center;"> <code>br</code>     </td>
</tr>
<tr>
<td style="text-align:center;"> <code>pre</code> </td>
<td style="text-align:center;"> <code>button</code> </td>
</tr>
</tbody>
</table>


<p>We know that we need to use a div to house our columns. The problem is, divs are a block elements, so they&rsquo;ll span the whole width of the page. Luckily, there&rsquo;s a relatively simple (though non-intuitive) fix to get our divs to line up.</p>

<h2>Floating Content</h2>

<p>Let&rsquo;s take a look at what we&rsquo;ve got so far. We want to have two columns, so our HTML is going to look like this:</p>

<figure class='code'><figcaption><span>HTML for two columns</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;row&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;left column&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- Your left content here --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;right column&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- Your right content here --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Straightforward enough. Knowing what we know about block elements, what if we just set the width of the columns to 50%?</p>

<figure class='code'><figcaption><span>Half-width columns</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.column</span> <span class="p">{</span>
</span><span class='line'>  <span class="c">/* arbitrary value for this example */</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="m">300px</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="m">50%</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c">/* so we can tell them appart */</span>
</span><span class='line'><span class="nc">.left</span> <span class="p">{</span> <span class="k">background</span><span class="o">:</span> <span class="nb">red</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="nc">.right</span> <span class="p">{</span> <span class="k">background</span><span class="o">:</span> <span class="nb">blue</span><span class="p">;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://codepen.io/Z1MM32M4N/pen/qENvdx?editors=110">Let&rsquo;s try it out and see what happens</a></p>

<p>Uh oh, it looks like our columns aren&rsquo;t next to each other! In fact, it looks suspciously like something we mentioned earlier: if two page headings are as close together as possible, they&rsquo;ll still be placed on their own lines. We can verify that this is the case by using the <a href="https://developer.chrome.com/devtools">Chrome dev tools</a>. Inspecting the red div, we see the culprit:</p>

<p><a class="image-link" href="https://blog.jez.io/images/left-column-margin.png"><img src="https://blog.jez.io/images/left-column-margin.png"></a></p>

<p>For those familiar with the Chrome dev tools, that yellow-orange box is Chrome&rsquo;s attempt to show us the invisible <em>margin</em> present on our div. Since divs are block elements, by default there&rsquo;s enough margin on the div to make it fill up the whole width of the page.</p>

<p>The solution, if you saw from the CodePen, is to add the property <code>float: left</code> to the columns. This essentially instructs the browser not to add that extra margin: instead of being positioned absolutely between the two sides of the screen, it should float to one side and forget about the other. This leaves room for the second column to file into place next to it.</p>

<p>Go <a href="http://codepen.io/Z1MM32M4N/pen/qENvdx?editors=110">back to the pen</a> and uncomment the relevant line. <a href="http://codepen.io/Z1MM32M4N/pen/XJKGdg?editors=110">Observe</a> that we&rsquo;ve accomplished exactly what we wanted to.</p>

<h2>Going Forward</h2>

<p>Cool, this solves the problem of having two columns! What&rsquo;s next?</p>

<ul>
<li>How would we make three columns? Four columns? Twelve columns?</li>
<li>Once we have multiple columns, how can we skip columns? (<strong>Hint</strong>: just because we have a column doesn&rsquo;t mean we have to put something in it)</li>
<li>We can add multiple rows by duplicating the outer &ldquo;row&rdquo; div.

<ul>
<li>What if we want two 33%-width columns in the first row, but one 33%-width column in the second row? (This is actually a good one to work through. You might want to look into the <code>clear: both</code> CSS property)</li>
</ul>
</li>
<li>The <code>border-left</code> and <code>border-right</code> CSS properties allow us to add a border to a div. We can even use <em>fancy CSS queries</em> (see below) to only add a border in between columns. But if we add a border, the columns overflow onto their own rows! Can you fix this?

<ul>
<li><strong>Warning</strong>: this one is the hardest. You will want to look into <code>box-sizing: border-box</code> and the &ldquo;CSS box model&rdquo;</li>
</ul>
</li>
</ul>


<p>Services like <a href="http://codepen.io/">CodePen</a> and <a href="http://jsfiddle.net/">JSFiddle</a> are excellent tools for trying out little experiments like this. I encourage you to actually tinker around with the <a href="http://codepen.io/Z1MM32M4N/pen/XJKGdg?editors=110">starter code from before</a> to see how you can answer all of these small questions.</p>

<p>As it turns out, HTML/CSS grids are a very heavily studied point of design. So much so, that people build entire <em>CSS frameworks</em> around providing the building blocks to make grids easily. Here&rsquo;s a list:</p>

<ul>
<li><a href="http://getbootstrap.com/">Bootstrap</a></li>
<li><a href="http://foundation.zurb.com/">Foundation</a></li>
<li><a href="http://semantic-ui.com/">Semantic UI</a></li>
<li><a href="http://unsemantic.com/">Unsemantic</a></li>
</ul>


<p>Bootstrap is by far the most common (once you see it, you&rsquo;ll start to realize how many sites look incredibly similar). However, many people misuse Bootstrap their first time around. <a href="http://www.helloerik.com/the-subtle-magic-behind-why-the-bootstrap-3-grid-works">This article</a> demystifies and documents how and why the Bootstrap 3 grid works.</p>

<p>Even once you&rsquo;re an HTML and CSS master, it can still be frustrating. (Actually, I&rsquo;d believe it if the experts were the most frustrated!). I love answering question and trying to explain things, so if you need some help working through the exercises above or you&rsquo;re working on a personal project, I&rsquo;d love to see if I can help out! Protip: put your code on GitHub or somewhere else that&rsquo;s easily accessible so that it&rsquo;s easy to share changes quickly.</p>

<h2>Appendix</h2>

<p>I mentioned an example about &ldquo;fancy CSS queries&rdquo; above. This is certainly advanced territory, but it&rsquo;s something that I get asked a lot by beginners so here goes.</p>

<p>Basically, the problem is that you only want vertical line separators in between columns, not on the edges. In ASCII art:</p>

<figure class='code'><figcaption><span>Beautiful ASCII Art Diagram</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>        |        |
</span><span class='line'>  col1  |  col2  | col 3
</span><span class='line'>        |        |
</span><span class='line'>
</span><span class='line'>        ^        ^
</span><span class='line'>        | these. |</span></code></pre></td></tr></table></div></figure>


<p>(Thank you, thank you, I know my drawings are beautiful XD).</p>

<p>You already know that you can use <code>.class</code> and <code>#id</code> to select items based on their classes and IDs. But there are <a href="http://code.tutsplus.com/tutorials/the-30-css-selectors-you-must-memorize--net-16048">tons more query selectors</a> you can use! I&rsquo;ll use one to accomplish what we want with the vertical dividers:</p>

<figure class='code'><figcaption><span>Super Fancy CSS Selectors</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.column</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">height</span><span class="o">:</span> <span class="m">300px</span><span class="p">;</span>
</span><span class='line'>  <span class="c">/* Try uncommenting me! */</span>
</span><span class='line'>  <span class="k">float</span><span class="o">:</span> <span class="k">left</span><span class="p">;</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="m">50%</span><span class="p">;</span>
</span><span class='line'>  <span class="c">/* this kind of solves the &quot;overflow&quot; exersise I posted above YOLO */</span>
</span><span class='line'>  <span class="n">box</span><span class="o">-</span><span class="n">sizing</span><span class="o">:</span> <span class="k">border</span><span class="o">-</span><span class="n">box</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c">/* marvel at the fanciness! */</span>
</span><span class='line'><span class="nc">.column</span><span class="nd">:not</span><span class="o">(</span><span class="nd">:last-child</span><span class="o">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">border-right</span><span class="o">:</span> <span class="m">5px</span> <span class="k">solid</span> <span class="nb">black</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.left</span> <span class="p">{</span> <span class="k">background</span><span class="o">:</span> <span class="nb">red</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="nc">.right</span> <span class="p">{</span> <span class="k">background</span><span class="o">:</span> <span class="nb">blue</span><span class="p">;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can combine this with a nice padding (<code>padding: 50px</code> should do the trick) on the <code>.column</code>, and you&rsquo;ve got yourself a vertical divider!</p>

<h2>Update</h2>

<p>After writing this post, I discovered a couple articles talking about the new
<code>flexbox</code> feature. From what I can tell, it looks promising in terms of ease of
use and browser compatibility. That being said, many common CSS frameworks still
use <code>float: left</code>, so the content presented here is still good information to
know. If you&rsquo;re having trouble getting floats to work, though, maybe you should
look into <code>flexbox</code> instead!</p>

<hr />

<p><br></p>

<h3>Jake on the Web</h3>

<p><a class="image-link" href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on
<a href="https://www.github.com/jez/">GitHub</a> or paying a visit to <a href="https://jez.io/">my homepage</a>. If this post was about one of
my open source projects, make sure to star it on GitHub! I love hearing what
people think, so feel free to comment, open an issue, or send me an email.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Virtualenvs]]></title>
    <link href="https://blog.jez.io/2014/12/22/ruby-virtualenvs/"/>
    <updated>2014-12-22T12:52:40-06:00</updated>
    <id>https://blog.jez.io/2014/12/22/ruby-virtualenvs</id>
    <content type="html"><![CDATA[<p>A while back I found a command that removes all Ruby gems installed on a system
when you&rsquo;re using rbenv. It worked great, so I decided to build on top of it.
After a bit of research, I found a much better solution to the root of my
problems: sandboxing Ruby gems.</p>

<!-- more -->


<h2>Ugh, Ruby&hellip;</h2>

<p>If you&rsquo;re anything like me, you can never do anything right on the first try
using Ruby. At one point, I found myself needing a script to just nuke
everything and start over&hellip; That&rsquo;s when I found Ian Vaughan&rsquo;s <a href="https://gist.github.com/IanVaughan/2902499">script</a> that
magically removes all gems. I was delighted to see that it worked perfectly on
the first try, and went about the rest of my business.</p>

<h2>Modifications</h2>

<p>There were two ways though in which this script&rsquo;s functionality differed from
what I wanted it to do: it always removed <strong>all</strong> gems, and it left behind a
<code>.ruby_version</code> file after it was used, clobbering any file that might have been
there before.</p>

<p>In my updated script, you can specify a list of ruby versions as arguments, and
it will only gems from those versions instead of all of them.  Also, it saves
and restores the value of the old <code>.ruby_version</code> file once it&rsquo;s done.</p>

<p>The new script is available <a href="https://gist.github.com/jez/cc2ba08062c6183a489c">as a fork of the original Gist</a> and also as
a part of of <a href="https://github.com/jez/bin/blob/master/uninstall_gems">my personal bin folder</a>.</p>

<h2>The Underlying Problem: Virtualenv&rsquo;s in Ruby</h2>

<p>After a bit of reflection, I realized I should be trying to solve the underlying
problem: different projects had different dependencies, and gems from one
project were bleeding into gems from another. If you&rsquo;re a Python developer, you
don&rsquo;t have this issue: <a href="http://virtualenvwrapper.readthedocs.org/en/latest/">virtualenvwrapper</a>, <code>pip</code>, and <code>requirements.txt</code>
files make this a non-issue.</p>

<p>After looking into if there existed a similar Ruby solution, I came up with
<a href="http://honza.ca/2011/06/install-ruby-gems-into-virtualenv">this blog post</a> outlining how you can do the exact same thing using
virtualenvs but with Ruby gems! Once again, it needed a little bit of
modification so that everything works again as you&rsquo;d expect when you
<code>deactivate</code>. Add these lines to your virtualenv&rsquo;s <code>postactivate</code> script:</p>

<figure class='code'><figcaption><span>$VIRTUAL_ENV/bin/postactivate</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">export</span> <span class="n">OLD_GEMHOME</span><span class="o">=</span><span class="s">&quot;$GEM_HOME&quot;</span>
</span><span class='line'><span class="n">export</span> <span class="n">GEM_HOME</span><span class="o">=</span><span class="s">&quot;$VIRTUAL_ENV/gems&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">export</span> <span class="n">OLD_GEM_PATH</span><span class="o">=</span><span class="s">&quot;$GEM_PATH&quot;</span>
</span><span class='line'><span class="n">export</span> <span class="n">GEM_PATH</span><span class="o">=</span><span class="s">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">export</span> <span class="n">OLD_PATH</span><span class="o">=</span><span class="s">&quot;$PATH&quot;</span>
</span><span class='line'><span class="n">export</span> <span class="n">PATH</span><span class="o">=</span><span class="s">&quot;$GEM_HOME/bin:$PATH&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then add this complementary section to your <code>predeactivate</code> script:</p>

<figure class='code'><figcaption><span>$VIRTUAL_ENV/bin/predeactivate</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">export</span> <span class="n">GEM_HOME</span><span class="o">=</span><span class="s">&quot;$OLD_GEM_HOME&quot;</span>
</span><span class='line'><span class="n">unset</span> <span class="n">OLD_GEM_HOME</span>
</span><span class='line'>
</span><span class='line'><span class="n">export</span> <span class="n">GEM_PATH</span><span class="o">=</span><span class="s">&quot;$OLD_GEM_PATH&quot;</span>
</span><span class='line'><span class="n">unset</span> <span class="n">OLD_GEM_PATH</span>
</span><span class='line'>
</span><span class='line'><span class="n">export</span> <span class="n">PATH</span><span class="o">=</span><span class="s">&quot;$OLD_PATH&quot;</span>
</span><span class='line'><span class="n">unset</span> <span class="n">OLD_PATH</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, whenever you install gems, they&rsquo;ll install to the folder
<code>$VIRTUAL_ENV/gems/</code> instead of the system&rsquo;s location, so no gems bleed into
another project!</p>

<h2>One Step Further</h2>

<p>Bringing up this web page, copying those snippets, and pasting them in the two
necessary files every time is a bit tedious. To automate this process, we can
tap into virtualenvwrapper&rsquo;s configurability using hooks. Instead of dropping
those snippets into <code>$VIRTUAL_ENV/bin/{post,prede}activate,</code>, place them in
<code>$VIRTUALENVWRAPPER_HOOK_DIR/{post,prede}activate</code>.</p>

<p>Now every time you <code>workon</code> a virtualenv, the appropriate configuration will
be set up. Note that this means every normal Python project you use will have
this Ruby configuration added (not just the Ruby projects), but that shouldn&rsquo;t
matter because they interoperate nicely. If it&rsquo;s really an issue, you can stick
with the per-virtualenv solution above.</p>

<p>Note: a side effect of this nice sandboxing is that you can normally run
commands without prefixing them with <code>bundle exec ...</code>, which is actually really
handy.</p>

<hr />

<p><br></p>

<h3>Jake on the Web</h3>

<p><a class="image-link" href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on
<a href="https://www.github.com/jez/">GitHub</a> or paying a visit to <a href="https://jez.io/">my homepage</a>. If this post was about one of
my open source projects, make sure to star it on GitHub! I love hearing what
people think, so feel free to comment, open an issue, or send me an email.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim as a Man Page Viewer]]></title>
    <link href="https://blog.jez.io/2014/12/20/vim-as-a-man-page-viewer/"/>
    <updated>2014-12-20T18:17:46-08:00</updated>
    <id>https://blog.jez.io/2014/12/20/vim-as-a-man-page-viewer</id>
    <content type="html"><![CDATA[<p>Man pages are an essential part of every developer&rsquo;s workflow. Unfortunately,
the default system pager <code>less</code> isn&rsquo;t the best interface. That&rsquo;s why I wrote a
Vim plugin and a short shell function to take care of opening man pages in Vim.</p>

<!-- more -->


<h2>The Plugin</h2>

<p>If you&rsquo;re eager to dive right into the source or to install the plugin, head on
over to the <a href="https://github.com/jez/vim-superman">GitHub repository</a>. It&rsquo;s a whopping 32 SLOC, so feel
free to peek under the hood.</p>

<h2>Why?</h2>

<p>You might be thinking, &ldquo;But Jake, <code>man</code> works just fine for me, why would I
switch?&rdquo; I&rsquo;m glad you asked!</p>

<h3>Mouse Support</h3>

<p>The first reason why I was interested in getting man pages to open in Vim was
because I wanted to be able to scroll with the mouse. When I have to read man
pages for a long time, usually as a part of some more all-encompasing bit of
research, I find scrolling to be a much better interface for quickly perusing
the content of a man page.</p>

<h3>Syntax Highlighting</h3>

<p>As it turns out, man pages have a syntax to them, and Vim does a pretty
excellent job at highlighting them. Rather than talk about it, here are some
screenshots. Note how code samples (C system calls and library functions) are
also syntax highlighted appropriately.</p>

<figure class='code'><figcaption><span>Example 1</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vman vim
</span></code></pre></td></tr></table></div></figure>


<p><a class="image-link" href="https://blog.jez.io/images/vim.1.png"><img src="https://blog.jez.io/images/vim.1.png"></a></p>

<figure class='code'><figcaption><span>Example 2</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vman <span class="m">3</span> <span class="nb">printf</span>
</span></code></pre></td></tr></table></div></figure>


<p><a class="image-link" href="https://blog.jez.io/images/printf.3.png"><img src="https://blog.jez.io/images/printf.3.png"></a></p>

<h3>All the benefits of Vim</h3>

<p>While <code>less</code> makes a good effort to emulate certain Vim keybindings (or maybe
it&rsquo;s the other way around, I don&rsquo;t know which came first), <code>less</code> certainly
falls short of the full power of Vim.</p>

<p>For example, once you&rsquo;ve opened a man page in Vim, you can open a new tab or
split side-by-side with the man page. Especially if you&rsquo;re switching between Vim
and the man page often, being able to open man pages in tabs or splits is
invaluable.</p>

<h2>Mine doesn&rsquo;t look like yours!</h2>

<p>A couple of my other plugins are showing in the screenshots above. I&rsquo;m using the
<a href="https://github.com/altercation/vim-colors-solarized">Solarized Dark color scheme</a>, the plugin
<a href="https://github.com/bling/vim-airline">vim-airline</a> to take over the statuslines at the very top and
bottom, and iTerm2 on Mac OS X 10.10.</p>

<p>You can see my complete configuration <a href="https://github.com/jez/dotfiles">on GitHub</a>.</p>

<h2>Feedback</h2>

<p>As a matter of fact, this was my first Vim plugin! If you notice anything out of
place, even if it&rsquo;s a small detail, I&rsquo;d love to hear it. Make no assumptions
about the reasoning behind why certain decisions were made, because I have none
XD</p>

<hr />

<p><br></p>

<h3>Jake on the Web</h3>

<p><a class="image-link" href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on
<a href="https://www.github.com/jez/">GitHub</a> or paying a visit to <a href="https://jez.io/">my homepage</a>. If this post was about one of
my open source projects, make sure to star it on GitHub! I love hearing what
people think, so feel free to comment, open an issue, or send me an email.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Joys of the Craft]]></title>
    <link href="https://blog.jez.io/2014/12/13/the-joys-of-the-craft/"/>
    <updated>2014-12-13T17:52:09-08:00</updated>
    <id>https://blog.jez.io/2014/12/13/the-joys-of-the-craft</id>
    <content type="html"><![CDATA[<p>A while ago, I was given the book <em>The Mythical Man-Month</em>, by Frederick P. Brooks, Jr. I finally have some time to sit down and read it, and I&rsquo;m loving it. In the first chapter, this quote on &ldquo;the joys of the craft&rdquo; (i.e., programming) struck me as particularly on point:</p>

<!-- more -->


<blockquote><h3>The Joys of the Craft</h3>

<p>Why is programming fun? What delights may its practitioner expect as his reward?</p>

<p>First is the sheer joy of making things. As the child delights in his mud pie, so the adult enjoys building things, especially things of his own design. I think this delight must be an image of God&rsquo;s delight in making things, a delight shown in the distinctness and newness of each leaf and each snowflake.</p>

<p>Second is the pleasure of making things that are useful to other people. Deep within, we want others to use our work and to find it helpful. In this respect the programming system is not essentially different from the child&rsquo;s first clay pencil holder &ldquo;for Daddy&rsquo;s office.&rdquo;</p>

<p>Third is the fascination of fashioning complex puzzle-like objects of interlocking moving parts and watching them work in subtle cycles, playing out the consequences of principles built in from the beginning. The programmed computer has all the fascination of the pinball machine or the jukebox mechanism, carried to the ultimate.</p>

<p>Fourth is the joy of always learning, which springs from the nonrepearing nature of the task. In one way or another the problem is ever new, and its solver learns something: sometimes practical, sometimes theoretical, and sometimes both.</p>

<p>Finally, there is the delight of working in such a tractable medium. The programmer, like the poet, works only slightly removed from pure thought-stuff. He builds his castles in the air, from air, creating by exertion of the imagination. Few media of creation are so flexible, so easy to polish and rework, so readily capable of realizing grand conceptual structures. (As we shall see later, this very tractability has its own problems.)</p>

<p>Yet the program construct, unlike the poet&rsquo;s words, is real in the sense that it moves and works, producing visible outputs separate from the construct itself. It prints results, draws pictures, produces sounds, moves arms. The magic of myth and legend has come true in our time. One types the correct incantation on a keyboard, and a display screen comes to life, showing things that never were nor could be.</p>

<p>Programming then is fun because it gratifies creative longings built deep within us and delights sensibilities we have in common with all men.</p>

<p>&ndash; &ldquo;The Tar Pit&rdquo;, <em>The Mythical Man-Month</em>, Frederick P. Brooks Jr.</p></blockquote>

<p>Brooks of course follows this up with &ldquo;The Woes of the Craft&rdquo;, which is equally on point. I&rsquo;m only a few pages in, but I already feel like, respectfully, I&rsquo;ve learned more than I did in all of Tech Comm (<a href="https://enr-apps.as.cmu.edu/open/SOC/SOCServlet/courseDetails?COURSE=15221&amp;SEMESTER=F14">15-221</a>). I would absolutely recommend it to anyone considering pursing software engineering!</p>

<hr />

<p><br></p>

<h3>Jake on the Web</h3>

<p><a class="image-link" href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on
<a href="https://www.github.com/jez/">GitHub</a> or paying a visit to <a href="https://jez.io/">my homepage</a>. If this post was about one of
my open source projects, make sure to star it on GitHub! I love hearing what
people think, so feel free to comment, open an issue, or send me an email.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Multiple Git Remotes]]></title>
    <link href="https://blog.jez.io/2014/11/01/using-more-than-one-git-remote/"/>
    <updated>2014-11-01T15:12:35-07:00</updated>
    <id>https://blog.jez.io/2014/11/01/using-more-than-one-git-remote</id>
    <content type="html"><![CDATA[<p>Quite often when using git, you only need to use one remote: <code>origin</code>. All your pushes and pulls communicate with this one host. However, there are many occasions when using multiple Git remotes is incredibly handy.</p>

<!-- more -->


<h2>Quick Overview: Remotes</h2>

<p>If you haven&rsquo;t already, I strongly recommend that you check out these two Git resources in your free time:</p>

<ul>
<li><a href="http://pcottle.github.io/learnGitBranching/"><strong>Learn Git Branching</strong></a>, an interactive walkthrough of some powerful Git features</li>
<li><a href="https://wildlyinaccurate.com/a-hackers-guide-to-git"><strong>A Hacker&rsquo;s Guide to Git</strong></a>, an explanation of Git by &ldquo;taking a peek under the hood&rdquo;</li>
</ul>


<p>In this article, I&rsquo;ll only be talking about remotes. Remotes are basically &ldquo;mirrors&rdquo; of a branch that you have locally, but on a different computer.</p>

<h2>Scenario: Working with Code in 15-150</h2>

<p>At CMU, the class 15-150 distributes its starter code in a beautiful way: using Git! This opens up a number of things we can take advantage of, but there&rsquo;s one thing in particular we can do using multiple git remotes.</p>

<p>In 15-150, the code is distribute in a read-only Git repo. If we want a place where we can push and pull our changes, we&rsquo;ll need to create our own <em>bare repo</em> (a repo that&rsquo;s used just for pushing and pulling). You&rsquo;ll note that I said push <em>and pull</em>. The reason why I want to be able to pull is because I want to have 2 clones of this repo: one on the CMU Andrew Unix servers (where the 15-150 code is hosted), and one on my laptop, where there&rsquo;s no network latency to edit files in Vim.</p>

<p>To achieve this setup, the first thing we&rsquo;ll do is set up the bare repo. The best place to put a bare repo is on a server so that you can always access your code. So from Andrew, I&rsquo;ll run the commands:</p>

<figure class='code'><figcaption><span>Initialize the Bare Repo</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># (unix.andrew.cmu.edu)</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># `git clone --bare` is basically GitHub&#39;s &quot;Fork&quot; feature,</span>
</span><span class='line'><span class="c"># if you&#39;re familiar with that</span>
</span><span class='line'><span class="nv">$ </span>git clone --bare ~/private/gitrepos/15150
</span><span class='line'><span class="c"># make sure you clone this into your private folder!</span>
</span></code></pre></td></tr></table></div></figure>


<p>This creates a bare repo initialized with all the 15-150 content which I can clone in two different ways: one for if I&rsquo;m on Andrew, one if I&rsquo;m on my laptop.</p>

<figure class='code'><figcaption><span>Clone New Remote</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># (unix.andrew.cmu.edu)</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Clone over Unix file path to new folder ~/private/15150</span>
</span><span class='line'><span class="nv">$ </span>git clone ~/private/gitrepos/15150 ~/private/15150
</span><span class='line'>
</span><span class='line'><span class="c"># -- and/or --</span>
</span><span class='line'>
</span><span class='line'><span class="c"># (my laptop)</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Clone over ssh (using ssh alias, i.e., if you use `ssh andrew`)</span>
</span><span class='line'><span class="nv">$ </span>git clone ssh://andrew:/afs/andrew/usr/jezimmer/private/15150
</span><span class='line'><span class="c"># -- or --</span>
</span><span class='line'><span class="c"># Clone over ssh (without ssh alias,</span>
</span><span class='line'><span class="c">#            i.e., if you use `ssh jezimmer@unix.andrew.cmu.edu`)</span>
</span><span class='line'><span class="nv">$ </span>git clone ssh://jezimmer@unix.andrew.cmu.edu:/afs/andrew/usr/jezimmer/private/15150
</span></code></pre></td></tr></table></div></figure>


<p>To throw in a few graphics, our setup looks like this right now:</p>

<p><a class="image-link" href="https://blog.jez.io/images/multiple-remotes-1.svg"><img src="https://blog.jez.io/images/multiple-remotes-1.svg"></a></p>

<p>I&rsquo;m representing bare repos as clouds and clones of those repos as squares, with arrows representing whether code can flow from one place to the next. As you can see, to send code back and forth between Andrew and my laptop, I can just push in one place and pull in the other.</p>

<p>The one thing missing from our picture is the original handout repo. How will we get updates as the homeworks are released? The last piece involves setting this up.</p>

<figure class='code'><figcaption><span>Add Handout Remote</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Add the 15-150 handout remote so we can get starter code, etc.</span>
</span><span class='line'><span class="c"># (unix.andrew.cmu.edu)</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># A common name for the second remote is &quot;upstream&quot;, though you could also</span>
</span><span class='line'><span class="c"># call this remote &quot;handout&quot; if that would be easier to keep straight</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~/private/15150
</span><span class='line'><span class="nv">$ </span>git remote add upstream /afs/andrew/course/15/150/handout
</span><span class='line'>
</span><span class='line'><span class="c"># -- and/or --</span>
</span><span class='line'>
</span><span class='line'><span class="c"># (my laptop)</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># Add remote over ssh with alias</span>
</span><span class='line'><span class="nv">$ </span>git remote add upstream ssh://andrew:/afs/andrew/course/15/150/handout
</span><span class='line'><span class="c"># -- or --</span>
</span><span class='line'><span class="c"># Add remote over ssh without alias</span>
</span><span class='line'><span class="nv">$ </span>git remote add upstream ssh://jezimmer@unix.andrew.cmu.edu:/afs/andrew/course/15/150/handout
</span></code></pre></td></tr></table></div></figure>


<p>Once we run those two lines, our setup looks like this, where arrows point in
the direction data can flow:</p>

<p><a class="image-link" href="https://blog.jez.io/images/multiple-remotes-2.svg"><img src="https://blog.jez.io/images/multiple-remotes-2.svg"></a></p>

<p>After this, we&rsquo;re able to run <code>git pull upstream master</code> to get the 15-150 starter code as it&rsquo;s released. I find this model particularly useful for all my classes, even the ones that don&rsquo;t distribute their code using Git. Having code both on Andrew and on my local machine is a generally handy configuration, and using Git to push the code around to the right places makes my workflow simple.</p>

<p>As always, let me know if something was unclear or incorrect in the comments!</p>

<h2>More Applications</h2>

<p>There are plenty other applications of using multiple remotes with Git. Perhaps the most common is to use them with the <a href="https://help.github.com/articles/fork-a-repo/"><strong>GitHub forking model</strong></a>, which is useful when collaborating on a software development project with others. You can use multiple remotes to do things like resolve merge conflicts in pull requests and to keep your fork up to date with the original repo.</p>

<hr />

<p><br></p>

<h3>Jake on the Web</h3>

<p><a class="image-link" href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on
<a href="https://www.github.com/jez/">GitHub</a> or paying a visit to <a href="https://jez.io/">my homepage</a>. If this post was about one of
my open source projects, make sure to star it on GitHub! I love hearing what
people think, so feel free to comment, open an issue, or send me an email.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Google OAuth2 for CMU Authentication]]></title>
    <link href="https://blog.jez.io/2014/10/20/using-google-apps-for-cmu-authentication/"/>
    <updated>2014-10-20T03:11:37-07:00</updated>
    <id>https://blog.jez.io/2014/10/20/using-google-apps-for-cmu-authentication</id>
    <content type="html"><![CDATA[<p>Using <code>python-social-auth</code> and Django, I&rsquo;ve found a very straightfoward way of adding authentication to apps designed for CMU students. Given that all Andrew accounts are now Google Apps @ CMU accounts, we can take advantage of the widely used Google OAuth2 libraries to authenticate users, but just restrict sign-ins to the <code>andrew.cmu.edu</code> &ldquo;hosted domain.&rdquo;</p>

<!-- more -->


<h2>Background</h2>

<p>Finally! I&rsquo;ve alluded many times to blogging about some of the things I&rsquo;m learning from my experiences rewriting <a href="http://print.scottylabs.org/">Print@ScottyLabs</a>. After a summer of putting it off and half a semester more of dawdling, I&rsquo;ve finally managed to lay some solid groundwork.</p>

<p>One of the features that we plan on adding to Print 2.0 is a web interface. For people familiar with the way Print works currently, you interact with the service entirely through email. This leads to a clunky user experience and a lot of weird bugs and edge cases. With a web interface, we hope to streamline the process of account management and printing documents.</p>

<p>With this in mind, we needed to decide on a user model. Ideally, we&rsquo;d like this model to give us two things:</p>

<ul>
<li><strong>It should be secure.</strong> People who don&rsquo;t already have access to CMU printers shoudn&rsquo;t be able to easy gain access by using our system.</li>
<li><strong>It should be familiar.</strong> We want to design Print 2.0 to be as close to an official-feeling CMU app as we can without stepping on the ever-present administrative toes.</li>
</ul>


<p>Naturally, this leads to an obvious solution: have people sign in using the same <a href="https://login.cmu.edu">https://login.cmu.edu</a> site, which is used for email, Blackboard, AutoLab, and many other on-campus services. The trick, then, is to figure out how to do this.</p>

<p>My first thought was to &ldquo;use Shibboleth.&rdquo; I put this in quotes because I didn&rsquo;t exactly know what that meant at the time. What I was looking for was a simple OAuth2 API (like what Google or Facebook provide) that I could much just drop into my app with no other configuration required on the deployment machine. Shibboleth does not offer this solution.</p>

<p>Luckily, Google&rsquo;s OAuth2 API has a feature that allowed me to do exactly what I wanted. Thanks to a couple of resourceful members of the CMU Computer Science Facebook group (Carlos Diaz-Padron and Arthur Lee), I found out about a barely-documented parameter that you can pass in on the auth URL to restrict Google OAuth2 logins to a <a href="https://developers.google.com/accounts/docs/OAuth2Login#hd-param">specific hosted domain</a>. Since all CMU Andrew accounts are Google Apps accounts (as of Fall 2013), we can ask Google to restrict logins to the <code>'andrew.cmu.edu'</code> hosted domain. From here on, the only trick is to get whatever client library you&rsquo;re using to handle authentication to pass this parameter with a value of <code>'andrew.cmu.edu'</code> along to Google. The rest of this post describes a bare-bones way of doing this using Django.</p>

<h2>Implementing Authentication</h2>

<p>The following is a pretty long-winded explanation of my personal struggles with this. If you&rsquo;d really just like to learn by example and by making your own mistakes, check out the <a href="https://github.com/jez/google-apps-cmu-login/">code on GitHub</a>. I also found the <a href="https://github.com/omab/python-social-auth/tree/master/examples/"><code>python-social-auth</code> examples</a> very helpful. In the spirit of <a href="http://www.gitorial.com/">gitorial</a>, the commits are structured logically to give you a sense of how the app came together as I wrote it. In fact, I&rsquo;ve even <a href="http://www.gitorial.com/#/jez/25536683">made a gitorial</a> for this repo!</p>

<h3>Python Social Auth</h3>

<p>First up: pick a client library. I&rsquo;ve had success using <code>python-social-auth</code> in other projects, and it&rsquo;s generally a mature project, so it&rsquo;s what I picked.</p>

<p>Next up: skim the docs. Given the enormous size of this project (it has solutions for tons of python frameworks and tons of authentication backends), the docs are pretty comprehensive. Unfortunately, they fell short in the one place where I needed to look.</p>

<p>One of the neat things about the python social auth library is that it can be easily extended to support additional authentications backends using simple object-oriented techniques. To make this happen, very few pieces of information are hardcoded; in particular, the names of the variables that allow for configuration are dynamically generated based on the available backends.</p>

<p><a href="https://python-social-auth.readthedocs.org/en/latest/configuration/settings.html#extra-arguments-on0auth-processes">This page</a> outlines how to pass in extra, optional arguments while constructing the redirect URI for a particular authentication backend. It hints at the names of the variables that need to be defined, but sadly these hints are wrong.</p>

<p><strong>This is a correction to the documentation provided at the above link.</strong> Extra authentication arguments can be passed in using any of the following variables:</p>

<ul>
<li><code>SOCIAL_AUTH_&lt;backend&gt;_AUTH_EXTRA_ARGUMENTS</code></li>
<li><code>SOCIAL_AUTH_AUTH_EXTRA_ARGUMENTS</code> (no, this is not a typo)</li>
<li><code>AUTH_EXTRA_ARGUMENTS</code></li>
</ul>


<p>I&rsquo;m not sure what the difference between using the second and third variables are, but all variables of the first form will allow you to scope the extra arguments to a particular backend (in case you&rsquo;re using more than one in the same app).</p>

<p>So in my case, I added the following line to my <code>settings.py</code>:</p>

<figure class='code'><figcaption><span>settings.py</span><a href='https://github.com/jez/google-apps-cmu-login/blob/master/config/settings.py#L66'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">SOCIAL_AUTH_GOOGLE_OAUTH2_AUTH_EXTRA_ARGUMENTS</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;hd&#39;</span> <span class="p">:</span> <span class="s">&#39;andrew.cmu.edu&#39;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Phew. That&rsquo;s a long variable name. But Jake, how did you come up with <code>GOOGLE_OAUTH2</code> for the backend name? There&rsquo;s really no good answer to this, because I haven&rsquo;t been able to find a web-readable list of all the names in one place. The way this name is generated is by taking the <code>name</code> property of the particular backend you&rsquo;re using (in my case, <code>social.backends.google.GoogleOAuth2</code> has <code>name = 'google-oauth2'</code>, which I found by looking at the source), replacing all hyphens with underscores and making everything capital.</p>

<h3>The Django App</h3>

<p>Now you should plenty of background knowledge to make sense of the Django app on your own, but I&rsquo;ll reiterate the main points here for completeness. It will be pretty choppy in most places if you&rsquo;re not referring to my example app on GitHub as you read.</p>

<p>First, we&rsquo;ll get all our URLs in place. For Django, all the URLs dealing with logging in are already defined; we just have to include them:</p>

<figure class='code'><figcaption><span>config/urls.py</span><a href='https://github.com/jez/google-apps-cmu-login/blob/master/config/urls.py#L10'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">...</span>
</span><span class='line'><span class="n">url</span><span class="p">(</span><span class="s">r&#39;&#39;</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="s">&#39;social.apps.django_app.urls&#39;</span><span class="p">,</span> <span class="n">namespace</span><span class="o">=</span><span class="s">&#39;social&#39;</span><span class="p">)),</span>
</span><span class='line'><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we can set up some simple URLs (a home page and a logout view), and accompanying views for these URLs that do exactly what you think they should.</p>

<p>In our template, if the user is logged in, we&rsquo;ll show their AndrewID (<code>user.username</code>), or else we&rsquo;ll hardcode the link to the Google OAuth2 authentication backend.</p>

<p><strong>Note</strong>: if you plan on using multiple forms of authentication (like Facebook or GitHub) in this app, be sure to check out the python social auth example for how they generate their home page such that no URLs need to be hard coded. For our purposes, though, if there&rsquo;s only one URL it will be fine to just write it out.</p>

<h3>Demo</h3>

<iframe width="420" height="315" src="//www.youtube.com/embed/GYRUvTvTSJE" frameborder="0" allowfullscreen></iframe>


<h3>Going Forward</h3>

<p>That&rsquo;s basically it. The rest is up to you to fill in. Building off this model, you should be able to make basically any Django app that you&rsquo;d otherwise want to build.</p>

<p>One thing you&rsquo;ll want to look into is defining a custom Auth User model. Custom Auth User models allow you to plug into Django&rsquo;s default auth system to take advantage of all the features it has available for keeping track of your users. The <a href="https://docs.djangoproject.com/en/dev/topics/auth/customizing/">Django docs</a> on this topic are actually pretty good, though you&rsquo;ll likely want to find an example to help you work through the specifics.</p>

<p>As always, let me know if you have any questions or if by following these steps something didn&rsquo;t work for you. Because of how bare bones this app is, it&rsquo;s likely that I glossed over some points for the sake of minimalism. Comment below with your feedback and feel free to email me or make GitHub issues with your questions.</p>

<hr />

<p><br></p>

<h3>Jake on the Web</h3>

<p><a class="image-link" href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on
<a href="https://www.github.com/jez/">GitHub</a> or paying a visit to <a href="https://jez.io/">my homepage</a>. If this post was about one of
my open source projects, make sure to star it on GitHub! I love hearing what
people think, so feel free to comment, open an issue, or send me an email.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Offline LaTeX Development]]></title>
    <link href="https://blog.jez.io/2014/10/06/offline-latex-development/"/>
    <updated>2014-10-06T15:00:00-07:00</updated>
    <id>https://blog.jez.io/2014/10/06/offline-latex-development</id>
    <content type="html"><![CDATA[<p>While online clients like ShareLaTeX or writeLaTeX are popular for getting started with LaTeX quickly, developing LaTeX locally with Vim and the command line is my preferred LaTeX workflow. In this post, I&rsquo;ll describe the changes I&rsquo;ve made that make working with LaTeX on the command line a seamless experience.</p>

<!-- more -->


<h2>Install LaTeX</h2>

<p>Obviously, to work with LaTeX locally, you&rsquo;ll need LaTeX installed. To check if you already have it installed, you can run <code>which pdflatex</code>. If it&rsquo;s installed, this command will tell you the path to program. Otherwise, it won&rsquo;t print anything.</p>

<h3>On Linux</h3>

<p>Installing LaTeX on Linux isn&rsquo;t too bad. Usually it&rsquo;s included in your distribution&rsquo;s package manager. I&rsquo;ll be focusing on OS X for the majority of this post though, so Google around if you end up having trouble.</p>

<h3>On OS X</h3>

<p>To install LaTeX on a Mac, we&rsquo;ll be installing MacTeX, which includes the command line LaTeX utilities as well as a couple graphical clients for LaTeX development. You can try compiling from source, but as Homebrew points out when you try to <code>brew install linux</code>:</p>

<figure class='code'><figcaption><span>brew install latex</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew install latex
</span><span class='line'>Error: No available formula for latex
</span><span class='line'>Installing TeX from source is weird and gross, requires a lot of patches,
</span><span class='line'>and only builds 32-bit (and thus can't use Homebrew deps on Snow Leopard.)
</span><span class='line'>
</span><span class='line'>We recommend using a MacTeX distribution: http://www.tug.org/mactex/</span></code></pre></td></tr></table></div></figure>


<p>With that in mind, head on over to <a href="http://www.tug.org/mactex/">http://www.tug.org/mactex/</a> and download the file <code>MacTeX.pkg</code>. Once this has downloaded and you&rsquo;ve clicked through the installer, you should be ready to go with LaTeX. Verify this by running <code>which pdflatex</code> again.</p>

<h2>Use Vim</h2>

<p>The biggest productivity improvement you gain from developing LaTeX locally is that you get to use Vim. Make sure you have a nice colorscheme for both your terminal and for Vim. <strong>I can&rsquo;t stress enough how important it is to make your terminal look nice</strong>: you want to enjoy your terminal experience, and this is one of the easiest ways to do so.</p>

<h2>Use Make</h2>

<p>Compiling LaTeX is pretty straightforward. To generate a PDF, all you have to do is run the command</p>

<figure class='code'><figcaption><span>pdflatex</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>pdflatex &lt;myfile&gt;.tex
</span></code></pre></td></tr></table></div></figure>


<p>And you&rsquo;ll get a file called <code>&lt;myfile&gt;.pdf</code> in the current directory, plus some intermediate files. We can go one step further and put a bunch of useful build targets into a Makefile and use it to build our PDF:</p>

<figure class='code'><figcaption><span>LaTeX Makefile</span><a href='https://gist.github.com/jez/b248a409d19c9f1c94cd'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='make'><span class='line'><span class="c"># NOTE: Change &quot;written&quot; to the name of your TeX file with no extension</span>
</span><span class='line'><span class="nv">TARGET</span><span class="o">=</span>written
</span><span class='line'>
</span><span class='line'><span class="nf">all</span><span class="o">:</span> <span class="k">$(</span><span class="nv">TARGET</span><span class="k">)</span>.<span class="n">pdf</span>
</span><span class='line'>
</span><span class='line'><span class="c">## Generalized rule: how to build a .pdf from each .tex</span>
</span><span class='line'><span class="nv">LATEXPDFS</span><span class="o">=</span><span class="k">$(</span>patsubst %.tex,%.pdf,<span class="k">$(</span>wildcard *.tex<span class="k">))</span>
</span><span class='line'><span class="nf">$(LATEXPDFS)</span><span class="o">:</span> %.<span class="n">pdf</span>: %.<span class="n">tex</span>
</span><span class='line'>  pdflatex -interaction nonstopmode <span class="k">$(</span>patsubst %.pdf,%.tex,<span class="nv">$@</span><span class="k">)</span>
</span><span class='line'>
</span><span class='line'><span class="nf">clean</span><span class="o">:</span>
</span><span class='line'>  rm *.aux *.log <span class="o">||</span> <span class="nb">true</span>
</span><span class='line'>
</span><span class='line'><span class="nf">veryclean</span><span class="o">:</span> <span class="n">clean</span>
</span><span class='line'>  rm <span class="k">$(</span>TARGET<span class="k">)</span>.pdf
</span><span class='line'>
</span><span class='line'><span class="nf">view</span><span class="o">:</span> <span class="k">$(</span><span class="nv">TARGET</span><span class="k">)</span>.<span class="n">pdf</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;Darwin&quot;</span> <span class="o">=</span> <span class="s2">&quot;$(shell uname)&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span> open <span class="k">$(</span>TARGET<span class="k">)</span>.pdf <span class="p">;</span> <span class="k">else</span> evince <span class="k">$(</span>TARGET<span class="k">)</span>.pdf <span class="p">;</span> <span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="nf">submit</span><span class="o">:</span> <span class="k">$(</span><span class="nv">TARGET</span><span class="k">)</span>.<span class="n">pdf</span>
</span><span class='line'>  cp <span class="k">$(</span>TARGET<span class="k">)</span>.pdf ../
</span><span class='line'>
</span><span class='line'><span class="nf">print</span><span class="o">:</span> <span class="k">$(</span><span class="nv">TARGET</span><span class="k">)</span>.<span class="n">pdf</span>
</span><span class='line'>  lpr <span class="k">$(</span>TARGET<span class="k">)</span>.pdf
</span><span class='line'>
</span><span class='line'><span class="nf">.PHONY</span><span class="o">:</span> <span class="n">all</span> <span class="n">clean</span> <span class="n">veryclean</span> <span class="n">view</span> <span class="n">print</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you save this to a file called <code>Makefile</code> in the same directory as your LaTeX file, we can just run <code>make</code> instead of running <code>pdflatex &lt;myfile&gt;.tex</code>!</p>

<p>As you can see, there are a bunch of other handy targets here:</p>

<ul>
<li><code>make clean</code> will remove all intermediate files that are created.</li>
<li><code>make veryclean</code> will remove all intermediate files and the compiled PDF file.</li>
<li><code>make view</code> will compile the file and then open it up in a PDF viewer (if you&rsquo;re on OS X, or on Linux and have <code>evince</code> installed).</li>
<li><code>make print</code> will send your document to the default printer with the default options for that printer.</li>
<li><code>make submit</code> will copy your file into the parent directory. This is handy when you&rsquo;re working in a subfolder on an assignment to isolate the intermediate files, but your class has provided a handin script that needs the PDF file to be in the parent directory.</li>
</ul>


<h2>Workflow Tips</h2>

<p>Right now, our workflow looks like this:</p>

<ul>
<li>Create TeX file</li>
<li>Edit in Vim</li>
<li>Switch to terminal</li>
<li>Run make view to compile and view</li>
</ul>


<p>We can actually optimize this workflow to one less step: we don&rsquo;t have to get out of Vim to run make!</p>

<p>Vim has a command <code>:make</code> that will look for a Makefile in the current directory and run it&rsquo;s <code>all</code> target. It also takes a target as an optional argument, so we can do <code>:make view</code> to compile and view the document from within Vim!</p>

<p>Taking this one step further, we can add a command to shorten this. If we add</p>

<figure class='code'><figcaption><span>Save, Compile and View in Vim</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>command WV <span class="k">w</span> <span class="p">|</span> <span class="k">make</span> <span class="k">view</span>
</span></code></pre></td></tr></table></div></figure>


<p>to our <code>.vimrc</code>, we&rsquo;ll only have to type <code>:WV</code> to save, compile, and view our PDF output.</p>

<h2>Wrap Up</h2>

<p>That&rsquo;s it! I like this experience for a bunch of reasons:</p>

<ul>
<li><strong>It&rsquo;s faster</strong>. Compiling LaTeX without having to wait for a web client to load is really nice.</li>
<li><strong>It&rsquo;s more stable</strong>. You can still edit, compile, and view your work if you don&rsquo;t have access to the Internet.</li>
<li><strong>It&rsquo;s faster</strong>. Using Vim to edit text is much more convenient than a standard text editor.</li>
</ul>


<p>Do you have a LaTeX tip, a fancier Makefile, or a favorite vim plugin for LaTeX? Share it in the comments!</p>

<hr />

<p><br></p>

<h3>Jake on the Web</h3>

<p><a class="image-link" href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on
<a href="https://www.github.com/jez/">GitHub</a> or paying a visit to <a href="https://jez.io/">my homepage</a>. If this post was about one of
my open source projects, make sure to star it on GitHub! I love hearing what
people think, so feel free to comment, open an issue, or send me an email.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solarized LaTeX Listings]]></title>
    <link href="https://blog.jez.io/2014/10/04/solarized-latex-listings/"/>
    <updated>2014-10-04T03:35:05-07:00</updated>
    <id>https://blog.jez.io/2014/10/04/solarized-latex-listings</id>
    <content type="html"><![CDATA[<p>Out of the box, LaTeX listings are pretty bad. With a bit of work, you can ascribe some colors to the code, but you&rsquo;re still stuck with choosing a theme. Given that I recently just switched to the Solarized colorscheme in Vim and iTerm2, I made a LaTeX package that styles code listings with the predefined Solarized light colors.</p>

<!-- more -->


<h2><a href="https://github.com/jez/latex-solarized">Source</a></h2>

<p>The source for this theme is on GitHub, and the README has pretty good documentation. Here&rsquo;s an example of the final result:</p>

<p><a class="image-link" href="https://blog.jez.io/images/solarized-light-screenshot.png"><img src="https://blog.jez.io/images/solarized-light-screenshot.png"></a></p>

<p>After you install them in the right place, you can include <code>\usepackage{solarized-light}</code> to turn source code listings light (as in above), <code>\usepackage{solarized-dark}</code> to have listings styled with the dark Solarized theme, and just <code>\usepackage{solarized}</code> to have access to the raw Solarized color codes (see the source for their names).</p>

<p>Once you&rsquo;ve done this, you just have to include your code in your LaTeX file using the <code>listings</code> packages. You might want to check out <a href="http://en.wikibooks.org/wiki/LaTeX/Source_Code_Listings">the LaTeX wiki</a> for more information on how to get started quickly with code listings, or <a href="http://mirror.hmc.edu/ctan/macros/latex/contrib/listings/listings.pdf">the official documentation</a> for a more comprehensive reference.</p>

<hr />

<p><br></p>

<h3>Jake on the Web</h3>

<p><a class="image-link" href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on
<a href="https://www.github.com/jez/">GitHub</a> or paying a visit to <a href="https://jez.io/">my homepage</a>. If this post was about one of
my open source projects, make sure to star it on GitHub! I love hearing what
people think, so feel free to comment, open an issue, or send me an email.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A LaTeX Homework Template]]></title>
    <link href="https://blog.jez.io/2014/10/03/a-latex-homework-template/"/>
    <updated>2014-10-03T23:03:27-07:00</updated>
    <id>https://blog.jez.io/2014/10/03/a-latex-homework-template</id>
    <content type="html"><![CDATA[<p>Writing a LaTeX document from scratch for every assignment is tedious. Especially for homework assignments, a lot of the structure is repetitive. Read on to learn about the homework template I&rsquo;ve adapted for use in all my technical classes.</p>

<!-- more -->


<h2>Background</h2>

<p>I&rsquo;ve been using LaTeX for assignments in college for over a year now, and from the get-go I loved it; It&rsquo;s a powerful way to transform plain text (which is editable in Vim!) into beautiful documents. In fact, I use LaTeX + Vim or Google Docs exclusively&ndash;no Microsoft Office. People often don&rsquo;t understand why I prefer this combination, claiming that LaTeX is time consuming and tedious. But with a good template and some Vim-foo, editing LaTeX is a breeze. In a later post, I&rsquo;ll elaborate how I use Vim + Unix as an IDE for LaTeX. For now, though, let&rsquo;s take a look at my template!</p>

<h2><a href="https://github.com/jez/latex-hw-template">The Template</a></h2>

<p>For those who like to learn by doing, I invite you to <strong><a href="https://github.com/jez/latex-hw-template">jump over to GitHub</a></strong> where you can see the source, download the template, and start tinkering. The source isn&rsquo;t that long, and it comes with tons of examples to get you going.</p>

<p>The rest of this post goes into some fancy use cases for how to get the best out of this template. If you don&rsquo;t read it now, check it out later if you want to take advantage of it&rsquo;s more powerful features. You can also leave comments here asking how something works, and issues on GitHub if something&rsquo;s broken.</p>

<h2>Screenshot</h2>

<p>Here&rsquo;s a quick overview of what the theme looks like. You&rsquo;ll have to use your imagination a bit: this outline is more of a list of examples. I&rsquo;d show you how nice one of my actual homeworks looks, but then I&rsquo;d be giving out my homework!</p>

<p><a class="image-link" href="https://raw.githubusercontent.com/jez/latex-hw-template/master/screenshot.png"><img src="https://raw.githubusercontent.com/jez/latex-hw-template/master/screenshot.png"></a></p>

<h2>Usage</h2>

<p>My main use case for LaTeX is (unsurprisingly) to typeset homeworks for math and CS classes. In these classes, the questions are either numbered or have specific names, and they ask for your name, lecture, recitation section, student ID, email address, etc. It turns out that there are some pretty simple ways of modularizing each of these desired features.</p>

<h3>Personal Info</h3>

<p>To solve the issue of entering personal information, the template defines a bunch of commands at the top of the file that enumerate all the fields you&rsquo;ll likely want to include on your homework.</p>

<figure class='code'><figcaption><span>Personal Information </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='latex'><span class='line'><span class="k">\newcommand</span><span class="nb">{</span><span class="k">\myname</span><span class="nb">}{</span>Jacob Zimmerman<span class="nb">}</span>
</span><span class='line'><span class="k">\newcommand</span><span class="nb">{</span><span class="k">\myemail</span><span class="nb">}{</span>jezimmer<span class="nb">}</span>
</span><span class='line'><span class="k">\newcommand</span><span class="nb">{</span><span class="k">\myhwtype</span><span class="nb">}{</span>Homework<span class="nb">}</span>
</span><span class='line'><span class="k">\newcommand</span><span class="nb">{</span><span class="k">\myhwnum</span><span class="nb">}{</span>0<span class="nb">}</span>
</span><span class='line'><span class="k">\newcommand</span><span class="nb">{</span><span class="k">\myclass</span><span class="nb">}{</span>12-345<span class="nb">}</span>
</span><span class='line'><span class="k">\newcommand</span><span class="nb">{</span><span class="k">\mylecture</span><span class="nb">}{</span>0<span class="nb">}</span>
</span><span class='line'><span class="k">\newcommand</span><span class="nb">{</span><span class="k">\mysection</span><span class="nb">}{</span>Z<span class="nb">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><strong>This is where forking comes in particularly handy</strong>. You&rsquo;d like to be able to define your own defaults and push them somewhere, but you also want to be able to update the template as new changes become available. If you fork the repo, you can both have a repository where you can include your own changes as well as pull any updates as they become available. (If you&rsquo;re new to forks, you should definitely <a href="https://help.github.com/articles/fork-a-repo/">check them out</a>).</p>

<h3>Questions</h3>

<p>Whenever I have an assignment to do, the questions generally come down to one of two forms: named or numbered questions. As such, there are two environments in the template that let you easily create a space to put your answers for each type of question. These are named <code>namedquestion</code> and <code>numedquestion</code> (<strong>not</strong> <code>numberedquestion</code>).</p>

<p><strong>The <code>namedquestion</code> environment</strong> takes one required argument: the name! This environment is handy any time the questions don&rsquo;t have numbers attached to them, or if the ordering of the questions doesn&rsquo;t conform nicely to a sequential numbering.</p>

<p><strong>The <code>numedquestion</code> environment</strong> takes no arguments, but that doesn&rsquo;t mean you can&rsquo;t configure it. By default, <code>numedquestions</code> begin counting at 1 and go up sequentially from there. To change this, you manually set the contents of the <code>questionCounter</code> counter. Using</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='latex'><span class='line'><span class="k">\setcounter</span><span class="nb">{</span>questionCounter<span class="nb">}{</span>-1<span class="nb">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Before the first question will start the numbering at 0. You can use this pattern (set the <code>questionCounter</code> to one less than the next question) to arbitrarily skip around with your numbering. There&rsquo;s an example of this in the source.</p>

<p>There are also times when you&rsquo;d like numbered questions to be of the form &ldquo;X.y&rdquo;, where &ldquo;X&rdquo; is the section number that the question comes from, and &ldquo;y&rdquo; is the number of the question within that section. The template tracks the value of &ldquo;X&rdquo; in <code>\writtensection</code>. By default, the template sets this to 0, which causes the section number to be omitted. If you manually set <code>\writtensection</code> to a non-zero value, this number will be prepended to all questions. When you do this, the value of &ldquo;y&rdquo; is determined by <code>questionCounter</code>.</p>

<p>Similar to what we could do with <code>questionCounter</code>, you can manually turn on the section counter for certain questions by including something like</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='latex'><span class='line'><span class="k">\renewcommand</span><span class="nb">{</span><span class="k">\writtensection</span><span class="nb">}{</span>X<span class="nb">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>in front of that particular question. Use <code>\renewcommand{\writtensection}{0}</code> after that question if you&rsquo;d like to turn it back off.</p>

<h3>Question Parts</h3>

<p>All in all, these two environments will take care of 90% of what you need to do in your homework. Sometimes, though, questions have multiple parts. To handle this, there are two environments, <code>alphaparts</code> and <code>arabicparts</code>, that take care of alphabetic and numeric question parts, respectively.</p>

<p>The uses of these environments are pretty straightforward and have no real special cases. Each environment wraps around the <code>enumerate</code> environment. This means you can just use a normal <code>\item</code> to indicate a specific part of the question.</p>

<h3>Induction Proofs</h3>

<p>There&rsquo;s one more thing that I&rsquo;d like to mention here. Different people have different ways of typesetting induction proofs, with varying degrees of success. Personally, I like the <code>description</code> environment for outlining the base case, induction hypothesis, and inductive step of the proof. It works well for basically every induction proof, and looks nice and clean.</p>

<h2>Feedback</h2>

<p>Be sure to let me know how you like this template! It works for me, but obviously I&rsquo;m only using it for a small number of things on exactly one system. If something doesn&rsquo;t seem to work, or if you&rsquo;d like to see a particular feature implemented, comment or create a GitHub issue to let me know!</p>

<hr />

<p><br></p>

<h3>Jake on the Web</h3>

<p><a class="image-link" href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on
<a href="https://www.github.com/jez/">GitHub</a> or paying a visit to <a href="https://jez.io/">my homepage</a>. If this post was about one of
my open source projects, make sure to star it on GitHub! I love hearing what
people think, so feel free to comment, open an issue, or send me an email.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting Up MobaXterm for SSH on Windows]]></title>
    <link href="https://blog.jez.io/2014/09/28/setting-up-mobaxterm-for-ssh-on-windows/"/>
    <updated>2014-09-28T11:11:05-07:00</updated>
    <id>https://blog.jez.io/2014/09/28/setting-up-mobaxterm-for-ssh-on-windows</id>
    <content type="html"><![CDATA[<p>For an optimal SSH experience, your best best is to use Linux or Mac OS X. However, if you&rsquo;re dead-set on using Windows, MobaXterm has the best overall experience. This post guides you through setting it up and outlines some of its coolest features.</p>

<!-- more -->


<h2>Download and Install</h2>

<p>The download and installation procedure for MobaXterm is pretty standard.</p>

<h3>1. Navigate to MobaXterm&rsquo;s Site</h3>

<p>You&rsquo;ll want to download the Home Edition, so find its link on the download page, or just go <a href="http://mobaxterm.mobatek.net/download-home-edition.html">here</a>. You&rsquo;ll see two options: one to install as a system-wide application (labelled &ldquo;installer&rdquo;), and one for installing to a flash drive (labelled &ldquo;portable edition&rdquo;). Unless you&rsquo;d really like to install to a flash drive, click the former and run the file once it&rsquo;s downloaded.</p>

<h3>2. Install</h3>

<p>I had trouble running the installer when I first downloaded it; Windows complained that the app was from an unrecognized publisher, so I had to click &ldquo;More info&rdquo; and then &ldquo;Run anyway&rdquo; to get the installer to run (this was on Windows 8, the process might be different if you run into this issue).</p>

<p>Installing MobaXterm is simple. Just click through all the menus; no special setup is required here.</p>

<h3>3. Configure Your SSH Session</h3>

<p>When you first log in, you&rsquo;ll see a prompt where you can directly SSH as you would on a normal terminal.</p>

<p><a class="image-link" href="https://blog.jez.io/images/mobaxterm-ssh.png"><img src="https://blog.jez.io/images/mobaxterm-ssh.png" title="SSH Prompt" ></a></p>

<p>If you type <code>ssh &lt;andrewid&gt;@unix.andrew.cmu.edu</code>, it will prompt you for your CMU password and then log you in. The program will also ask if you want to save your password. In the free version, it doesn&rsquo;t allow you to encrypt your stored passwords with a master password, so they&rsquo;re stored in the clear (this means anyone can read these if they got control of your computer). With this in mind, it&rsquo;s not a good idea to allow it to save your password, but I suppose no one&rsquo;s stopping you.</p>

<p><a class="image-link" href="https://blog.jez.io/images/mobaxterm-password.png"><img src="https://blog.jez.io/images/mobaxterm-password.png" title="Save Password Prompt" ></a></p>

<p>This process of typing out your username and hostname every time you want to SSH can get annoying, though. MobaXterm allows you to save sessions so that you can easily log in without typing <code>ssh &lt;andrewid&gt;@unix.andrew.cmu.edu</code> each time.</p>

<p>To create a new session, click the &ldquo;Session&rdquo; button in the top left.</p>

<p><a class="image-link" href="https://blog.jez.io/images/mobaxterm-new-session.png"><img src="https://blog.jez.io/images/mobaxterm-new-session.png" title="New Session" ></a></p>

<p>Then you&rsquo;ll see a screen that allows you to enter the settings for that session.</p>

<p><a class="image-link" href="https://blog.jez.io/images/mobaxterm-configure-session.png"><img src="https://blog.jez.io/images/mobaxterm-configure-session.png" title="Configure New Session" ></a></p>

<p>The fields and values you&rsquo;ll need to populate are:</p>

<ul>
<li><strong>Remote host</strong>: <code>unix.andrew.cmu.edu</code></li>
<li><strong>Specify username</strong>: check the box, then <code>&lt;Your-AndrewID&gt;</code></li>
<li><strong>Port</strong>: 22</li>
</ul>


<p>You can also choose a bunch of other settings for this session. Feel free to peruse them and see if there&rsquo;s something you want to change (note that these settings will only be used when you use this session to log in). You might want to change the &ldquo;Session name&rdquo; to something more concise.</p>

<p>After that, click &ldquo;OK&rdquo; and your session will appear in the panel on the left under &ldquo;Saved sessions&rdquo;.</p>

<h2>Cool MobaXterm Features</h2>

<p>This section lists a few features that MobaXterm does better than other SSH options like PuTTY.</p>

<p>First, MobaXterm has tabs and splits, which make managing your connections to a remote server much more enjoyable.</p>

<p>MobaXterm also has more sophisticated color options. Granted, it&rsquo;s still not as good as most Linux or Mac OS X terminal emulators. Out of the box, the colors are more pleasant than the default PuTTY color scheme. There are also 4 other pre-installed colors schemes, including <a href="http://ethanschoonover.com/solarized">Solarized Light and Solarized Dark</a>.</p>

<p>I can&rsquo;t emphasize enough how much of a different having a &ldquo;pretty&rdquo; terminal is. Given the amount of time you&rsquo;ll be spending in your terminal, being able to read its text is a must. Also check out the rest of the settings. There will very likely be a few things you&rsquo;d like to tweak that make the interface make more sense to you, which in turn will make you less frustrated when trying to get work done.</p>

<p>MobaXterm comes with a built in SCP client. This means you can transfer files between your remote server (like Andrew Unix) and your personal computer with the simplicity of a graphical, click and drag interface if you prefer. This is an alternative to WinSCP that&rsquo;s built into MobaXterm.</p>

<p>It also has a built in X server, which means that you can start programs on the remote host that have graphical displays. For example, this is useful if you have an assignment that requires you to write a program that manipulates images and view the results.</p>

<h2>Shameless Plug</h2>

<p>While all these features are great, ssh is a program that was meant to be used on Unix-based systems. I personally switched from Windows + Ubuntu to Mac OS X before coming to college, and it was one of the best decisions I made. If Mac OS X is a bit much for you, though, I strongly encourage you to install Linux, using either a VM or a dual-boot configuration. Doing programming and development work in a Linux environment makes nearly every task simpler than trying to do it on Windows.</p>

<hr />

<p><br></p>

<h3>Jake on the Web</h3>

<p><a class="image-link" href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on
<a href="https://www.github.com/jez/">GitHub</a> or paying a visit to <a href="https://jez.io/">my homepage</a>. If this post was about one of
my open source projects, make sure to star it on GitHub! I love hearing what
people think, so feel free to comment, open an issue, or send me an email.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running a VPS, Log 5: It's Not You, It's Me]]></title>
    <link href="https://blog.jez.io/2014/07/10/running-a-vps-log-5/"/>
    <updated>2014-07-10T13:48:43-07:00</updated>
    <id>https://blog.jez.io/2014/07/10/running-a-vps-log-5</id>
    <content type="html"><![CDATA[<p>It is with great sadness that I announce today that I am breaking up with my mail server. At least for a little while, that is. Let&rsquo;s say we&rsquo;re &ldquo;taking a break&rdquo; to &ldquo;see other people.&rdquo;</p>

<!-- more -->


<blockquote><p>I&rsquo;m sorry to say so<br>
but, sadly, it&rsquo;s true<br>
that Bang-ups<br>
and Hang-ups<br>
can happen to you.<br></p>

<p>Dr. Seuss</p></blockquote>

<h2>Don&rsquo;t get me wrong, we&rsquo;ve had a great run</h2>

<p>I&rsquo;ve learned so much from this foray into system administration and mail servers. I&rsquo;ve written about some of these experiences, and yet many more will go unwritten. I&rsquo;ve learned to persevere, to persist, and to have patience. I&rsquo;ve learned to dig deeper, to follow the clues, and to ask for help.</p>

<p>If asked whether I would do it all again, I would say yes in a heartbeat. Even knowing what I know now, I&rsquo;m sure that I would screw everything up all over again. Even still, this whole experience has given me the opportunity to plunge into a whole new sphere of discovery, affording me such immense and immersive exposure that would be too much to turn down given a second chance.</p>

<p>If asked whether I would recommend it to a friend, I would flinch for a second, but undoubtedly answer yes in the end. Sure, there are gentler introductions to some of the sysadmin roles I assumed for this project, and there are certainly more glamorous projects for a beginner which yield immediate and visible results, results that can be shown off and shared.</p>

<p>That being said, few projects lend such a sense of belonging in a community, such a sense of having begun a &ldquo;rite of passage,&rdquo; as hosting your own mail. For one thing, <strong>it&rsquo;s hard</strong>. Trying to mangle to your will the archaic technologies involved in serving mail bend is perhaps one of the most complicated and intensive feats which can be contained under the category of personal VPS projects. More than that, being able to say, &ldquo;This mail is mine, for me, and only me,&rdquo; is an incredibly rewarding yet private experience. It&rsquo;s something no one can take away, something no one can intrude upon.</p>

<h2>But I&rsquo;m just not ready for this kind of commitment</h2>

<p>I initially thought this project would take 3 days, perhaps a week tops, given that the original title of the tutorial was <a href="http://sealedabstract.com/code/nsa-proof-your-e-mail-in-2-hours/">&ldquo;NSA-Proof Your Email <strong>in 2 Hours</strong>&rdquo;</a>. Somehow, this endeavor has managed to encompass fully two and a half weeks. I&rsquo;m not saying that I&rsquo;ve been working exclusively on this project for that time, and I&rsquo;ve certainly been learning a great deal, but I can feel the marginal returns diminishing as time marches ever forward. As much as I hate to admit it, <strong>the summer is already half-way over</strong> for CMU students, and there are still so many technologies, projects, and gadgets that I want to sink my teeth into.</p>

<p>Another remark about &ldquo;being a sysadmin&rdquo;: it&rsquo;s stressful! I would be working on fixing something while ssh&#8217;ed in to my droplet, and I could see the stream of spammers and attackers trying to get through on random ports. While I had the appropriate firewall protections in place, it&rsquo;s thoughts like these that making falling asleep harder: &ldquo;What if I&rsquo;ve missed something? What if my system is critically vulnerable? How long do I have before everything comes crashing down?&rdquo; Stress culture aside, this is not a weight I want to shoulder regularly.</p>

<h2>Do you think we can still be friends?</h2>

<p>Ultimately, I had to make the choice to put this project on the back burner. That does not mean, however, that its flame has been snuffed entirely. This project has been incredibly rewarding, and I&rsquo;m still crazy-determined to get this system working. I mentioned before how &ldquo;privately rewarding&rdquo; it can be to serve one&rsquo;s own mail&ndash;I&rsquo;ve as of yet only had a taste of this goal, and I will return one day to reap it&rsquo;s full rewards. When this day will be, though, I&rsquo;m not sure.</p>

<p><br></p>

<div style="text-align: right;"><h4>Farewell.</h4></div>


<hr />

<p>If you&rsquo;ve been following along this series and you&rsquo;ve tragically decided to follow a similar path as that which I have followed, feel free to chat me up about it! I&rsquo;d be more than happy to offer some support, or give you advice on some resources to look at. I can&rsquo;t say that I&rsquo;ll answer every question, else I would have a working system, but hopefully I have managed to scrounge up something to make your life easier. See below for ways to get in touch.</p>

<hr />

<p><br></p>

<h3>Jake on the Web</h3>

<p><a class="image-link" href="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg"><img class="left" src="https://pbs.twimg.com/profile_images/463467877593407488/hfwJj20L.jpeg" width="135" height="135"></a>
If you cared enough to read that far, you should consider following me on
<a href="https://www.github.com/jez/">GitHub</a> or paying a visit to <a href="https://jez.io/">my homepage</a>. If this post was about one of
my open source projects, make sure to star it on GitHub! I love hearing what
people think, so feel free to comment, open an issue, or send me an email.</p>
]]></content>
  </entry>
  
</feed>
