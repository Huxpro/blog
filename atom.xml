<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Bits, Bytes, and Words]]></title>
  <link href="https://blog.jez.io/atom.xml" rel="self"/>
  <link href="https://blog.jez.io/"/>
  <updated>2017-11-12T01:45:22-05:00</updated>
  <id>https://blog.jez.io/</id>
  <author>
    <name><![CDATA[Jake Zimmerman]]></name>
    <email><![CDATA[jake@zimmerman.io]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Variables and Binding]]></title>
    <link href="https://blog.jez.io/variables-and-binding/"/>
    <updated>2017-10-28T22:04:01-04:00</updated>
    <id>https://blog.jez.io/variables-and-binding</id>
    <content type="html"><![CDATA[<p>Variables are central to programming languages, yet they&rsquo;re often
overlooked. Academic PL theory papers usually take for granted having
proper implementations of variables. Most popular languages butcher
variables, <a href="https://existentialtype.wordpress.com/2012/02/01/words-matter/">confusing them with assignables</a>. Despite
being taken for granted, implementing substitution on variables is easy
to get wrong.</p>

<!-- more -->


<p>There are a number of different solutions for handling variables and
binding within a programming language implementation. We&rsquo;ll take a look
at these three:</p>

<ul>
<li>explicit variables,</li>
<li>de Bruijn indices, and</li>
<li>locally nameless terms</li>
</ul>


<p>Before we get to solutions, we need to outline the problem. Implementing
variables and binding reduces to implementing substitution (because
variables are giving meaning by substitution!), and the trickiest part of
substitution is variable capture.</p>

<h2>Variable Capture</h2>

<p>The most common way to get variables and binding wrong is to
accidentally let variables be <em>captured</em> during substitution. Consider
this example:</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='python'><span class='line'>                  <span class="err">◀────────────────┐</span>
</span><span class='line'>                         <span class="err">┌──────┐</span>  <span class="err">│</span>
</span><span class='line'>                   <span class="p">(</span><span class="err">λ</span><span class="n">x</span><span class="o">.</span> <span class="err">λ</span><span class="n">y</span><span class="o">.</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">)</span> <span class="n">y</span>
</span><span class='line'>                     <span class="err">└──────┘</span></span></code></pre></td></tr></table></div></figure>


<p>There are two distinct <code>y</code> variables here:</p>

<ul>
<li>one which refers to the variable bound by the nested lambda</li>
<li>one which refers to some <code>y</code> in the surrounding scope</li>
</ul>


<p>For this example, let&rsquo;s say we choose to represent variables as string
identifiers. If we step the function application, it steps to a
substitution of <code>y</code> for <code>x</code>:</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='python'><span class='line'>  <span class="p">(</span><span class="err">λ</span><span class="n">x</span><span class="o">.</span> <span class="err">λ</span><span class="n">y</span><span class="o">.</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">)</span> <span class="n">y</span>
</span><span class='line'>  <span class="c"># Apply the function, giving us:</span>
</span><span class='line'><span class="err">→</span> <span class="p">[</span><span class="n">y</span> <span class="o">/</span> <span class="n">x</span><span class="p">]</span> <span class="p">(</span><span class="err">λ</span><span class="n">y</span><span class="o">.</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'>  <span class="c"># Traverse under the lambda:</span>
</span><span class='line'><span class="err">→</span> <span class="err">λ</span><span class="n">y</span><span class="o">.</span> <span class="p">[</span><span class="n">y</span> <span class="o">/</span> <span class="n">x</span><span class="p">]</span> <span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'>  <span class="c"># Distribute:</span>
</span><span class='line'><span class="err">→</span> <span class="err">λ</span><span class="n">y</span><span class="o">.</span> <span class="p">([</span><span class="n">y</span> <span class="o">/</span> <span class="n">x</span><span class="p">]</span> <span class="n">x</span><span class="p">)</span> <span class="o">+</span> <span class="p">([</span><span class="n">y</span> <span class="o">/</span> <span class="n">x</span><span class="p">]</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'>  <span class="c"># Substitute y where we found an x:</span>
</span><span class='line'><span class="err">→</span> <span class="err">λ</span><span class="n">y</span><span class="o">.</span> <span class="n">y</span> <span class="o">+</span> <span class="n">y</span></span></code></pre></td></tr></table></div></figure>


<p><strong>Note</strong>: <code>[e₁ / x] e₂</code> is read as &ldquo;substitute <code>e₁</code> for <code>x</code> in <code>e₂</code>.&rdquo;</p>

<p>We started with a function which would take two numbers and sum them.
After partially applying that function, we&rsquo;ve ended up with a function
that doubles it&rsquo;s argument. Whoops! We can look at the issue visually in
this diagram:</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='python'><span class='line'>       <span class="err">◀─────┐</span>             <span class="err">┃</span>         <span class="err">┌──┐</span>
</span><span class='line'>         <span class="err">λ</span><span class="n">y</span><span class="o">.</span> <span class="n">y</span> <span class="o">+</span> <span class="n">y</span>         <span class="err">┃</span>        <span class="err">λ</span><span class="n">y</span><span class="o">.</span> <span class="n">y</span> <span class="o">+</span> <span class="n">y</span>
</span><span class='line'>          <span class="err">└──────┘</span>         <span class="err">┃</span>         <span class="err">└──────┘</span></span></code></pre></td></tr></table></div></figure>


<p>We were expecting to get out the binding structure on the left, but
instead we got the binding structure on the right. This is called
&ldquo;variable capture&rdquo; or just <strong>capture</strong> for short. The <code>y</code> that we
applied to the summing function was captured by the binding site of the
nested lambda.</p>

<h2>Explicit Variables</h2>

<p>When we&rsquo;re implementing substitution (whether for terms, for types, or
for any other sort of syntax), our primary goal is to implement
<strong>capture-avoiding substitution</strong>. There are many internal
representations we can pick from to achieve this. The strategy above
where variables were simple strings is called <strong>explicit variables</strong>.</p>

<p>Explicit variables are nice because we can represent them directly with
an algebraic data type. For example, for the lambda calculus we might
have this:</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='sml'><span class='line'><span class="kr">datatype</span> <span class="kt">term</span>
</span><span class='line'>  <span class="p">=</span> <span class="nc">Var</span> <span class="kr">of</span> <span class="n">string</span>
</span><span class='line'>  <span class="p">|</span> <span class="nc">Lam</span> <span class="kr">of</span> <span class="n">ident</span> <span class="n">*</span> <span class="n">term</span>
</span><span class='line'>  <span class="p">|</span> <span class="nc">App</span> <span class="kr">of</span> <span class="n">term</span> <span class="n">*</span> <span class="n">term</span></span></code></pre></td></tr></table></div></figure>


<p>Implementing capture-avoiding substitution using this representation
isn&rsquo;t pleasant, but it is possible. It uses the observation that there&rsquo;s
no difference between, say <code>λx. x</code> and <code>λy. y</code>. Our choice of variable
names doesn&rsquo;t matter&mdash;they&rsquo;re both the identity function.</p>

<p>Being able to rename bound variables at will is called <strong>α-varying</strong>,
and when two terms can be made identical by just α-varying them,
we say they&rsquo;re <strong>α-equivalent</strong>.</p>

<p>It only makes sense to α-vary bound variables, not free variables. If we
have two functions like <code>λx. x + y</code> and <code>λx. x + z</code>, we can&rsquo;t safely
α-vary <code>y</code> to <code>z</code>, because we have no way of knowing whether <code>y</code> and <code>z</code>
are the same! Their same-ness depends on the context.</p>

<p>We can implement capture-avoiding substution for the explicit variable
representation by α-varying whenever we detect that a variable might be
captured. To revisit our example from earlier:</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='python'><span class='line'>  <span class="p">(</span><span class="err">λ</span><span class="n">x</span><span class="o">.</span> <span class="err">λ</span><span class="n">y</span><span class="o">.</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">)</span> <span class="n">y</span>
</span><span class='line'><span class="err">→</span> <span class="p">[</span><span class="n">y</span> <span class="o">/</span> <span class="n">x</span><span class="p">]</span> <span class="p">(</span><span class="err">λ</span><span class="n">y</span><span class="o">.</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'>  <span class="c"># our free 'y' will get captured by going under</span>
</span><span class='line'>  <span class="c"># this λ, so let's α-vary the bound 'y' to 'z':</span>
</span><span class='line'><span class="err">→</span> <span class="p">[</span><span class="n">y</span> <span class="o">/</span> <span class="n">x</span><span class="p">]</span> <span class="p">(</span><span class="err">λ</span><span class="n">z</span><span class="o">.</span> <span class="n">x</span> <span class="o">+</span> <span class="n">z</span><span class="p">)</span>
</span><span class='line'><span class="err">→</span> <span class="err">λ</span><span class="n">z</span><span class="o">.</span> <span class="p">[</span><span class="n">y</span> <span class="o">/</span> <span class="n">x</span><span class="p">]</span> <span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="n">z</span><span class="p">)</span>
</span><span class='line'><span class="err">→</span> <span class="err">λ</span><span class="n">z</span><span class="o">.</span> <span class="n">x</span> <span class="o">+</span> <span class="n">z</span></span></code></pre></td></tr></table></div></figure>


<p>The trick here is that by picking <code>z</code> we picked a name that doesn&rsquo;t
collide with any of the free variables with in <code>λy. x + y</code>. Namely,
we&rsquo;re glad we didn&rsquo;t α-vary <code>y</code> to <code>x</code>! To ensure this, our
implementation can either</p>

<ul>
<li>calculate the set of free variables used in a subexpression and make
sure not to use one of those, or</li>
<li>just generate a globally unique name by incrementing a global
counter, giving us names like <code>x1</code>, <code>x2</code>, <code>x3</code>, etc.</li>
</ul>


<p>On the surface, explicit variables look rather naïve, and maybe they
are. However, they work perfectly if you don&rsquo;t need substitution in the
first place! For example, a compiler never needs to substitute a term
for a variable in another term because compilers don&rsquo;t evaluate code:
they translate one intermediate language into another.</p>

<p>On the other hand, interpreters use term substitution heavily, and even
compilers need to substitute types for variables in other types and in
terms. We&rsquo;ll now look at some better solutions for implementing
capture-avoiding substitution.</p>

<h2>De Bruijn Indices</h2>

<p>With explicit variables, we had to keep track of names in use and check
whether to α-vary before a collision happened. The next representation
we&rsquo;ll look at sidesteps this problem by not giving name to variables at
all! Let&rsquo;s take a look at our picture from before:</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='python'><span class='line'>                         <span class="err">┌──────┐</span>
</span><span class='line'>                    <span class="err">λ</span><span class="n">x</span><span class="o">.</span> <span class="err">λ</span><span class="n">y</span><span class="o">.</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span><span class='line'>                     <span class="err">└──────┘</span></span></code></pre></td></tr></table></div></figure>


<p>In this picture, the only thing that&rsquo;s really important to us is the
binding structure; we don&rsquo;t actually care that <code>x</code> is called <code>x</code>, we
just care that applying this function sticks the argument everywhere the
line on the bottom points to. We could omit the names entirely, as long
as we can still capture where the lines should connect to:</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='python'><span class='line'>                        <span class="err">┌─────┐</span>
</span><span class='line'>                   <span class="p">(</span><span class="err">λ</span><span class="o">.</span> <span class="err">λ</span><span class="o">.</span> <span class="err">◆</span> <span class="o">+</span> <span class="err">◆</span><span class="p">)</span>
</span><span class='line'>                     <span class="err">└────┘</span></span></code></pre></td></tr></table></div></figure>


<p>One way of doing this is just to count how many bindings sites up you
have to go before you arrive at the location the variable is bound.
Under this representation, variables are just indices into a list of the
binding sites; we call these indices <strong>de Bruijn indices</strong>:</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='python'><span class='line'>                   <span class="p">(</span><span class="err">λ</span><span class="o">.</span> <span class="err">λ</span><span class="o">.</span> <span class="err">①</span> <span class="o">+</span> <span class="err">⓪</span><span class="p">)</span></span></code></pre></td></tr></table></div></figure>


<p><strong>Note</strong>: I&rsquo;m using circled numbers like <code>⓪</code> for the variable with de
Bruijn index <code>0</code>.</p>

<p>Under this representation, a de Bruijn index of 1 means &ldquo;skip over one
lambda&rdquo; and an index of 0 means &ldquo;skip over zero lambdas&rdquo; or simply &ldquo;go
to the closest lambda.&rdquo; In code, de Bruijn terms can be represented
with this datatype:</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='sml'><span class='line'><span class="kr">datatype</span> <span class="kt">term</span>
</span><span class='line'>  <span class="p">=</span> <span class="nc">Var</span> <span class="kr">of</span> <span class="n">int</span>
</span><span class='line'>  <span class="p">|</span> <span class="nc">Lam</span> <span class="kr">of</span> <span class="n">term</span>
</span><span class='line'>  <span class="p">|</span> <span class="nc">App</span> <span class="kr">of</span> <span class="n">term</span> <span class="n">*</span> <span class="n">term</span></span></code></pre></td></tr></table></div></figure>


<p><code>Var</code> now takes an <code>int</code> instead of a <code>string</code>. <code>Lam</code> only takes the
body of the lambda: to refer to argument of a lambda function, count
back the appropriate number of <code>Lam</code>s to skip over.</p>

<p>Now that all variables are represented by indices, it&rsquo;s much easier to
know which variables are free and which are bound: a variable is free if
its index is larger than the number of lambdas it&rsquo;s under.</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='python'><span class='line'>                  <span class="err">◀───────────────┐</span>
</span><span class='line'>                        <span class="err">┌──────┐</span>  <span class="err">│</span>
</span><span class='line'>                   <span class="p">(</span><span class="err">λ</span><span class="o">.</span> <span class="err">λ</span><span class="o">.</span> <span class="err">①</span> <span class="o">+</span> <span class="err">⓪</span><span class="p">)</span> <span class="err">③</span>
</span><span class='line'>                     <span class="err">└────┘</span></span></code></pre></td></tr></table></div></figure>


<p>The second <code>③</code> is free because it&rsquo;s under zero lambdas. Put another way,
if we were keeping a list of the binding sites we&rsquo;d traverse under to
reach <code>③</code> our list would be empty, so accessing index 3 would be out of
bounds.</p>

<p>With this representation, capture avoiding substitution becomes much
more manageable.</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='python'><span class='line'>  <span class="p">(</span><span class="err">λ</span><span class="o">.</span> <span class="err">λ</span><span class="o">.</span> <span class="err">①</span> <span class="o">+</span> <span class="err">⓪</span><span class="p">)</span> <span class="err">③</span>
</span><span class='line'><span class="err">→</span> <span class="p">[</span><span class="err">③</span> <span class="o">/</span> <span class="err">⓪</span><span class="p">]</span> <span class="p">(</span><span class="err">λ</span><span class="o">.</span> <span class="err">①</span> <span class="o">+</span> <span class="err">⓪</span><span class="p">)</span>
</span><span class='line'><span class="c"># We increment free variables as we descend under binders</span>
</span><span class='line'><span class="err">→</span> <span class="err">λ</span><span class="o">.</span> <span class="p">[</span><span class="err">④</span> <span class="o">/</span> <span class="err">①</span><span class="p">]</span> <span class="p">(</span><span class="err">①</span> <span class="o">+</span> <span class="err">⓪</span><span class="p">)</span>
</span><span class='line'><span class="err">→</span> <span class="err">λ</span><span class="o">.</span> <span class="p">([</span><span class="err">④</span> <span class="o">/</span> <span class="err">①</span><span class="p">]</span> <span class="err">①</span><span class="p">)</span> <span class="o">+</span> <span class="p">([</span><span class="err">④</span> <span class="o">/</span> <span class="err">①</span><span class="p">]</span> <span class="err">⓪</span><span class="p">)</span>
</span><span class='line'><span class="err">→</span> <span class="err">λ</span><span class="o">.</span> <span class="err">④</span> <span class="o">+</span> <span class="err">⓪</span></span></code></pre></td></tr></table></div></figure>


<p>Note how the <code>③</code> changed to a <code>④</code>: its new location in the program lies
under one extra lambda than before. Thus to refer to the same position
as at the start of the substitution, we increment to record that we&rsquo;ll
have to skip over one extra lambda. This process of adding one when
going under a binder is called <strong>lifting</strong> (or sometimes, <strong>shifting</strong>).</p>

<p>Lifting takes the guesswork out of implementing substitution. As a
bonus, we&rsquo;ve actually forced α-equivalent terms to have identical
structure! Checking for α-equivalence now is a straightforward tree
traversal: we check that both nodes are simply pairwise equal, then that
their children are α-equivalent.</p>

<h2>de Bruijn Indices and Lifting</h2>

<p>On the other hand, working with de Bruijn indices can still be tricky.
It&rsquo;s easy enough to remember to lift variables when substituting, but
more generally, you have to remember to lift <em>whenever</em> you put a free
variable into a context different from where it was defined. This can
get really hairy; spotting when a usage context diverges from a
definition context is often learned the hard way! Namely, by forgetting
to lift somewhere, pouring over the code and the types for hours, then
finally spotting the mistake.<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<p>To make this a little more concrete, I&rsquo;ll use a specific example. It
comes from the judgement for deciding whether two type constructors are
equivalent in System F<sub>ω</sub>. Focus on the variables and contexts
in use (don&rsquo;t pay too much attention to what the judgement actually is):</p>

<p>$$
\frac{
\Gamma, \alpha :: \kappa_1 \; \vdash \; c \, \alpha \iff c&#8217; \, \alpha :: \kappa_2
}{
\Gamma \; \vdash \; c \iff c&#8217; :: \kappa_1 \to \kappa_2
}
$$</p>

<p>In words, &ldquo;to check whether type constructors <code>c</code> and <code>c'</code> are
equivalent, assume that <code>α</code> is a type constructor of kind <code>κ₁</code>, then
apply <code>α</code> to <code>c</code> and <code>c'</code> and see if you get the same result in both
cases.&rdquo; Though again, understanding this judgement is beside the point.</p>

<p>The real tricky part here is obscured by the fact that we&rsquo;re
representing variables with names instead of de Bruijn indices. If we
were to take a naive pass at translating  this rule to use de Bruijn
indices, we might end up with:</p>

<p>$$
\frac{
\Gamma, \kappa_1 \; \vdash \; c \, ⓪ \iff c&#8217; \, ⓪ :: \kappa_2
}{
\Gamma \; \vdash \; c \iff c&#8217; :: \kappa_1 \to \kappa_2
}
$$</p>

<p>Note how <code>Γ</code> became a stack instead of a map because we&rsquo;re mapping
<em>indices</em> to kinds (instead of string keys to kinds). The element we
just pushed on (<code>κ₁</code>) is on the top of the stack at index <code>0</code>, and
everything else in the context can now be found at <code>index + 1</code>. That
means that above the line, <code>⓪</code> refers to the <code>κ₁</code> in the context.</p>

<p>But <code>⓪)</code> might <em>also</em> be in use at the top level of <code>c</code> or <code>c'</code>! In
either of these terms, <code>⓪</code> at the top level is a free variable referring
to the first thing in <code>Γ</code>. The problem is that the first thing in <code>Γ,
κ₁</code> is not the first thing in <code>Γ</code>! To preserve the correct binding
structure, we&rsquo;d have to go through <code>c</code> and <code>c'</code>, lifting all free
variables by one to reflect the fact that we just injected something
into the surrounding context:</p>

<p>$$
\frac{
\Gamma, \kappa_1 \; \vdash \; (c \uparrow) \, ⓪ \iff (c&#8217; \uparrow) \, ⓪ :: \kappa_2
}{
\Gamma \; \vdash \; c \iff c&#8217; :: \kappa_1 \to \kappa_2
}
$$</p>

<p>In this rule, <code>↑</code> is the lifting operator, which traverses through a
term&rsquo;s free variables and increments them. After it&rsquo;s run, there will be
no free variables in <code>c</code> or <code>c'</code> with index 0, which gives us room to
use <code>⓪</code> for our own purposes.</p>

<p>In some sense, this is the opposite problem that we had when we used
explicit variables. For that, we had to go through and rename <em>bound
variables</em> so that nothing clashed. Now, we have to lift <em>free
variables</em> so that nothing clashes. Put another way, explicit variables
excel at dealing with free variables, while de Bruijn indices excel at
representing bound variables.</p>

<p>The next representation we&rsquo;ll look at, locally nameless terms,
effectively steals the best of each, combining them into one
representation.</p>

<h2>Locally Nameless Terms</h2>

<p>We identified that de Bruijn indices represent bound variables well at
the expense of free variables. <strong>Locally nameless terms</strong> solve this by
giving free variables explicit names, but using indices instead of names
for bound (or &ldquo;local&rdquo;) variables, thus the name<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>.</p>

<p>Locally nameless terms might be represented by a data type like this:</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='sml'><span class='line'><span class="kr">datatype</span> <span class="kt">term</span>
</span><span class='line'>  <span class="p">=</span> <span class="nc">FV</span> <span class="kr">of</span> <span class="n">string</span>
</span><span class='line'>  <span class="p">|</span> <span class="nc">BV</span> <span class="kr">of</span> <span class="n">int</span>
</span><span class='line'>  <span class="p">|</span> <span class="nc">Lam</span> <span class="kr">of</span> <span class="n">term</span>
</span><span class='line'>  <span class="p">|</span> <span class="nc">App</span> <span class="kr">of</span> <span class="n">term</span> <span class="n">*</span> <span class="n">term</span></span></code></pre></td></tr></table></div></figure>


<p><code>FV</code> constructs a free variable, and similarly <code>BV</code> constructs a bound
variable. <code>FV</code> takes a <code>String</code>, because free variables get names, and
<code>BV</code> takes an <code>Int</code>, because bound variables are nameless de Bruijn
indices. As before, <code>Lam</code> only takes the body of the lambda function;
we&rsquo;ll use de Bruijn indices to count back to the appropriate binding
site of a variable.</p>

<p>In practice, locally nameless terms are best provided through a library,
where this internal implementation is hidden and the user interacts with
an abstract interface:</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='sml'><span class='line'><span class="c">(*</span><span class="cm"> The actual type of a locally nameless term with *)</span>
</span><span class='line'><span class="c">(*</span><span class="cm"> a distinction between FV and BV is hidden       *)</span>
</span><span class='line'><span class="kr">type</span> <span class="kt">term</span>
</span><span class='line'>
</span><span class='line'><span class="c">(*</span><span class="cm"> termView is only one level deep: after that, *)</span>
</span><span class='line'><span class="c">(*</span><span class="cm"> you end up with a term, which is abstract    *)</span>
</span><span class='line'><span class="kt">datatype</span> <span class="kt">termView</span>
</span><span class='line'>  <span class="p">=</span> <span class="n">Var</span> <span class="kr">of</span> <span class="n">string</span>
</span><span class='line'>  <span class="p">|</span> <span class="n">Lam</span> <span class="kr">of</span> <span class="n">string</span> <span class="n">*</span> <span class="n">term</span>
</span><span class='line'>  <span class="p">|</span> <span class="n">App</span> <span class="kr">of</span> <span class="n">term</span> <span class="n">*</span> <span class="n">term</span>
</span><span class='line'>
</span><span class='line'><span class="c">(*</span><span class="cm"> Convert between the abstract and view types *)</span>
</span><span class='line'><span class="kr">val</span> <span class="n">out</span> <span class="p">:</span> <span class="n">term</span> <span class="p">-&gt;</span> <span class="n">termView</span>
</span><span class='line'><span class="kr">val</span> <span class="n">into</span> <span class="p">:</span> <span class="n">termView</span> <span class="p">-&gt;</span> <span class="n">term</span>
</span><span class='line'>
</span><span class='line'><span class="c">(*</span><span class="cm"> Substitution and alpha equivalence work on abstract terms *)</span>
</span><span class='line'><span class="kr">val</span> <span class="n">subst</span> <span class="p">:</span> <span class="n">term</span> <span class="p">-&gt;</span> <span class="n">string</span> <span class="p">-&gt;</span> <span class="n">term</span>
</span><span class='line'><span class="kr">val</span> <span class="n">aeq</span> <span class="p">:</span> <span class="n">term</span> <span class="p">-&gt;</span> <span class="n">term</span> <span class="p">-&gt;</span> <span class="n">bool</span></span></code></pre></td></tr></table></div></figure>


<p>The fresh name generation from explicit variables is handled under the
hood by <code>out</code>. Lifting is handled automatically every time we call
<code>into</code> on a <code>Lam</code>. By only implementing operations like <code>subst</code> and
<code>aeq</code> on the abstract representations, we&rsquo;ve effectively forced the type
system to check that we lift and generate fresh names in all the right
places!</p>

<h2>Closing Considerations</h2>

<p>Locally nameless terms are generally pretty great. They blend the
strengths of explicit variables and de Bruijn indices into a new
structure that makes working with variables and binding hard to get
wrong. That being said, I&rsquo;d be remiss if I didn&rsquo;t point out two
drawbacks:</p>

<ul>
<li>Locally nameless terms can be slow.

<ul>
<li>In most code, we&rsquo;ll find ourselves converting between <code>term</code>s
and <code>termView</code>s. This brings with it the overhead of the function
call, allocating new memory for the new structures, and can even
sometimes make a linear algorithm accidentally quadratic.</li>
</ul>
</li>
<li>It&rsquo;s more annoying to use pattern matching.

<ul>
<li>Most of the time we&rsquo;ll have things of type <code>term</code>. Since <code>term</code> is
abstract, we can&rsquo;t pattern match on it directly; we have to instead
call <code>out</code> and pattern match the result.</li>
</ul>
</li>
</ul>


<p>Despite these drawbacks, I still prefer locally nameless terms.</p>

<ul>
<li>I&rsquo;ll gladly trade correctness for performance, and it&rsquo;s definitely
easier to be correct when working with locally nameless terms. We can
always optimize for performance later by profiling the code to find
the slowness!</li>
<li>Calling <code>out</code> in a few places is a small ergonomic price to pay for
correctness. When you forget to call <code>out</code> or <code>into</code>, the type checker
will remind you. There are also some cool language extensions which
can make calling <code>out</code> and <code>in</code> syntactically more pleasant, like
<a href="https://ocharles.org.uk/blog/posts/2014-12-02-view-patterns.html">View Patterns</a> in Haskell.</li>
</ul>


<p>Variables show up in the most interesting places, and I always smile
when I find them being used in new and surprising ways. On the flip
side, languages that implement variables and binding suffer no end of
trouble and programmers are forced to cope with their absence.<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></p>

<p>I think variables are just so cool!</p>

<!-- vim:tw=72
-->

<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>If it wasn&rsquo;t clear, this has happened to me many times, and yes I&rsquo;m still getting over it 😓<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>We could, by analogy, refer to the de Bruijn index representation as the globally nameless representation, which is more descriptive but isn&rsquo;t something you&rsquo;ll hear used anywhere.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>It&rsquo;s for this very reason that variables are the first topic we cover in 15-312 Principles of Programming Languages.<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[System Fω and Parameterization]]></title>
    <link href="https://blog.jez.io/system-f-param/"/>
    <updated>2017-09-27T22:14:45-04:00</updated>
    <id>https://blog.jez.io/system-f-param</id>
    <content type="html"><![CDATA[<p>When I first learned about System F<sub>ω</sub>, I was confused about
the difference between <code>∀(t.τ)</code> (forall types) and <code>λ(u.c)</code> (type
abstractions) for a long time, but recently I finally grasped the
difference! Both of these constructs have to do with parameterization
(factoring out a variable so that it&rsquo;s bound), but the two types have
drastically different meanings.</p>

<!-- more -->


<h2>Questions</h2>

<p>We&rsquo;ll start off with some questions to keep in mind throughout these
notes. Our goals by the end are to understand what the questions are
asking, and have at least a partial&mdash;if not complete&mdash;answer to each.</p>

<p>First, consider this code.</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='sml'><span class='line'><span class="kr">datatype</span> <span class="nd">'a</span> <span class="kt">list</span> <span class="p">=</span> <span class="nc">Nil</span> <span class="p">|</span> <span class="nc">Cons</span> <span class="kr">of</span> <span class="nd">'a</span> <span class="n">*</span> <span class="nd">'a</span> <span class="n">list</span></span></code></pre></td></tr></table></div></figure>


<ul>
<li>What really is &ldquo;<code>list</code>&rdquo; in this code?</li>
<li>Or put another way, how would we define <code>list</code> in System
F<sub>ω</sub>?</li>
</ul>


<p>Thinking more broadly,</p>

<ul>
<li>What separates <code>∀(t.τ)</code> and <code>λ(u.c)</code>?</li>
<li>What is parameterization, and how does it relate to these things?</li>
</ul>


<h2>System F<sub>ω</sub></h2>

<p>The answers to most of these questions rely on a solid definition of
System F<sub>ω</sub>. We&rsquo;ll be using this setup.</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class=''><span class='line'>Kind κ ::= * | κ → κ | ···
</span><span class='line'>
</span><span class='line'>           abstract       concrete      arity/valence
</span><span class='line'>Con c  ::= ···
</span><span class='line'>         | arr(c₁; c₂)    c₁ → c₂       (Con, Con)Con
</span><span class='line'>         | all{κ}(u.c)    ∀(u ∷ κ). c   (Kind, Con.Con)Con
</span><span class='line'>         | lam{κ}(u.c)    λ(u ∷ κ). c   (Kind, Con.Con)Con
</span><span class='line'>         | app(c₁; c₂)    c₁(c₂)        (Con, Con)Con</span></code></pre></td></tr></table></div></figure>


<p>Some points to note:</p>

<ul>
<li><code>∀(u ∷ κ). c</code> and <code>λ(u ∷ κ). c</code> have the same arity.</li>
<li><code>∀(u ∷ κ). c</code> and <code>λ(u ∷ κ). c</code> both <em>bind</em> a constructor variable.
This makes these two operators <em>parametric</em>.</li>
<li>Only <code>λ(u ∷ κ). c</code> has a matching elim form: <code>c₁(c₂)</code>.
(There are no elim forms for <code>c₁ → c₂</code> and <code>∀(u ∷ κ). c</code>, because they
construct types of kind <code>*</code>. This will be important later.)</li>
</ul>


<p>It&rsquo;ll also be important to have these two inference rules for kinding:</p>

<p>$$
\frac{
  \Delta, u :: \kappa \vdash c :: *
}{
  \Delta \vdash \forall(u :: \kappa). \, c :: *
}\;(\texttt{forall-kind})
$$
$$
\frac{
  \Delta, u :: \kappa \vdash c :: \kappa&#8217;
}{
  \Delta \vdash \lambda(u :: \kappa). \, c :: \kappa \to \kappa&#8217;
}\;(\texttt{lambda-kind})
$$</p>

<h2>Defining the <code>list</code> Constructor</h2>

<p>Let&rsquo;s take another look at this datatype definition from above:</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='sml'><span class='line'><span class="kr">datatype</span> <span class="nd">'a</span> <span class="kt">list</span> <span class="p">=</span> <span class="nc">Nil</span> <span class="p">|</span> <span class="nc">Cons</span> <span class="kr">of</span> <span class="nd">'a</span> <span class="n">*</span> <span class="nd">'a</span> <span class="n">list</span></span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;ve <a href="https://blog.jez.io/variables-in-types/">already seen</a> how to encode the type of lists
of integers using inductive types:</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class=''><span class='line'>intlist = μ(t. 1 + (int × t))</span></code></pre></td></tr></table></div></figure>


<p>Knowing what we know about System F (the &ldquo;<strong>polymorphic</strong> lambda
calculus&rdquo;), our next question should be &ldquo;how do we encode
<strong>polymorphic</strong> lists?&rdquo; Or more specifically, which of these two
operators (<code>λ</code> or <code>∀</code>) should we pick, and why?</p>

<p>First, we should be more specific, because there&rsquo;s a difference between
<code>list</code> and <code>'a list</code>. Let&rsquo;s start off with defining <code>list</code> in
particular. From what we know of programming in Standard ML, we can do
things like:</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='sml'><span class='line'><span class="c">(*</span><span class="cm"> Apply 'int' to 'list' function! *)</span>
</span><span class='line'><span class="kr">type</span> <span class="kt">grades</span> <span class="p">=</span> <span class="n">int</span> <span class="n">list</span>
</span><span class='line'>
</span><span class='line'><span class="kr">type</span> <span class="kt">key</span> <span class="p">=</span> <span class="n">string</span>
</span><span class='line'><span class="kr">type</span> <span class="kt">val</span> <span class="p">=</span> <span class="n">real</span>
</span><span class='line'>
</span><span class='line'><span class="c">(*</span><span class="cm"> Apply '(key, val)' to 'list' function! *)</span>
</span><span class='line'><span class="kr">type</span> <span class="kt">updates</span> <span class="p">=</span> <span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="kr">val</span><span class="p">)</span> <span class="n">list</span></span></code></pre></td></tr></table></div></figure>


<p>If we look really closely, what&rsquo;s actually happening here is that <code>list</code>
is a type-level <em>function</em> that returns a type (and we use the <code>type foo
= ...</code> syntax to store that returned type in a variable).<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<p>Since <code>list</code> is actually a function from types to types, it must have
an arrow kind: <code>* → *</code>. Looking back at our two inference rules for
kinding, we see only one rule that lets us introduce an arrow kind: <code>λ(u
∷ κ). c</code>. On the other hand, <code>∀(u ∷ κ). c</code> must have kind <code>*</code>; it
<em>can&rsquo;t</em> be used to define type constructors.</p>

<p>Step 1: define list constructor? Check:</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class=''><span class='line'>list = λ(α ∷ *). μ(t. 1 + (α × t)))</span></code></pre></td></tr></table></div></figure>


<h2>Defining Polymorphic Lists</h2>

<p>It doesn&rsquo;t stop with the above definition, because it&rsquo;s still not
<em>polymorphic</em>. In particular, we can&rsquo;t just go write functions on
polymorphic lists with code like this:</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='sml'><span class='line'><span class="kr">fun</span> <span class="nf">foo</span> <span class="p">(</span><span class="n">x</span> <span class="p">:</span> <span class="n">list</span><span class="p">)</span> <span class="p">=</span> <span class="c">(*</span><span class="cm"> ··· *)</span></span></code></pre></td></tr></table></div></figure>


<p>We can&rsquo;t say <code>x : list</code> because all intermediate terms in a given
program have to type check as a type of kind <code>*</code>, whereas <code>list ∷ * →
*</code>. Another way of saying this: there isn&rsquo;t any way to introduce a value
of type <code>list</code> because there&rsquo;s no way to introduce values with arrow
kinds.</p>

<p>Meanwhile, we <em>can</em> write this:</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='sml'><span class='line'><span class="kr">fun</span> <span class="nf">foo</span> <span class="p">(</span><span class="n">x</span> <span class="p">:</span> <span class="nd">'a</span> <span class="n">list</span><span class="p">)</span> <span class="p">=</span> <span class="c">(*</span><span class="cm"> ··· *)</span></span></code></pre></td></tr></table></div></figure>


<p>When you get down to it, this is actually kind of weird. Why is it okay
to use <code>'a list</code>? I never defined <code>'a</code> anywhere, so wouldn&rsquo;t that make
it an unbound variable?</p>

<p>It turns out that when we use type variables like this, SML
automatically binds them for us by inserting <code>∀</code>s into our code. In
particular, it implicitly infers a type like this:</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='sml'><span class='line'><span class="kr">val</span> <span class="nv">foo</span> <span class="p">:</span> <span class="n">forall</span> <span class="nd">'a</span><span class="err">.</span> <span class="nd">'a</span> <span class="n">list</span> <span class="p">-&gt;</span> <span class="p">()</span></span></code></pre></td></tr></table></div></figure>


<p>SML inserts this <code>forall</code> automatically because its type system is a bit
less polymorphic than System F<sub>ω</sub>&rsquo;s. Some might call this a
drawback, though it does save us from typing <code>forall</code> annotations
ourselves. And really, for most anything else we&rsquo;d call a &ldquo;drawback&rdquo; of
this design, SML makes up the difference with modules.<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p>

<p>Step 2: make polymorphic list for use in annotation? Check:</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class=''><span class='line'>α list = ∀(α ∷ *). list(α)</span></code></pre></td></tr></table></div></figure>


<h2>Variables &amp; Parameterization</h2>

<p>Tada! We&rsquo;ve figured out how to take a list datatype from SML and encode
it in System F<sub>ω</sub>, using these two definitions:</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class=''><span class='line'>  list = λ(α ∷ *). μ(t. 1 + (α × t)))
</span><span class='line'>α list = ∀(α ∷ *). list(α)</span></code></pre></td></tr></table></div></figure>


<p>We could end here, but there&rsquo;s one more interesting point. If we look
back, we started out with the <code>∀</code> and <code>λ</code> operators having the same
arity, but somewhere along the way their behaviors differed. <code>λ</code> was
used to create type constructors, while <code>∀</code> was used to introduce
polymorphism.</p>

<p>Where did this split come from? What distinguishes <code>∀</code> as being the
go-to type for polymorphism, while <code>λ</code> makes type constructors
(type-to-type functions)? Recall one of the earliest ideas we teach in
<a href="http://www.cs.cmu.edu/~rwh/courses/ppl/">15-312</a>:</p>

<blockquote><p>&hellip; the core idea carries over from school mathematics, namely
that <strong>a variable is an unknown, or a place-holder, whose meaning is
given by substitution.</strong></p>

<p>&ndash; Harper, <em>Practical Foundations for Programming Languages</em></p></blockquote>

<p>Variables are given meaning by substitution, so we can look to the
appropriate substitutions to uncover the meaning and the differences
between <code>λ</code> and <code>∀</code>. Let&rsquo;s first look at the substitution for <code>λ</code>:</p>

<p>$$
\frac{
  \Delta, u :: \kappa_1 \vdash c_2 :: \kappa_2 \qquad \Delta \vdash c_1
  :: \kappa_1
}{
  \Delta \vdash (\lambda(u :: \kappa_1). \, c_2)(c_1) \equiv  [c_1/u]c_2 :: \kappa_2
}
$$</p>

<p>We can think of this as saying &ldquo;when you apply one type to another, the
second type gets full access to the first type to construct a new type.&rdquo;
We notice that the substitution here is completely <strong>internal to the
type system</strong>.<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></p>

<p>On the other hand, the substitution for <code>∀</code> <strong>bridges the gap</strong> from
types to terms:</p>

<p>$$
\frac{
  \Delta \, \Gamma, e : \forall (u :: \kappa). \tau \qquad \Delta \vdash c :: \kappa
}{
  \Delta \, \Gamma \vdash e[c] : [c/u]\tau
}
$$
$$
\frac{
  \mbox{}
}{
  (\Lambda u. \, e)[\tau] \mapsto [\tau / u]e
}
$$</p>

<p>When we&rsquo;re type checking a polymorphic type application, we don&rsquo;t get to
know anything about the type parameter <code>u</code> other than its kind. But when
we&rsquo;re running a program and get to the evaluation of a polymorphic type
application, we substitute the concrete <code>τ</code> directly in for <code>u</code> in <code>e</code>,
which bridges the gap from the type-level to the term-level.</p>

<p>At the end of the day, all the interesting stuff came from using
functions (aka, something parameterized by a value) in cool ways. Isn&rsquo;t
that baffling? Functions are so powerful that they seem to always pop up
at the heart of the most interesting constructs. I think it&rsquo;s
straight-up amazing that something so simple can at the same time be
that powerful. Functions!</p>

<!-- vim:tw=72
-->

<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>It&rsquo;s easy to not notice at first that type definitions are really function calls because in Standard ML, the type function applications are backwards. Instead of <code>f(x)</code>, it&rsquo;s <code>x f</code>. This is more similar to how we actually think when we see a function. Consider <code>h(g(f(x)))</code> (or another way: <code>h . g . f $ x</code>). We read this as &ldquo;take x, do f, pass that to g, and pass that to h&rdquo;. Why not write <code>x f g h</code> in the first place?<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Other languages (like Haskell or PureScript) have a language feature called &ldquo;Rank-N Types&rdquo; which is really just a fancy way of saying &ldquo;you can put the <code>forall a.</code> anywhere you want.&rdquo; Oftentimes, this makes it harder for the compiler to infer where the variable bindings are, so you sometimes have to use more annotations than you might if you weren&rsquo;t using Rank-N types.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>It&rsquo;s not super relevant to this discussion, but this inference rule is for the judgement defining equality of type constructors. This comes up all over the place when you&rsquo;re writing a compiler for SML. If this sounds interesting, definitely take 15-417 HOT Compilation!<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Variables in Types]]></title>
    <link href="https://blog.jez.io/variables-in-types/"/>
    <updated>2017-09-25T05:17:31-04:00</updated>
    <id>https://blog.jez.io/variables-in-types</id>
    <content type="html"><![CDATA[<p>These are some recitation notes for an ad-hoc recitation I gave for the
class <a href="http://www.cs.cmu.edu/~rwh/courses/ppl/">15-312 Principles of Programming Languages</a>. It was probably
my favorite 312 recitation content-wise, because it&rsquo;s the first
recitation where we&rsquo;ve covered enough stuff to where we can really start
connecting the dots.</p>

<p><strong>Abstract</strong>:</p>

<blockquote><p>We&rsquo;ve seen a number of examples in class of types which use variables.
Having variables in our type systems lends a great deal of power to
languages using these type systems. We&rsquo;re going to look at how
variables are used in generic programming, inductive &amp; coinductive
types, and polymorphic types.</p></blockquote>

<h3>→ <a href="https://blog.jez.io/notes/variables-in-types.pdf">Variables in Types</a></h3>

<!-- vim:tw=72
-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recitation Notes]]></title>
    <link href="https://blog.jez.io/recitation-notes-tag/"/>
    <updated>2017-09-24T17:40:10-04:00</updated>
    <id>https://blog.jez.io/recitation-notes-tag</id>
    <content type="html"><![CDATA[<!-- Empty header to prevent first paragraph from being big -->


<p></p>


<p>One thing I miss from being a teaching assistant is getting to write up
recitation and lecture notes for technical topics. Like with teaching
any other subject, writing up explanations for interesting things I&rsquo;ve
found helps me round out what concepts are still confusing. I also miss
getting to make nice LaTeX-typeset PDFs.</p>

<!-- more -->


<p>Recitation notes are distinguished from normal blog posts in that
they&rsquo;ll cover more CS theory-oriented topics and will be more
<em>instructive</em> than <em>experience-based</em>. All recitation notes are tagged
with the tag <code>recitation</code>.</p>

<h3>→ <a href="https://blog.jez.io/categories/#recitation">All posts tagged with <code>recitation</code></a></h3>

<p>I might &ldquo;cross post&rdquo; a few of the more interesting existing recitation
handouts I&rsquo;ve made over the years (though some of them make a
heavy-handed assumption that you&rsquo;re in the class currently).</p>

<!-- vim:tw=72
-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing, Types, & Correctness]]></title>
    <link href="https://blog.jez.io/testing-types/"/>
    <updated>2017-09-10T19:50:36-04:00</updated>
    <id>https://blog.jez.io/testing-types</id>
    <content type="html"><![CDATA[<p>Understanding correctness of code really comes down to <em>proving</em> that
the code does the right thing. What tools do we have as programmers for
proving the correctness of our code?</p>

<!-- more -->


<ol>
<li><strong>Unit tests</strong> prove that the code is correct for specific inputs.</li>
<li><strong>Type systems</strong> prove the absence of (certain kinds of)
incorrectness.</li>
<li><strong>Theorem provers</strong> prove sophisticated claims about our code for
us.</li>
<li><strong>Program authors</strong> can prove the correctness of their code (i.e.,
with a traditional pen-and-paper proof).</li>
</ol>


<p>The first three are exciting because they involve a computer doing most
of the work for us! That said, none of the first three are as
universally applicable as the last: doing the proof ourself.
Unfortunately, it&rsquo;s also usually the most toilsome.</p>

<p>Note the double negation in (2). Type systems themselves don&rsquo;t prove
correctness, they prove that there aren&rsquo;t certain kinds of
incorrectness, namely: type errors. Meanwhile, unit tests are rarely (if
ever) exhaustive. This is why testing and type systems are
complementary&mdash;one is not a substitute for the other.</p>

<p>It&rsquo;s important to both have strong testing practices and languages with
disciplined type systems. The hardest part of writing quality software
is ensuring that it runs without bugs. The more tools we have in our
arsenal to combat incorrectness, the easier it is to write code for the
long term.</p>

<!-- vim:tw=72
-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[If, Else, & Purity]]></title>
    <link href="https://blog.jez.io/if-else-purity/"/>
    <updated>2017-09-01T01:38:43-04:00</updated>
    <id>https://blog.jez.io/if-else-purity</id>
    <content type="html"><![CDATA[<p>I prefer to let the language I&rsquo;m using think on my behalf as much as
possible. Ideally, the language is rich enough that the proof of
correctness is inherent in the code I&rsquo;ve written. Even when I use
looser languages, these principled languages inform the structure of my
code. To make this a bit more let&rsquo;s turn our focus to <code>if</code>, <code>else</code>, and
purity.</p>

<!-- more -->


<p>A cool way to understand purity is using what&rsquo;s known as a &ldquo;modal
separation.&rdquo; This is a really fancy way to say that we have
<strong>expressions</strong> which are pure and always evaluate to a value, alongside
<strong>commands</strong> which are impure and are executed for their side effects.
If you&rsquo;ve ever used Haskell, you&rsquo;re already familiar with this
notion&mdash;we only need <code>do</code> notation when we need to write impure (or
&ldquo;monadic&rdquo;) code.</p>

<p>In an expression language, every <code>if</code> <em>must</em> have an <code>else</code>; for the
entire <code>if</code> expression to be used as a value, both branches must in turn
evaluate to values. It&rsquo;s only when we move to a language with commands
where it makes sense to allow omitting the <code>else</code> branch. <code>if</code>
expressions are not some abstract concept; chances are you&rsquo;ve
encountered them under the name &ldquo;the ternary operator.&rdquo;</p>

<p>An <code>if</code> <em>statement</em> (as opposed to an <code>if</code> expression) is a command;
it&rsquo;s useful for running side-effectful code. Sometimes, we don&rsquo;t want
one of the branches to have any side effects (for example, because the
state of the world doesn&rsquo;t need to be changed). Languages with commands
allow omitting the <code>else</code>.</p>

<p>What does this mean for us? Since expression languages form the basis
for purity, every pure function can be written where the <code>if</code> is matched
with an <code>else</code>. Put another way, an unmatched <code>if</code> is a likely indicator
that the code I&rsquo;ve written is impure.</p>

<p>This makes me more aware of when I&rsquo;m dealing with impure code. For
example, I might want to factor out as much of the pure code into a
separate helper function. There&rsquo;s a time and a place for impure code.
But since pure code is more composable and easier to test, it&rsquo;s best to
factor the impure code out whenever possible.</p>

<p>In a principled language, there&rsquo;s a distinction between <code>if</code> expressions
and <code>if</code> statements. On the other hand, some language only have one, or
they blur the line between the two. We can draw upon our experiences
with languages that are rigorous about minutia like this to better
inform how we write clean code.</p>

<!-- vim:tw=72
-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Haskell Development with Neovim]]></title>
    <link href="https://blog.jez.io/haskell-development-with-neovim/"/>
    <updated>2017-07-16T14:45:31-04:00</updated>
    <id>https://blog.jez.io/haskell-development-with-neovim</id>
    <content type="html"><![CDATA[<p>Configuring an editor for a new language is a double-edged sword: it&rsquo;s intensely
satisfying when done, but takes time away from diving into the language itself!
After using Haskell for a little over a year, I&rsquo;ve settled on a high-quality set
of editor plugins. They&rsquo;re simple, powerful, and all play nicely together.</p>

<!-- more -->


<h2>Requirements</h2>

<p>I use <a href="https://www.haskellstack.org/">Haskell Stack</a> exclusively. Stack&rsquo;s goal is reproducible builds,
which means that in general, things Just Work.</p>

<p>I also use <a href="https://github.com/neovim/neovim">Neovim</a>, rather than normal Vim. Usually, my justification
is ideological rather than technical. However, for Haskell my setup <strong>requires</strong>
Neovim. Fear not! Neovim is feature-packed and also very stable. I love Neovim,
and I&rsquo;ll be writing more about why in a future post.</p>

<p>By the way, new to Vim plugins? I happen to have <a href="https://github.com/jez/vim-as-an-ide">just the post for
you</a>!</p>

<!-- TODO(jez): Update with link to Neovim post -->


<h2>Overview</h2>

<p>We&rsquo;re going to move in order of increasing complexity. That said, even the most
&ldquo;complex&rdquo; plugin here is actually quite painless to set up. By the end, we&rsquo;ll
have a complete development experience! Coming up:</p>

<ul>
<li>syntax highlighting &amp; indentation (<strong><a href="https://github.com/neovimhaskell/haskell-vim">haskell-vim</a></strong>)</li>
<li>auto-formatting &amp; style (<strong><a href="https://github.com/commercialhaskell/hindent">hindent</a>, <a href="https://github.com/jaspervdj/stylish-haskell">stylish-haskell</a></strong>)</li>
<li>quickfix and sign column support (<strong>using <a href="https://github.com/w0rp/ale">ale</a></strong>) for:

<ul>
<li>linter style suggestions (<strong>hlint</strong>)</li>
<li>compiler errors and warnings (<strong>ghc-mod</strong>)</li>
</ul>
</li>
<li>Type inspection, REPL integration, and more! (<strong><a href="https://github.com/parsonsmatt/intero-neovim">intero-neovim</a></strong>)</li>
</ul>


<p>To keep things concise, I&rsquo;ve moved all the relevant configuration to the end of
the post. For now, let&rsquo;s start at the top.</p>

<!-- TODO(jez) Demonstrate everything with an asciicast -->


<h2>Syntax Highlighting &amp; Indentation</h2>

<ul>
<li><strong>Plugin</strong>: <a href="https://github.com/neovimhaskell/haskell-vim">haskell-vim</a><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></li>
</ul>


<p>Vim&rsquo;s default Haskell filetype plugin is pretty lack luster. Everything is blue,
except for strings which are colored like comments, and keywords which are
colored like constants. Indentation is wonky in some edge cases, and isn&rsquo;t
configurable.</p>

<p>This plugin corrects all that. It&rsquo;s the filetype plugin for Haskell that
<strong>should</strong> ship with Vim.</p>

<p>Not only does it come with saner defaults, it also comes with more config
options, especially for indentation. This is important because it lets me
tweak the automatic indentation to my own personal style.</p>

<p>(Remember: all the config is at the end of the post.)</p>

<h2>Auto-formatting and Indentation</h2>

<ul>
<li><strong>Plugin</strong>: <a href="https://github.com/alx741/vim-hindent">vim-hindent</a></li>
<li><strong>Tool</strong>: <code>stack install hindent</code></li>
<li><strong>Tool</strong>: <code>stack install stylish-haskell</code></li>
</ul>


<p>For small projects, I have an idea of what style I like best. However, for
larger projects it&rsquo;s unfair to ask contributors that they learn the ins and outs
of my style. Situations like these call for automated solutions.</p>

<p><code>go fmt</code> famously solved this problem for Golang by building the formatting tool
into the compiler. For Haskell, there&rsquo;s <a href="https://github.com/commercialhaskell/hindent">hindent</a><sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>. <code>hindent</code> can be
installed through Stack, and <code>vim-hindent</code> is a Vim plugin that shims it.</p>

<p>But I said I&rsquo;m partial to my own style in personal projects. There&rsquo;s another
Haskell formatter that&rsquo;s much less invasive: <a href="https://github.com/jaspervdj/stylish-haskell">stylish-haskell</a>. It basically
only reformats <code>import</code>s, <code>case</code> branches, and record fields, aligning them
vertically. And in fact, it&rsquo;s possible to use this alongside <code>hindent</code>.</p>

<p>With these three tools, I can pick the right tool for the job:</p>

<ul>
<li><strong>Hand saw</strong>: let <code>haskell-vim</code> config control the indentation</li>
<li><strong>Table saw</strong>: run <code>stylish-haskell</code> only</li>
<li><strong>Chainsaw</strong>: run <code>hindent</code> only</li>
<li><strong>Chainsaw, then sand paper</strong>: run <code>hindent</code>, then <code>stylish-haskell</code></li>
</ul>


<p>Getting them to play together requires a bit of config, so I&rsquo;ve included mine at
the end of the post.</p>

<h2>Quickfix &amp; Sign Columns</h2>

<ul>
<li><strong>Plugin</strong>: <a href="https://github.com/w0rp/ale">ale</a></li>
<li><strong>Tool</strong>: <code>stack install hlint</code></li>
<li><strong>Tool</strong>: <code>stack build ghc-mod</code>

<ul>
<li>N.B.: This is <em>build</em> not <em>install</em> here<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>.</li>
</ul>
</li>
</ul>


<p>This step requires <em>either</em> Neovim or Vim 8; ALE stands for &ldquo;Asynchronous Lint
Engine,&rdquo; so it&rsquo;s using the new asynchronous job control features of these two
editors. It&rsquo;s like an asynchronous Syntastic<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>.</p>

<p>ALE ships with a number of Haskell integrations by default. For example, it can
show errors if only Stack is installed. I prefer enabling two of ALE&rsquo;s Haskell
integrations: <code>hlint</code> and <code>ghc-mod</code>.</p>

<ul>
<li><code>hlint</code> is a linter for Haskell. It warns me when I try to do silly things
like <code>if x then True else False</code>.</li>
<li><code>ghc-mod</code> is a tool that can check files for compiler errors.</li>
</ul>


<p>The beauty of ALE is that it works almost entirely out of the box. The only real
setup is to tell ALE to use only these two integrations explicitly. I&rsquo;ve
included the one-liner to do this in the config at the bottom.</p>

<h2>Intero: The Pièce de Résistance</h2>

<ul>
<li><strong>Plugin</strong>: <a href="https://github.com/parsonsmatt/intero-neovim">intero-neovim</a></li>
</ul>


<p>Intero is a complete development program for Haskell. It started as an Emacs
package, but has been ported almost entirely to Neovim. Probably the best way to
introduce it is with this asciicast:</p>

<p align="center">
  <a href="https://asciinema.org/a/128416">
    <img
      width="700px"
      alt="Intero for Neovim asciicast"
      src="https://asciinema.org/a/128416.png">
  </a>
</p>


<p>Intero is designed for stack, sets itself up automatically, has point-and-click
type information, and lets me jump to identifier definitions. On top of it all,
it uses Neovim to communicate back and forth with a terminal buffer so that I
get a GHCi buffer <strong>right inside Neovim</strong>. For Emacs users, this is nothing new
I&rsquo;m sure. But having the REPL in my editor continues to blow my mind 😮.</p>

<p>Developing with the REPL in mind helps me write better code. Only top-level
bindings are exposed in the REPL, so I write more small, testable functions.
See here for more reasons <a href="http://chrisdone.com/posts/haskell-repl">why the REPL is awesome</a>.</p>

<p>On top of providing access to the REPL, Intero provides about a dozen
convenience commands that shell out to the REPL backend asynchronously. Being
able to reload my code in the REPL&mdash;from Vim, with a single keystroke!&mdash;is a
huge boon when developing.</p>

<p>Intero takes a little getting used to, so be sure to read the docs for some
sample workflows. Intero also sets up no mappings by default, so I&rsquo;ve included
my settings below.</p>

<h2>The Eagerly-Awaited Config</h2>

<p>And without further ado&hellip;</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">" ----- neovimhaskell/haskell-vim -----</span>
</span><span class='line'>
</span><span class='line'><span class="c">" Align 'then' two spaces after 'if'</span>
</span><span class='line'><span class="k">let</span> <span class="nv">g:haskell_indent_if</span> <span class="p">=</span> <span class="m">2</span>
</span><span class='line'><span class="c">" Indent 'where' block two spaces under previous body</span>
</span><span class='line'><span class="k">let</span> <span class="nv">g:haskell_indent_before_where</span> <span class="p">=</span> <span class="m">2</span>
</span><span class='line'><span class="c">" Allow a second case indent style (see haskell-vim README)</span>
</span><span class='line'><span class="k">let</span> <span class="nv">g:haskell_indent_case_alternative</span> <span class="p">=</span> <span class="m">1</span>
</span><span class='line'><span class="c">" Only next under 'let' if there's an equals sign</span>
</span><span class='line'><span class="k">let</span> <span class="nv">g:haskell_indent_let_no_in</span> <span class="p">=</span> <span class="m">0</span>
</span><span class='line'>
</span><span class='line'><span class="c">" ----- hindent &amp; stylish-haskell -----</span>
</span><span class='line'>
</span><span class='line'><span class="c">" Indenting on save is too aggressive for me</span>
</span><span class='line'><span class="k">let</span> <span class="nv">g:hindent_on_save</span> <span class="p">=</span> <span class="m">0</span>
</span><span class='line'>
</span><span class='line'><span class="c">" Helper function, called below with mappings</span>
</span><span class='line'><span class="k">function</span><span class="p">!</span> HaskellFormat<span class="p">(</span>which<span class="p">)</span> abort
</span><span class='line'>  <span class="k">if</span> <span class="nv">a:which</span> <span class="p">==</span># <span class="s1">'hindent'</span> <span class="p">||</span> <span class="nv">a:which</span> <span class="p">==</span># <span class="s1">'both'</span>
</span><span class='line'>    <span class="p">:</span>Hindent
</span><span class='line'>  <span class="k">endif</span>
</span><span class='line'>  <span class="k">if</span> <span class="nv">a:which</span> <span class="p">==</span># <span class="s1">'stylish'</span> <span class="p">||</span> <span class="nv">a:which</span> <span class="p">==</span># <span class="s1">'both'</span>
</span><span class='line'>    <span class="k">silent</span><span class="p">!</span> exe <span class="s1">'undojoin'</span>
</span><span class='line'>    <span class="k">silent</span><span class="p">!</span> exe <span class="s1">'keepjumps %!stylish-haskell'</span>
</span><span class='line'>  <span class="k">endif</span>
</span><span class='line'><span class="k">endfunction</span>
</span><span class='line'>
</span><span class='line'><span class="c">" Key bindings</span>
</span><span class='line'>augroup haskellStylish
</span><span class='line'>  <span class="k">au</span><span class="p">!</span>
</span><span class='line'>  <span class="c">" Just hindent</span>
</span><span class='line'>  <span class="k">au</span> <span class="nb">FileType</span> haskell nnoremap <span class="p">&lt;</span>leader<span class="p">&gt;</span><span class="k">hi</span> <span class="p">:</span>Hindent<span class="p">&lt;</span>CR<span class="p">&gt;</span>
</span><span class='line'>  <span class="c">" Just stylish-haskell</span>
</span><span class='line'>  <span class="k">au</span> <span class="nb">FileType</span> haskell nnoremap <span class="p">&lt;</span>leader<span class="p">&gt;</span>hs <span class="p">:</span><span class="k">call</span> HaskellFormat<span class="p">(</span><span class="s1">'stylish'</span><span class="p">)&lt;</span>CR<span class="p">&gt;</span>
</span><span class='line'>  <span class="c">" First hindent, then stylish-haskell</span>
</span><span class='line'>  <span class="k">au</span> <span class="nb">FileType</span> haskell nnoremap <span class="p">&lt;</span>leader<span class="p">&gt;</span>hf <span class="p">:</span><span class="k">call</span> HaskellFormat<span class="p">(</span><span class="s1">'both'</span><span class="p">)&lt;</span>CR<span class="p">&gt;</span>
</span><span class='line'>augroup END
</span><span class='line'>
</span><span class='line'><span class="c">" ----- w0rp/ale -----</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="nv">g:ale_linters</span><span class="p">.</span>haskell <span class="p">=</span> <span class="p">[</span><span class="s1">'stack-ghc-mod'</span><span class="p">,</span> <span class="s1">'hlint'</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c">" ----- parsonsmatt/intero-neovim -----</span>
</span><span class='line'>
</span><span class='line'><span class="c">" Prefer starting Intero manually (faster startup times)</span>
</span><span class='line'><span class="k">let</span> <span class="nv">g:intero_start_immediately</span> <span class="p">=</span> <span class="m">0</span>
</span><span class='line'><span class="c">" Use ALE (works even when not using Intero)</span>
</span><span class='line'><span class="k">let</span> <span class="nv">g:intero_use_neomake</span> <span class="p">=</span> <span class="m">0</span>
</span><span class='line'>
</span><span class='line'>augroup interoMaps
</span><span class='line'>  <span class="k">au</span><span class="p">!</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">au</span> <span class="nb">FileType</span> haskell nnoremap <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> <span class="p">&lt;</span>leader<span class="p">&gt;</span>io <span class="p">:</span>InteroOpen<span class="p">&lt;</span>CR<span class="p">&gt;</span>
</span><span class='line'>  <span class="k">au</span> <span class="nb">FileType</span> haskell nnoremap <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> <span class="p">&lt;</span>leader<span class="p">&gt;</span>iov <span class="p">:</span>InteroOpen<span class="p">&lt;</span>CR<span class="p">&gt;&lt;</span>C<span class="p">-</span>W<span class="p">&gt;</span>H
</span><span class='line'>  <span class="k">au</span> <span class="nb">FileType</span> haskell nnoremap <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> <span class="p">&lt;</span>leader<span class="p">&gt;</span>ih <span class="p">:</span>InteroHide<span class="p">&lt;</span>CR<span class="p">&gt;</span>
</span><span class='line'>  <span class="k">au</span> <span class="nb">FileType</span> haskell nnoremap <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> <span class="p">&lt;</span>leader<span class="p">&gt;</span><span class="k">is</span> <span class="p">:</span>InteroStart<span class="p">&lt;</span>CR<span class="p">&gt;</span>
</span><span class='line'>  <span class="k">au</span> <span class="nb">FileType</span> haskell nnoremap <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> <span class="p">&lt;</span>leader<span class="p">&gt;</span>ik <span class="p">:</span>InteroKill<span class="p">&lt;</span>CR<span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">au</span> <span class="nb">FileType</span> haskell nnoremap <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> <span class="p">&lt;</span>leader<span class="p">&gt;</span>wr <span class="p">:</span><span class="k">w</span> \<span class="p">|</span> <span class="p">:</span>InteroReload<span class="p">&lt;</span>CR<span class="p">&gt;</span>
</span><span class='line'>  <span class="k">au</span> <span class="nb">FileType</span> haskell nnoremap <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> <span class="p">&lt;</span>leader<span class="p">&gt;</span><span class="k">il</span> <span class="p">:</span>InteroLoadCurrentModule<span class="p">&lt;</span>CR<span class="p">&gt;</span>
</span><span class='line'>  <span class="k">au</span> <span class="nb">FileType</span> haskell nnoremap <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> <span class="p">&lt;</span>leader<span class="p">&gt;</span><span class="k">if</span> <span class="p">:</span>InteroLoadCurrentFile<span class="p">&lt;</span>CR<span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">au</span> <span class="nb">FileType</span> haskell map <span class="p">&lt;</span>leader<span class="p">&gt;</span><span class="k">t</span> <span class="p">&lt;</span>Plug<span class="p">&gt;</span>InteroGenericType
</span><span class='line'>  <span class="k">au</span> <span class="nb">FileType</span> haskell map <span class="p">&lt;</span>leader<span class="p">&gt;</span>T <span class="p">&lt;</span>Plug<span class="p">&gt;</span>InteroType
</span><span class='line'>  <span class="k">au</span> <span class="nb">FileType</span> haskell nnoremap <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> <span class="p">&lt;</span>leader<span class="p">&gt;</span>it <span class="p">:</span>InteroTypeInsert<span class="p">&lt;</span>CR<span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">au</span> <span class="nb">FileType</span> haskell nnoremap <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> <span class="p">&lt;</span>leader<span class="p">&gt;</span>jd <span class="p">:</span>InteroGoToDef<span class="p">&lt;</span>CR<span class="p">&gt;</span>
</span><span class='line'>  <span class="k">au</span> <span class="nb">FileType</span> haskell nnoremap <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span> <span class="p">&lt;</span>leader<span class="p">&gt;</span>iu <span class="p">:</span>InteroUses<span class="p">&lt;</span>CR<span class="p">&gt;</span>
</span><span class='line'>  <span class="k">au</span> <span class="nb">FileType</span> haskell nnoremap <span class="p">&lt;</span>leader<span class="p">&gt;</span>ist <span class="p">:</span>InteroSetTargets<span class="p">&lt;</span>SPACE<span class="p">&gt;</span>
</span><span class='line'>augroup END</span></code></pre></td></tr></table></div></figure>


<h2>Wrap Up</h2>

<p>With these tools, I feel empowered (rather than hindered) when I sit down to
work with Haskell.</p>

<ul>
<li>The entire setup uses Stack, so things Just Work.

<ul>
<li>As a consequence, everything works with the implicit global Stack project!</li>
</ul>
</li>
<li>It scales up in power:

<ul>
<li>From simple syntax highlighting and manual indentation&hellip;</li>
<li>to an indentation chainsaw and a <strong>REPL embeded in the editor</strong>!</li>
</ul>
</li>
<li>I can take full advantage of all my tools working together, leading to cleaner
code and fewer frustrations.</li>
</ul>


<p>Now that I&rsquo;m finally at a point where I can stop fretting about my Haskell
setup, I&rsquo;ll have more time to explore the language and write about my
experience.</p>

<p>Haskell-the-language isn&rsquo;t quite on the same level as SML-the-language, but it&rsquo;s
far and above when comparing by tooling support. I&rsquo;m looking forward to taking
advantage of that!</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>While listed under &ldquo;neovimhaskell&rdquo; on GitHub, this plugin works with normal Vim, too.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Chris Done explains the appeal of solving style issues with tooling for Haskell well. The moral of the story is that hindent version 5 ships with only the most popular style formatter in an effort to arrive at a singular Haskell style: <a href="http://chrisdone.com/posts/hindent-5">http://chrisdone.com/posts/hindent-5</a><a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>We want to install <code>ghc-mod</code> once in every project. It can be done globally, but it might get out of sync with the current project.<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>Some people are familiar with Neomake for this task. However, Neomake is much more minimal than ALE. Neomake basically only builds, whereas ALE is more configurable and hackable.<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reach for Markdown, not LaTeX]]></title>
    <link href="https://blog.jez.io/reach-for-markdown/"/>
    <updated>2017-02-26T21:26:53-05:00</updated>
    <id>https://blog.jez.io/reach-for-markdown</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve written <a href="https://blog.jez.io/2014/10/06/offline-latex-development/">in the past</a> (<a href="https://blog.jez.io/2015/01/10/offline-latex-development-part-2/">twice</a>) about how to
streamline the writing process when using LaTeX. Since then, I&rsquo;ve found that I
enjoy writing even more when I don&rsquo;t have to reach for LaTeX at all. By reaching
first for Markdown, then for LaTeX when necessary, writing is easier and more
enjoyable.</p>

<!-- more -->


<h2>Writing at the Command Line</h2>

<p>Last year, I <a href="https://jez.io/talks/writing-at-the-command-line/">gave a talk</a> about the merits of writing primarily at
the command line. My main claims were that when writing we want:</p>

<ul>
<li>an open document format (so that our writings are future proof)</li>
<li>to be using open source software (for considerations of privacy and cost)</li>
<li>to optimize for the &ldquo;common case&rdquo;</li>
<li>to be able to write for print and digital (PDFs, web pages, etc.)</li>
</ul>


<p>Markdown solves these constraints nicely:</p>

<ul>
<li>It&rsquo;s a plain text format&mdash;plain text has been around for decades and will
be for decades more.</li>
<li>Given a plain text format, we can bring our own text editor.</li>
<li>Plenty of open source programs manipulate Markdown.</li>
<li>When we need advanced features, we can mix LaTeX into our Markdown documents.</li>
</ul>


<p>For those unfamiliar with Markdown, it&rsquo;s super quick to pick up. If you only
look at one guide, see this one:</p>

<ul>
<li><a href="http://commonmark.org/help/">CommonMark</a></li>
</ul>


<p>If you want to start comparing features available in certain implementations of
Markdown:</p>

<ul>
<li><a href="https://guides.github.com/features/mastering-markdown/">GitHub Flavored Markdown</a></li>
<li><a href="https://daringfireball.net/projects/markdown/">Markdown.pl</a></li>
<li><a href="http://pandoc.org/MANUAL.html#pandocs-markdown">Pandoc Markdown</a></li>
</ul>


<p>For more on why you should want to be writing at the command line, you can
<a href="https://jez.io/talks/writing-at-the-command-line/">check out the talk slides</a>.</p>

<h2>Pandoc Starter</h2>

<p>The central tool I spoke about in <em>Writing at the Command Line</em> is <a href="https://pandoc.org/">Pandoc</a>.
Pandoc is an amazingly simple command line program that takes in Markdown files
and spits out really anything you can think of.</p>

<p>To make using Pandoc even easier than it already is, I put together a
<a href="https://github.com/jez/pandoc-starter">collection of starter templates</a>. They&rsquo;re all available <a href="https://github.com/jez/pandoc-starter">on
Github</a> if you&rsquo;d prefer to dive right in.</p>

<p>There are currently six different templates, specialized for the kind of
document you&rsquo;d like to create. Each has a <code>README</code> for installation and usage
instructions, as well as a <code>Makefile</code> for invoking <code>pandoc</code> correctly.</p>

<p>All the templates generate PDFs from Markdown by way of LaTeX. In addition to
Pandoc, you&rsquo;ll also need LaTeX installed locally.</p>

<h3><a href="https://github.com/jez/pandoc-starter/tree/master/article"><code>article</code></a></h3>

<p>This template uses the standard LaTeX <code>article</code> document class. It&rsquo;s a
no frills, no nonsense choice.</p>

<p><a href="https://github.com/jez/pandoc-starter/blob/master/article/src/sample.pdf"><img src="https://blog.jez.io/images/pandoc-starter-article.png" alt="article template" /></a></p>

<h3><a href="https://github.com/jez/pandoc-starter/tree/master/tufte-handout"><code>tufte-handout</code></a></h3>

<p>As an alternative to the <code>article</code> document class, there&rsquo;s also the
<code>tufte-handout</code> document class. It originates from the style Edward Tufte
popularized in his books and articles on visualization and design.</p>

<p>Apart from a different font (it uses Palatino instead of the default Computer
Modern), this template features the ability add side notes to your documents. I
often find myself reaching for this template when I want to disguise the fact
that I&rsquo;m secretly using LaTeX.</p>

<p><a href="https://github.com/jez/pandoc-starter/blob/master/tufte-handout/src/sample.pdf"><img src="https://blog.jez.io/images/pandoc-starter-tufte-handout.png" alt="tufte-handout template" /></a></p>

<h3><a href="https://github.com/jez/pandoc-starter/tree/master/tufte-handout"><code>homework</code></a></h3>

<p>A second alternative to the <code>article</code> document class is the <code>homework</code> document
class. It works nicely for homework assignments and problem sets. The class
itself has a number of handy features, like:</p>

<ul>
<li>the option to put your name on every page, or only on the first page</li>
<li>an option to use wide or narrow margins</li>
<li>most of the AMS Math packages you&rsquo;d include in the process of typesetting a
math assignment</li>
<li>a convenient environment for typesetting induction proofs</li>
</ul>


<p>For more features and usage information, check out <a href="https://blog.jez.io/2015/01/10/the-latex-homework-document-class/">this blog post</a> or
<a href="https://github.com/jez/latex-homework-class">the source</a> on GitHub.</p>

<p><a href="https://github.com/jez/pandoc-starter/blob/master/homework/src/sample.pdf"><img src="https://blog.jez.io/images/pandoc-starter-homework.png" alt="homework template" /></a></p>

<h3><a href="https://github.com/jez/pandoc-starter/tree/master/beamer"><code>beamer</code></a></h3>

<p>LaTeX provides the <code>beamer</code> document class for creating slides; this template
makes it even easier to use:</p>

<ul>
<li>Make a new slide with a &ldquo;<code>##</code>&rdquo; header</li>
<li>Make a section divider with a &ldquo;<code>#</code>&rdquo; header</li>
<li>Mix lists, links, code, and other Markdown features you&rsquo;re familiar with to
create the content for a slide.</li>
</ul>


<p>So basically, just write the outline for your talk, and Pandoc takes care of
making the slides&mdash;it doesn&rsquo;t get much simpler.</p>

<p><a href="https://github.com/jez/pandoc-starter/blob/master/beamer/src/sample.pdf"><img src="https://blog.jez.io/images/pandoc-starter-beamer.png" alt="beamer template" /></a></p>

<h3><a href="https://github.com/jez/pandoc-starter/tree/master/beamer-solarized"><code>beamer-solarized</code></a></h3>

<p>The default beamer styles are pretty boring. To add a bit of flair and
personality to my slide decks, I made a Solarized theme for beamer.</p>

<p>In addition to the screenshot below, the <a href="https://jez.io/talks/writing-at-the-command-line/">Writing at the Command
Line</a> slides I linked to earlier also use this theme, if you want
to see a less contrived example.</p>

<p><a href="https://github.com/jez/pandoc-starter/blob/master/beamer-solarized/src/sample.pdf"><img src="https://blog.jez.io/images/pandoc-starter-beamer-solarized.png" alt="beamer solarized template" /></a></p>

<h3><a href="https://github.com/jez/pandoc-starter/tree/master/book-writeup"><code>book-writeup</code></a></h3>

<p>Finally, sometimes a simple article or slide deck doesn&rsquo;t cut it. Usually this
means I&rsquo;d like to group the writing into chapters. This template makes writing a
chapter as easy as using a &ldquo;<code>#</code>&rdquo; Markdown header.</p>

<p><a href="https://github.com/jez/pandoc-starter/blob/master/book-writeup/src/sample.pdf"><img src="https://blog.jez.io/images/pandoc-starter-book-writeup.png" alt="book writeup template" /></a></p>

<h2>Writing Plugins for Vim</h2>

<p>If you happen to use Vim, I&rsquo;d highly recommend installing <a href="https://github.com/junegunn/goyo.vim">goyo.vim</a> for
writing. It removes all the visual frills Vim includes to make writing code
easier so you can focus on your writing without distractions.</p>

<p>I also really enjoy <a href="https://github.com/vim-pandoc/vim-pandoc">vim-pandoc</a> and <a href="https://github.com/vim-pandoc/vim-pandoc-syntax">vim-pandoc-syntax</a>. They&rsquo;re a pair of
complementary plugins for highlighting and working with Pandoc Markdown-flavored
documents. They work so well that I use them for Markdown documents even when
not using Pandoc.</p>

<h2>Reach for Markdown</h2>

<p>Writing should be a pleasant experience. With the right tools, it can be. LaTeX
is powerful but cumbersome to use. With Markdown, we can focus on our writing,
and worry about the presentation later. Pandoc can take care of the presentation
for us, so the <a href="https://github.com/jez/pandoc-starter">only thing left to do is start</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Troubleshooting Haskell Stack Setup on OS X]]></title>
    <link href="https://blog.jez.io/troubleshooting-haskell-stack-setup-on-os-x/"/>
    <updated>2016-08-03T00:04:08-04:00</updated>
    <id>https://blog.jez.io/troubleshooting-haskell-stack-setup-on-os-x</id>
    <content type="html"><![CDATA[<p>Stephen Diehl&rsquo;s article <a href="http://www.stephendiehl.com/posts/vim_2016.html">Vim and Haskell in 2016</a> does a great
job of outlining the quickest way to get a quality Haskell development
experience. I ran into a simple issue when I followed it due to a bit of an
idiosyncrasy on OS X El Capitan. I also document a few of the extra steps I took
which aren&rsquo;t mentioned explicitly in his original article.</p>

<!-- more -->


<p>This post wouldn&rsquo;t actually be necessary if it weren&rsquo;t for one thing: <a href="https://support.apple.com/en-us/HT204899">System
Integrity Protection</a> in OS X El Capitan, also known as &ldquo;rootless&rdquo;
mode. It affects Haskell&rsquo;s build and install step in a subtle (but solved) way,
and the rest of the article will cover what to watch out for when installing on
OS X.</p>

<p>If you don&rsquo;t follow these instructions and you&rsquo;re on OS X El Capitan, you&rsquo;ll
likely run into an issue that looks like <code>/usr/bin/ar: permission denied</code>. The
Stack installation instructions call this out specifically:</p>

<blockquote><p>If you are on OS X 10.11 (&ldquo;El Capitan&rdquo;) or later, GHC 7.8.4 is incompatible
with System Integrity Protection (a.k.a. &ldquo;rootless&rdquo;). GHC 7.10.2 includes a
fix, so this only affects users of GHC 7.8.4.</p></blockquote>

<p>At the risk of spoiling the surprise, we&rsquo;re going to set up Stack while taking
care to make sure that we get GHC >= 7.10. So let&rsquo;s do just that!</p>

<h2>Environment Prep (optional)</h2>

<p>Note that this step is optional and has nothing to do with OS X; I just wanted
to point it out quickly.</p>

<p>Under <a href="http://www.stephendiehl.com/posts/vim_2016.html#dev-environment">Dev Environment</a> on <a href="http://www.stephendiehl.com/posts/vim_2016.html">Vim and Haskell in
2016</a>, Stephen Diehl writes:</p>

<blockquote><p>Times have changed quite a bit, and the new preferred way of installing GHC in
2016 is to forgo using the system package manager for installing ghc and use
Stack to manage the path to the compiler executable and sandboxes.</p></blockquote>

<p>Stack stores it&rsquo;s metadata in the <code>~/.stack</code> folder by default. If you&rsquo;re not a
huge fan of things cluttering up your home folder, set the <code>STACK_ROOT</code> variable
in you bashrc or zshrc:</p>

<figure class='code'><figcaption><span>Set STACK_ROOT to avoid clutter</span></figcaption><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">XDG_DATA_HOME</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/.local/share"</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Have Haskell Stack use XDG Base Directory spec</span>
</span><span class='line'><span class="nb">export </span><span class="nv">STACK_ROOT</span><span class="o">=</span><span class="s2">"</span><span class="nv">$XDG_DATA_HOME</span><span class="s2">/stack"</span></span></code></pre></td></tr></table></div></figure>


<p>Of course, the choice of location is up to you. In particular I&rsquo;ve chosen to
adhere to the <a href="https://wiki.archlinux.org/index.php/XDG_Base_Directory_support">XDG Base Directory specification</a> here, which you may want
to take a peek at if you&rsquo;re unfamiliar. That&rsquo;s why you see references to
<code>XDG_DATA_HOME</code>.</p>

<p>Make sure you restart your terminal to pick up the new variables before
continuing.</p>

<h2>Install Stack from Homebrew</h2>

<p>If you&rsquo;re like me, you&rsquo;ll want to take a second to purge anything
Haskell-related from previous botched setup attempts:</p>

<figure class='code'><figcaption><span>Wipe the slate clean</span></figcaption><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># If you had GHC installed</span>
</span><span class='line'><span class="gp">$ </span>brew uninstall ghc
</span><span class='line'>
</span><span class='line'><span class="c"># If you tried and failed at installing Stack already</span>
</span><span class='line'><span class="gp">$ </span>brew uninstall haskell-stack
</span><span class='line'><span class="gp">$ </span>rm -r ~/.stack
</span><span class='line'><span class="c"># If you happened to also set STACK_ROOT</span>
</span><span class='line'><span class="gp">$ </span>rm -r <span class="nv">$STACK_ROOT</span></span></code></pre></td></tr></table></div></figure>


<p>With that out of the way, we can actually get our hands on Stack. For OS X,
we&rsquo;ll install through Homebrew:</p>

<figure class='code'><figcaption><span>Install Stack</span></figcaption><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='console'><span class='line'><span class="w">$ </span><span class="nc">brew</span><span class="kv"> install haskell-stack</span></span></code></pre></td></tr></table></div></figure>


<h2>Configure Stack, avoiding &ldquo;rootless&rdquo; issues</h2>

<p>Here&rsquo;s the trick. We need to run <code>stack setup</code> for the first time to let Stack
configure itself. But remember: we want to make sure that Stack doesn&rsquo;t set
itself up with version 7.8.4 of GHC. We can get around this by specifying an
explicit resolver to the <code>stack</code> command (you can find more information on
&ldquo;resolvers&rdquo; elsewhere):</p>

<figure class='code'><figcaption><span>Side-step rootless issue in setup</span></figcaption><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Change the resolver to the most up-to-date one. This is a hack to ensure that</span>
</span><span class='line'><span class="c"># get GHC version &gt; 7.8, because there's an issue with El Capitan's rootless</span>
</span><span class='line'><span class="c"># mode.</span>
</span><span class='line'>stack --resolver<span class="o">=</span>lts-6.10 setup</span></code></pre></td></tr></table></div></figure>


<p>You&rsquo;ll notice we use the <code>--resolver=...</code> flag to force Stack to use a specific
resolver. This post will be out of date as soon as it&rsquo;s written, so check
<a href="https://www.stackage.org/snapshots">Stackage</a> to find the latest LTS snapshot.</p>

<h2>Return to Vim and Haskell in 2016</h2>

<p>That&rsquo;s it for the environment setup! Now you&rsquo;ll want to turn your attention to
configuring Vim.</p>

<p>The steps to set up Vim are platform independent, so now that we&rsquo;ve set up Stack
correctly, you can head over to <a href="http://www.stephendiehl.com/posts/vim_2016.html">Vim and Haskell in 2016</a> to
finish things out.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Let's Have a Chat about Encryption]]></title>
    <link href="https://blog.jez.io/lets-have-a-chat-about-encryption/"/>
    <updated>2016-04-17T17:40:17-04:00</updated>
    <id>https://blog.jez.io/lets-have-a-chat-about-encryption</id>
    <content type="html"><![CDATA[<p>Discussions of encryption permeate tech and political news sites these days.
All too frequently though, ideas presented in these discussions draw upon
outdated analogies and confusion due to technological progression. I think it&rsquo;s
time to have a chat to answer some questions and move the discussion forwards.</p>

<!-- more -->


<p>A group of friends was walking home from dinner one day. After the usual
discussions of gossip, work, and daily events had worn down, one of them
broached a new topic.</p>

<p>&ldquo;Have you guys been following the news related to the FBI wanting to force Apple
to weaken the security of its devices?&rdquo; asked James.</p>

<p>&ldquo;I think that&rsquo;s Apple&rsquo;s view point,&rdquo; responded Tim.</p>

<p>&ldquo;Ah, so you have, then! What&rsquo;s your opinion on the matter then?&rdquo;</p>

<p>This time Emma interjected. &ldquo;I think the government should stay out of Apple&rsquo;s
business.&rdquo;</p>

<p>And other thought from the group: &ldquo;I think when it comes to terrorists and other
horrible criminals, Apple should have to unlock their phones if the FBI gets a
warrant, but Apple shouldn&rsquo;t have to make their devices less secure.&rdquo;</p>

<p>&ldquo;Yes and no,&rdquo; Emma answered. &ldquo;I believe there are times they should have to hand
over information, but not provide the means to do that to the government.&rdquo;</p>

<p>&ldquo;That&rsquo;s an interesting thought,&rdquo; said James. &ldquo;But I think I&rsquo;m still a little
hazy. Could you give me an example?&rdquo;</p>

<p>Emma responded, &ldquo;If the government can prove beyond a reasonable doubt that
someone has committed a crime that threatens people&rsquo;s safety&mdash;like what just
happened&mdash;then Apple should hand over transcripts and a list of contacts.
However, they shouldn&rsquo;t have to hand over a guide to cracking Apple&rsquo;s security
procedures.&rdquo;</p>

<p>James jumped back in again. &ldquo;Well, now you two are kind of asking for two
different things.</p>

<p>&ldquo;The issue now is that those transcripts and lists of contacts might be
encrypted. So are you saying that Apple should hand over the encrypted (meaning:
useless without a key) transcripts and contacts, but that they shouldn&rsquo;t be
forced to withhold using encryption for transcripts and contacts in the first
place?</p>

<p>&ldquo;The reason why I&rsquo;m asking is because Apple doesn&rsquo;t have &#8220;security procedures&rdquo;
that can be cracked. It has encryption, and the question is whether people
should be allowed to encrypt things.</p>

<p>&ldquo;The whole point of encryption is to have security regardless of who you are.
It&rsquo;s founded in math; you can <em>prove</em> that a system is secure or insecure. You
can&rsquo;t both be able to unlock a phone at any time while also having a proof that
no one can unlock the phone.&rdquo;</p>

<p>&ldquo;So what does that really mean? Couldn&rsquo;t Apple just provide the information in
an unencrypted form?&rdquo; Emma wondered.</p>

<p>&ldquo;Only if they have the key,&rdquo; said James. &ldquo;Apple&rsquo;s argument is that they think
holding the keys to someone&rsquo;s encrypted secrets is a power too great for any one
man or organization.&rdquo;</p>

<p>The conversation died down, while everyone contemplated this position. Tim, who
had been walking with his head tilted down facing the sidewalk, slowly looked
up towards a flock of birds flying off in the distance.</p>

<p>&ldquo;Your right to have your data encrypted and secure goes away when you kill
innocent people,&rdquo; Tim said, sternly.</p>

<p>The group paused once more to consider the implications of Tim&rsquo;s statement. It
James who broke the silence next.</p>

<p>&ldquo;That&rsquo;s a very rational viewpoint, but in saying that you&rsquo;re also indicting the
same innocent people you claim to defend. Encryption is blind; it it isn&rsquo;t a
privilege given to those worthy of it, nor is it reparations to be paid for a
crime. Encryption is something everyone has access to. Not &lsquo;should have access
to&rsquo; or &lsquo;gets to have access to.&rsquo; It&rsquo;s free and open software.</p>

<p>&ldquo;You can outlaw the ownership or use of that software, but it&rsquo;s the same thing
as outlawing the ownership of guns; the criminals will use guns or encryption
anyway, and the general populace will not.</p>

<p>Tim was quick to respond this time. &ldquo;Nothing in life is absolute. Read the
Constitution: it&rsquo;s life, liberty, pursuit of happiness, not subject to
unreasonable search and seizure, etc. No one has an absolute right to
encryption.</p>

<p>&ldquo;Everyone should have access to encryption, but just like gun ownership, it can
be forfeited, similar to how felons cannot own guns. If a court issues a warrant
that a company help break encrypted data, they should comply.&rdquo;</p>

<p>&ldquo;What I&rsquo;m trying to get at is that your viewpoint is contradictory,&rdquo; James
clarified. &ldquo;Encryption cannot be forfeited after the fact, after it&rsquo;s been
determined that someone shouldn&rsquo;t have access. If something is truly encrypted,
then there is no force other than the key that one person owns that can unlock
that data. I&rsquo;m not claiming this as an opinion&ndash;that&rsquo;s the technical definition
of an encrypted system.</p>

<p>&ldquo;So if we want companies to be able to comply with &lsquo;breaking encrypted data,&rsquo;
the data itself has to already be broken from the very beginning. It has to be
insecure for everyone for it to be insecure for some one person. Without this,
there&rsquo;s no other way to retroactively &lsquo;break encryption&rsquo; for a single person.</p>

<p>&ldquo;Now in my opinion, a system that works by being able to be retroactively broken
into is incredibly susceptible to misuse. This misuse could be either by
governments that become tyrannical or by criminals who want to break into a
system for their own gain. I personally feel that we as law-abiding citizens
shouldn&rsquo;t have to give up rights, dropping us down to the same levels as
criminals, before we&rsquo;ve even committed a crime.&rdquo;</p>

<p>&ldquo;And what I&rsquo;m saying,&rdquo; began Tim, &ldquo;is this. Everyone is entitled to encrypt
their data. With the proper warrants the government should be able to access
someone&rsquo;s personal data. If that data is encrypted, the government should be
able to task really smart people to figure out the key for that one item. This
should not affect someone else&rsquo;s encryption.</p>

<p>&ldquo;Now to the point of unbreakable electronic locks,&rdquo; continued Tim. &ldquo;If these are
truly unbreakable, why aren&rsquo;t they used everywhere and why are hackers able to
break into things?&rdquo;</p>

<p>James&#8217; eyes shone for a moment before he started his response. &ldquo;That&rsquo;s actually
a really good question. Let me back up a bit to explain.</p>

<p>&ldquo;A &lsquo;hacker&rsquo; in the traditional sense is actually not too much more than a con
man. The majority of major breaks are what are called &lsquo;social engineering
attacks.&rsquo; Instead of exploiting vulnerabilities in hardware or software, they
exploit vulnerabilities in people. From Wikipedia,</p>

<blockquote><p>Social engineering, in the context of information security, refers to
psychological manipulation of people into performing actions or divulging
confidential information.</p></blockquote>

<p>&ldquo;So most hackers get passwords by tricking other people into divulging them.
Obviously if you have the password, this whole discussion of encryption is moot.
And because it&rsquo;s so easy to get ahold of a password, there is a big push lately
to use what&rsquo;s called &lsquo;two factor authentication.&rsquo; Instead of requiring just a
password to unlock things, you need a password plus some sort of one-time-use
code that is generated securely, usually through an app on your phone.</p>

<p>&ldquo;The other major types of vulnerabilities access data through poor software
coding practices. There are two common attacks: cross-site scripting attacks
and SQL injection attacks. These attacks target the point of user-input. If not
properly &lsquo;sanitized&rsquo; to remove undesirable inputs, there are some circumstances
where you can for example, enter computer code in a username field, and instead
of just having that input be viewable on the screen, it accidentally gets
treated as code and run on the hosted service. This is known as &lsquo;remote
code execution&rsquo;: getting someone else to run code that you wrote. If you can
achieve remote code execution, you can intercept what the software does after it
has unencrypted the data.</p>

<p>&ldquo;For relatively small applications, the attack vector is small; there are only
so many surfaces in which to enter input, so it&rsquo;s relatively feasible to check
them all diligently. As software systems grow, complexities usually end up
growing quadratically or even exponentially with the number of features added.
It becomes really hard to exhaustively check all attack vectors, and usually
large companies have whole departments devoted to this checking.</p>

<p>&ldquo;So now that we know how the majority of &lsquo;hacking&rsquo; works, let&rsquo;s talk about
encryption. From Wikipedia:</p>

<blockquote><p>Encryption is the process of encoding messages or information in such a way
that only authorized parties can read it. Encryption does not of itself
prevent interception, but denies the message content to the interceptor.</p></blockquote>

<p>&ldquo;At this point, we can clarify the distinction between the two: &lsquo;hacking&rsquo; is
gaining unauthorized access to a software system, while &lsquo;breaking encryption&rsquo; is
reading a message that you weren&rsquo;t intended to. Hacking deals with privilege
escalation, and encryption deals with privacy.</p>

<p>&ldquo;There are two types of encryption, but they both share a common goal: taking a
hunk of data and scrambling it in a way that makes it easy to unscramble (given
the password) yet near-impossible otherwise. The two types are called
&lsquo;encryption at rest&rsquo; and &lsquo;encryption in transit.&rsquo; Encryption at rest deals with
storing files securely on a hard drive, such that the privacy of those files are
guaranteed even if the drive is stolen. Encryption in transit deals with
communication: making sure that people can&rsquo;t eavesdrop to discover your payment
information, changed passwords, and other communications.</p>

<p>&ldquo;To put this in context, let&rsquo;s consider a simple messaging application.
Using encryption in transit ensures that the messages sent from one person&rsquo;s
phone to the other can&rsquo;t be eavesdropped, while encryption at rest ensures that
the received messages stored on one person&rsquo;s phone cannot be read unless the
phone is unlocked with a password.&rdquo;</p>

<p>Emma broke the monologue, asking, &ldquo;So you&rsquo;ve mentioned a lot about passwords and
encryption, but here&rsquo;s a simple question: does Apple have the ability to find
out my password? Or if my password is highly secure, does that mean it&rsquo;ll never
be cracked in my lifetime?&rdquo;</p>

<p>&ldquo;This brings up an important issue: trust,&rdquo; James responded. &ldquo;Apple claims
that it uses both of those forms of encryption, but there&rsquo;s no way for you and
me to verify that, other than take their word.</p>

<p>&ldquo;To answer your question about passwords, the conventional wisdom would say no.
Industry standard practice is to store only a &lsquo;hash&rsquo; of your password, not the
password itself. Every time you log in, the password you type is mangled using
the same method that was used to mangle it when you first enter it, and these
mangled versions are compared. This mangling process is &lsquo;one-way&rsquo;: you can&rsquo;t
take the mangled form and go back to the unmangled form, namely your password.</p>

<p>&ldquo;But do you trust Apple to follow this method? Like we said: there&rsquo;s no way to
know other than their reputation. The only way to truly trust software is to
verify the source code of it, finding out for yourself what it does.
Unfortunately, Apple&rsquo;s code is largely proprietary, so we can&rsquo;t. However, there
are many camps that advocate only using &lsquo;open source software&rsquo;: software whose
source can be freely read and inspected. As you might imagine, this type of
software is especially popular with software developers, as it&rsquo;s fun to
inspect the source code of the software you use, with the added benefit that you
can place more trust in it.</p>

<p>&ldquo;So, does Apple have the ability to find out your password? The answer is most
likely no. They can reset your password if you ask for it to be reset, but this
usually involves verifying your identity through your email provider.</p>

<p>&ldquo;And regarding your second question, about whether your password can be cracked,
you&rsquo;re exactly right. A secure password can&rsquo;t be cracked in any reasonable
amount of time.</p>

<p>&ldquo;There are a number of ways to attack password-based systems, the most common
(other than social engineering attacks) being a &lsquo;dictionary attack.&rsquo; This
involves going through entire dictionaries, trying words, phrases, words with
numbers in various places, and words with weird capitalization. So if you have a
short, simple password, you&rsquo;re likely vulnerable to a dictionary attack. Even if
you have a short, complicated password, dictionary attacks tend to be fairly
successful. That&rsquo;s why it&rsquo;s best to have long passwords, because as the
dictionary crackers run out of words, it degenerates into a case of trying all
possible strings. For example, if your password is 16 characters long, they&rsquo;d
have to try all 26<sup>16</sup> possible inputs&mdash;we&rsquo;re talking many, many guesses here.</p>

<p>&ldquo;And when we typically talk about &lsquo;encrypted&rsquo; data, we&rsquo;re talking about data
that has been locked up with a key that&rsquo;s 128 characters long: 26<sup>128</sup>
possibilities! To put that in context, our best guess for the number of atoms in
the universe is close to 10<sup>80</sup>. 26<sup>128</sup> is an absolutely huge number.</p>

<p>&ldquo;Since you sound curious, the math that protects these encryption schemes is a
problem called &lsquo;prime factorization.&rsquo; Basically, if you take two really big
prime numbers <em>p</em> and <em>q</em> and multiply them, the number you get is <em>pq</em>, and
only has two factors: <em>p</em> and <em>q</em>. If you know <em>pq</em> and want to get <em>q</em>, you
&lsquo;divide&rsquo; by the key <em>p</em>. Division on modern computers is super fast, so
decrypting some data with the correct password is too. However, if you chose a
large, random key <em>p</em> in the first place, it will take a really long time to
guess what the key actually was before you can do the division.</p>

<p>&ldquo;That&rsquo;s a lot of information. With respect to the situation with Apple, all
iPhone hard drives are encrypted at rest, meaning their data cannot be decoded
without the lock password. The FBI wanted a way to circumvent this, by being
able to try brute-forcing lock passwords without the phone self-destructing.
In order to do this, Apple would have had to write code that allowed that to
happen. Apple&rsquo;s argument was that this act of writing code amounted to compelled
speech, which is protected by the Constitution, and which has legal precedent
when applied to code.</p>

<p>&ldquo;After the case between FBI and Apple, it prompted many discussions about
whether encryption itself should be legal. In particular, there is a draft of a
bill in the Senate Intelligence Committee that is particularly foreboding for
the legal use of encryption. That&rsquo;s why I broached the subject in the first
place, as I saw this in the news the other day. It&rsquo;s pretty concerning that
people want to see encryption weakened so that law-abiding citizens cannot have
privacy for the sake of denying criminals their privacy.&rdquo;</p>

<p>The group had finally arrived back home at their building. They passed inside
and headed back upstairs. &ldquo;No kidding that was a lot of information,&rdquo; said Emma.
&ldquo;And I can definitely see where you&rsquo;re coming from; it scares me a bit too when
you put it that way. I&rsquo;m glad you brought it up though. I feel like I have a
grasp on things now that I didn&rsquo;t before. Thanks.&rdquo;</p>

<!-- vim:ft=pandoc.liquid
-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SML Dev Setup]]></title>
    <link href="https://blog.jez.io/sml-dev-setup/"/>
    <updated>2016-03-09T21:06:15-05:00</updated>
    <id>https://blog.jez.io/sml-dev-setup</id>
    <content type="html"><![CDATA[<p>When it comes right down to it, SML is a pretty great language. It&rsquo;s clear that
extensive thought has gone into its design and implementation. I quite enjoy
programming in SML, due in no small part to my collection of workflow hacks that
make editing and developing with SML responsive and interactive.</p>

<!-- more -->


<p>We&rsquo;re going to be walking through a couple easy steps you can take to make
developing SML feel more fluid, both in and out of your editor. I have a slight
preference for Vim on OS X, but many of these steps are platform agnostic.</p>

<h2>Installing SML Locally</h2>

<p>While developing SML in a remote environment like the shared Andrew Unix
machines makes it easy to dive right in, working with SML for prolonged periods
of time is best done locally.</p>

<p>On OS X and Ubuntu, the two most popular SML implementations are already
packaged. Take the time to install a version of SML right now. At CMU, we use
<a href="http://smlnj.org/">SML/NJ</a>, which is convenient because it has a REPL that lets you play
around with SML interactively. If you&rsquo;d like to play around with compiling and
distributing programs written in SML, you might want to install <a href="http://www.mlton.org/">MLton</a>.</p>

<figure class='code'><figcaption><span>Install SML from your package manager</span></figcaption><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># SML/NJ on OS X</span>
</span><span class='line'>brew install smlnj
</span><span class='line'><span class="c"># -- or --</span>
</span><span class='line'><span class="c"># MLton on OS X</span>
</span><span class='line'>brew install mlton
</span><span class='line'>
</span><span class='line'><span class="c"># SML/NJ on Ubuntu</span>
</span><span class='line'>sudo apt-get install smlnj
</span><span class='line'><span class="c"># -- or --</span>
</span><span class='line'><span class="c"># MLton on Ubuntu</span>
</span><span class='line'>sudo apt-get install mlton</span></code></pre></td></tr></table></div></figure>


<p>Feel free to install both if you&rsquo;d like; they&rsquo;ll play nicely with each other and
each offers advantages over the other.</p>

<p>Note for OS X users: if you&rsquo;ve never used <a href="http://brew.sh">Homebrew</a> before, you&rsquo;ll need
to <a href="http://brew.sh">install it first</a>.</p>

<h2>Getting Comfortable with SML/NJ</h2>

<p>The rest of these steps should apply regardless of whether you&rsquo;re working on SML
locally or remotely.</p>

<p>One thing that I&rsquo;ve seen far too many times from course documentation is that
they tell students to run their code like this:</p>

<ol>
<li>Run <code>sml</code></li>
<li>Type <code>use "foo.sml";</code> or <code>CM.make "sources.cm";</code> at the REPL</li>
</ol>


<p>Don&rsquo;t get me wrong; this works, but there&rsquo;s a better way. Being responsible
CLI-citizens, we should always be looking for ways to tab-complete. Let&rsquo;s do
this by changing our workflow:</p>

<ol>
<li>Run <code>sml foo.sml</code> or <code>sml -m sources.cm</code></li>
</ol>


<p>Look at that! We&rsquo;ve,</p>

<ul>
<li>dropped a step (having to launch the REPL first), and</li>
<li>introduced tab completion into our workflow (because the shell has filename
completion)</li>
</ul>


<p>It&rsquo;s the little things, but they add up.</p>

<h2>Enhancing the REPL</h2>

<p>Speaking of the little things, when using the SML REPL, you don&rsquo;t have access to
all the usual command line niceties like command history and access to arrow
keys for editing, let alone Vi-like keybindings. To get started, you&rsquo;ll have to
change how you launch the SML/NJ REPL. In particular, we&rsquo;re going to preface our
commands with <code>rlwrap</code>:</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># instead of this...</span>
</span><span class='line'><span class="gp">$ </span>sml
</span><span class='line'>
</span><span class='line'><span class="c"># use this:</span>
</span><span class='line'><span class="gp">$ </span>rlwrap sml</span></code></pre></td></tr></table></div></figure>


<p><code>rlwrap</code> stands for &ldquo;readline wrap.&rdquo; Readline is a library that simply adds to a
REPL program all the features mentioned above:</p>

<ul>
<li>Command history tracking</li>
<li>Line editing with arrow keys</li>
<li>Configurability through the <code>~/.inputrc</code> file

<ul>
<li>We can use this to get fancy features like Vi keybindings</li>
</ul>
</li>
</ul>


<p>For more information, see <a href="https://github.com/jez/dotfiles/blob/ed8e531eebe43a8aef05fc4cb768157d03408cea/inputrc#L12-L14">these lines</a> of my inputrc, a small part of
my <a href="https://github.com/jez/dotfiles">dotfiles repo</a> on GitHub.</p>

<h2>Setting Up Vim</h2>

<p>Programming is so much more enjoyable when you&rsquo;re not fighting your editor. For
me, this means striving to get the most out of Vim. In this section, I&rsquo;ll
outline all the cool tips and tricks I have for developing SML in Vim.</p>

<p>But first, if you&rsquo;ve never taken a look into how to configure Vim, I suggest you
start out by walking through this quick workshop called <a href="https://github.com/jez/vim-as-an-ide">Vim as an
IDE</a>. It&rsquo;ll teach you where to start when configuring Vim and get
you set up with a bunch of standard plugins that improve on the standard Vim
experience tenfold.</p>

<p>No actually, take a second and <a href="https://github.com/jez/vim-as-an-ide">walk through it</a>. We&rsquo;ll still be
here when you&rsquo;re done, and you&rsquo;ll appreciate Vim more when you&rsquo;re done.</p>

<h3>Syntastic</h3>

<p>From the Syntastic documentation:</p>

<blockquote><p>Syntastic is a syntax checking plugin for Vim that runs files through
external syntax checkers and displays any resulting errors to the user. This
can be done on demand, or automatically as files are saved. If syntax errors
are detected, the user is notified and is happy because they didn&rsquo;t have to
compile their code or execute their script to find them.</p></blockquote>

<p>And the best part? Syntastic ships with a checker for SML by default if you
have SML/NJ installed.</p>

<p>If you didn&rsquo;t just install <a href="https://github.com/scrooloose/syntastic">Syntastic</a> from the Vim as an IDE
walkthrough, you can <a href="https://github.com/scrooloose/syntastic">visit their homepage</a> for installation
instructions. Go ahead and do this now, then try writing this in a file called
<code>test.sml</code>:</p>

<figure class='code'><figcaption><span>test.sml</span></figcaption><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='sml'><span class='line'><span class="kr">val</span> <span class="nv">foo</span> <span class="p">:</span> <span class="n">string</span> <span class="p">=</span> <span class="mi">42</span></span></code></pre></td></tr></table></div></figure>


<p>You should see an &lsquo;x&rsquo; next to the line and a description of the error from the
type checker. You can imagine how handy this is.</p>

<h3>Extra Syntastic Setup</h3>

<p>Syntastic has their own set of <a href="https://github.com/scrooloose/syntastic#settings">recommended settings</a> that
you can add at your discretion. At the very least, I&rsquo;d suggest adding these
lines to your vimrc:</p>

<figure class='code'><figcaption><span>.vimrc</span></figcaption><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">...</span>
</span><span class='line'>
</span><span class='line'>augroup mySyntastic
</span><span class='line'>  <span class="c">" tell syntastic to always stick any detected errors into the location-list</span>
</span><span class='line'>  <span class="k">au</span> <span class="nb">FileType</span> sml <span class="k">let</span> <span class="nv">g:syntastic_always_populate_loc_list</span> <span class="p">=</span> <span class="m">1</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">" automatically open and/or close the location-list</span>
</span><span class='line'>  <span class="k">au</span> <span class="nb">FileType</span> sml <span class="k">let</span> <span class="nv">g:syntastic_auto_loc_list</span> <span class="p">=</span> <span class="m">1</span>
</span><span class='line'>augroup END
</span><span class='line'>
</span><span class='line'><span class="c">" press &lt;Leader&gt;S (i.e., \S) to not automatically check for errors</span>
</span><span class='line'>nnoremap <span class="p">&lt;</span>Leader<span class="p">&gt;</span>S <span class="p">:</span>SyntasticToggleMode<span class="p">&lt;</span>CR<span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span></span></code></pre></td></tr></table></div></figure>


<p>By default, whenever you save your file, Syntastic will place symbols in Vim&rsquo;s
<em>sign column</em> next to lines with errors. The first two settings above tell
Syntastic to also show a summarized list of errors at the bottom of the screen.
The final setting lets you press <code>&lt;Leader&gt;S</code> (which is usually just <code>\S</code>) to
disable all that. This is useful when you&rsquo;re still unfinished and you know your
SML isn&rsquo;t going to type check. Press it again to re-enable it.</p>

<p>Also, a tip for those who&rsquo;ve never used Vim&rsquo;s location list feature before: you
can close the list with <code>:lclose</code>.</p>

<h3><code>vim-better-sml</code></h3>

<p>The curious at this point might be wondering if Syntastic is smart enough to
figure out when the file you&rsquo;re using requires a CM file to compile and uses it
to show you where the errors are instead. As it turns out: no, <a href="https://github.com/scrooloose/syntastic/pull/1719">that&rsquo;s not a
feature Syntastic wants to include</a> by default. However, the
functionality isn&rsquo;t hard to implement, and there&rsquo;s already a plugin for it!</p>

<p><a href="https://github.com/jez/vim-better-sml">vim-better-sml</a> is one of my Vim plugins. Here&rsquo;s a quick
rundown of its features:</p>

<ul>
<li>As already mentioned, it will detect when your file requires a CM file to
build, and will pass along the information to Syntastic</li>
<li><code>let</code> expressions are indented one level under <code>fun</code> declarations</li>
<li><code>*.sig</code> files are properly detected as SML signature files</li>
<li>Apostrophe characters are treated as keywords characters</li>
<li>The comment string is properly registered for SML files</li>
</ul>


<p>For more information, including how to install it, check out the homepage:
<a href="https://github.com/jez/vim-better-sml">vim-better-sml</a>.</p>

<h2>General Vim Settings</h2>

<p>As a quick addendum, one common complaint people have when editing SML is that
it forces the line to wrap if it extends to 80 characters. Some people don&rsquo;t
like that it does this, and others don&rsquo;t like that it doesn&rsquo;t do it frequently
enough (namely, it only wraps the line if your cursor extends past 80
characters, not the end of the line).</p>

<p>If you don&rsquo;t want Vim to do any of this wrapping, run this:</p>

<figure class='code'><figcaption><span>Disable hard line wrapping</span></figcaption><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">setlocal</span> textwidth<span class="p">=</span><span class="m">0</span></span></code></pre></td></tr></table></div></figure>


<p>If you&rsquo;d like this change to persist between Vim sessions, add it to
<code>~/.vim/after/ftplugin/sml.vim</code>. These folders and file likely don&rsquo;t exist
yet; you&rsquo;ll have to create them. The <code>after</code> folder in Vim is used to override
settings loaded from plugins. As you might have guessed, files in here are run
after plugin code is.</p>

<p>Conversely, if you&rsquo;d like a little better idea when Vim&rsquo;s going to hard wrap
your line, you can add this line to your vimrc:</p>

<figure class='code'><figcaption><span>Show a color column</span></figcaption><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">set</span> colorcolumn<span class="p">+=</span><span class="m">0</span></span></code></pre></td></tr></table></div></figure>


<p>Note: this will only work if you&rsquo;re using Vim 7.4 or above. This setting tells
Vim to draw a solid column at the same width as the value of the <code>textwidth</code>
setting.</p>

<h2>TL;DR</h2>

<p>We covered a lot, so here&rsquo;s a quick recap:</p>

<ul>
<li>Install SML locally. It&rsquo;s super easy to do on OS X and Linux (use your package
manager), and means you don&rsquo;t have have a Wi-Fi connection to develop SML.</li>
<li>Invest time into learning Vim. Here&rsquo;s a reference: <a href="https://github.com/jez/vim-as-an-ide">Vim as an
IDE</a>.</li>
<li>Install <a href="https://github.com/scrooloose/syntastic">Syntastic</a>. It tells you what lines your errors are on.</li>
<li>Install <a href="https://github.com/jez/vim-better-sml">vim-better-sml</a>. It includes some features Syntastic
doesn&rsquo;t by default, and includes a couple extras.</li>
<li>Consider using <code>setlocal textwidth=0</code> or <code>set colorcolumn+=0</code> to deal with the
80-character restriction when writing SML files.</li>
</ul>


<p>And as always, you can see even more Vim settings in my <a href="https://github.com/jez/dotfiles">dotfiles
repo</a> on GitHub.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Starter Zsh Setup]]></title>
    <link href="https://blog.jez.io/starter-zsh-setup/"/>
    <updated>2016-01-03T00:14:16-05:00</updated>
    <id>https://blog.jez.io/starter-zsh-setup</id>
    <content type="html"><![CDATA[<p>Zsh has given me so much mileage with respect to efficiency at the command line.
Looking back I&rsquo;m a little sad I didn&rsquo;t switch to it sooner. One of the reasons
why it took so long was that I didn&rsquo;t know where to start; with this in mind,
I&rsquo;ve collected some of the zsh-specific bits of my dotfiles into one place to
help people hit the ground running.</p>

<!-- more -->


<p>To cut to the chase, you can find my <a href="https://github.com/jez/starter-zshrc">starter zshrc</a> on GitHub. It
contains usage information as well as loads of inline comments to give you a
line-by-line summary.</p>

<p>Note: it&rsquo;s an <em>starter</em> zshrc. What I mean by this is that it&rsquo;s more of
a skeleton. It&rsquo;s been crafted with the assumption that you&rsquo;re coming from bash
and you already have some bash config that you&rsquo;re weary to part with. The
content here aims to be minimally invasive, and since zsh is largely compatible
with bash, the rest of your config should fit right in.</p>

<h2>Going Further</h2>

<p>I have even more zsh-specific and general configuration nuggets in my personal
dotfiles, which are <a href="https://github.com/jez/dotfiles">also on GitHub</a>. I add to them nearly every day,
and I&rsquo;m pretty fond of them if I do say so myself. You might want to read
<a href="http://blog.jez.io/2015/03/10/noteworthy-dotfile-hacks/">Noteworthy Dotfile Hacks</a> if you&rsquo;re looking for a quick overview of some
snippets and features I&rsquo;ve collected into my dotfiles.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leaking Free Disk Space]]></title>
    <link href="https://blog.jez.io/2015/08/03/leaking-free-disk-space/"/>
    <updated>2015-08-03T03:05:31-04:00</updated>
    <id>https://blog.jez.io/2015/08/03/leaking-free-disk-space</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been watching a disk space leakage creep slowly upwards for months now;
finally, I figured out where it was going!</p>

<!-- more -->


<p>Whenever I set up a VPS, I follow Brian Kennedy&rsquo;s excellent <a href="http://plusbryan.com/my-first-5-minutes-on-a-server-or-essential-security-for-linux-servers">My First 5 Minutes
On A Server; Or, Essential Security for Linux Servers</a>. It covers
setting up a number of initial tools that make server administration much
easier:</p>

<ul>
<li>fail2ban, for blocking suspicious log in activity</li>
<li>setting up a non-root user</li>
<li>ufw, a simple firewall program</li>
<li>unattended-upgrades, which installs security upgrades periodically</li>
<li>logwatch, so you can read a digest of what&rsquo;s happened in your logs</li>
</ul>


<p>Ever since I set up my VPS, I&rsquo;d seen the disk space creep up in the daily
logwatch digest. I had looked a few times and figured it must be related to some
sort of misconfiguration of the Ruby app server I have running on it right now.</p>

<p>Recently, it got up to more than half of my disk space gone. For a VPS that I
used maybe twice a month, this was ridiculous. I investigated once more and
finally came up with the culprit: <code>unattended-upgrades</code> wasn&rsquo;t autoremoving
packages. I had gigabytes worth of packages that could be autoremoved.</p>

<h2>Solution</h2>

<p>There&rsquo;s a one-line config file fix. Add this to
/etc/apt/apt.conf.d/50unattended-upgrades:</p>

<figure class='code'><figcaption><span>/etc/apt/apt.conf.d/50unattended-upgrades</span></figcaption><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class=''><span class='line'>...
</span><span class='line'>// Do automatic removal of new unused dependencies after the upgrade
</span><span class='line'>// (equivalent to apt-get autoremove)
</span><span class='line'>Unattended-Upgrade::Remove-Unused-Dependencies "true";
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>Update: It looks like a bug in unattented-upgrades is <a href="https://bugs.launchpad.net/ubuntu/+source/unattended-upgrades/+bug/1267059">preventing it from
automatically removing header packages</a>. For the time being you will have
to either manually auto-remove these packages, or add <code>sudo apt-get autoremove
-y</code> to your crontab.</p>

<p>Update: The bug has been addressed and closed. It now correctly removes header
packages!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker Tips and Cheatsheet]]></title>
    <link href="https://blog.jez.io/2015/07/12/docker-tips-and-cheatsheet/"/>
    <updated>2015-07-12T22:32:27-04:00</updated>
    <id>https://blog.jez.io/2015/07/12/docker-tips-and-cheatsheet</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been using Docker for a couple side projects lately, but only
intermittently. That means every time I try to get back into things, I spend the
first 15 minutes or so trying to remember all the little tricks I&rsquo;ve picked up
from previous Google searches and hunts through the documentation. Rather than
continue to suffer through this cycle, I&rsquo;ve written them down here to help you
and me ramp up more quickly on our next Docker projects.</p>

<!-- more -->


<h2>Making your Docker experience easier: Docker Compose</h2>

<p>Half the complexity of Docker is wrapped up in its large, verbose set of command
line arguments and flags. Luckily, Docker has a tool called <a href="https://docs.docker.com/compose/">Docker Compose</a>
that lets us translate all our command line flags into a <code>.yml</code> file. This makes
it much easier to remember how to build and run your containers, as well as to
communicate with your teammates; you no longer need to a common &ldquo;setup.sh&rdquo;
script that remembers what obscure Docker commands and flags you used to set
things up. If you&rsquo;ve never heard of it, you might want to <a href="https://docs.docker.com/compose/">check it out
now</a>. I&rsquo;ll be mixing-and-matching my favorite <code>docker</code> and <code>docker-compose</code>
commands through the rest of the post.</p>

<h2>TL;DR</h2>

<p>Here&rsquo;s a quick cheatsheet:</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Build your whole Docker Compose project...</span>
</span><span class='line'>docker-compose build
</span><span class='line'><span class="c"># ...or just build one piece of it</span>
</span><span class='line'>docker-compose build <span class="o">[</span>app|db|etc...]
</span><span class='line'>
</span><span class='line'><span class="c"># Start your Docker Compose project</span>
</span><span class='line'>docker-compose up -d
</span><span class='line'><span class="c"># View the logs for this docker-compose proejct</span>
</span><span class='line'>docker-compose logs
</span><span class='line'><span class="c"># Stop running containers</span>
</span><span class='line'>docker-compose stop
</span><span class='line'>
</span><span class='line'><span class="c"># remove stopped containers</span>
</span><span class='line'>docker rm <span class="k">$(</span>docker ps -a | grep Exited | awk <span class="s1">'{print $1;}'</span><span class="k">)</span>
</span><span class='line'><span class="c"># or, to remove the stopped containers that were started by Docker Compose</span>
</span><span class='line'>docker-compose rm
</span><span class='line'><span class="c"># remove untagged images</span>
</span><span class='line'>docker rmi <span class="k">$(</span>docker images -q --filter <span class="s2">"dangling=true"</span><span class="k">)</span>
</span><span class='line'><span class="c"># Clean up dangling volumes</span>
</span><span class='line'><span class="c"># (see the post below for how to install the python script)</span>
</span><span class='line'>sudo python docker_clean_vfs.py
</span><span class='line'><span class="c"># Better yet, remove dangling volumes before they're created by using -v</span>
</span><span class='line'>docker-composer rm -v</span></code></pre></td></tr></table></div></figure>


<p>Keep in mind that Docker Compose needs to always read your <code>docker-compose.yml</code>
file, so make sure to always run <code>docker-compose</code> commands from the root of your
project.</p>

<h2>Building your app</h2>

<p>Docker Compose&rsquo;s biggest advantage is that it simplifies building your
Dockerized app to just</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class=''><span class='line'>docker-compose build</span></code></pre></td></tr></table></div></figure>


<p>Most apps, though, have a couple Docker Compose targets, like <code>db</code> and <code>app</code> in
this sample <code>docker-compose.yml</code> file:</p>

<figure class='code'><figcaption><span>docker-compose.yml</span></figcaption><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="na">db</span><span class="pi">:</span>
</span><span class='line'>  <span class="na">image</span><span class="pi">:</span> <span class="s">postgres</span>
</span><span class='line'>  <span class="s">...</span>
</span><span class='line'><span class="na">app</span><span class="pi">:</span>
</span><span class='line'>  <span class="na">build</span><span class="pi">:</span> <span class="s">.</span>
</span><span class='line'>  <span class="s">...</span></span></code></pre></td></tr></table></div></figure>


<p>If all you&rsquo;ve done is made a simple change to <code>app</code>, you can get by with just</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class=''><span class='line'>docker-compose build app</span></code></pre></td></tr></table></div></figure>


<p>without having to rebuild all of <code>db</code> as well.</p>

<h2>Running your app</h2>

<p>To start a Docker Compose app once you&rsquo;ve built it&rsquo;s constituent images:</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class=''><span class='line'>docker-compose up -d</span></code></pre></td></tr></table></div></figure>


<p>The <code>-d</code> flag is so that Docker Compose runs the command as a &ldquo;daemon&rdquo;, or in
the background. I can&rsquo;t think of any cases where you wouldn&rsquo;t want to use this
flag.</p>

<p>To view the logs from your app&rsquo;s running containers:</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class=''><span class='line'>docker-compose logs</span></code></pre></td></tr></table></div></figure>


<p>This will show all the logs output as one, prefixed with their name as specified
in the <code>docker-compose.yml</code> file so you can keep things straight.</p>

<p>To bring your app down (if you started it with <code>-d</code>, otherwise just use <code>^C</code>):</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class=''><span class='line'>docker-compose stop</span></code></pre></td></tr></table></div></figure>


<h2>Getting rid of what Docker left behind</h2>

<p>You&rsquo;ll find after using Docker for a while that your disk usage seems to be
creeping upwards. This annoyed me at first, so I investigated. There are three
places Docker leaves junk behind.</p>

<h3>Stopped Docker containers</h3>

<p>Once you&rsquo;ve stopped your Docker containers, they remain on disk. If you&rsquo;re using
Docker Compose, you can just run the following to get rid of any containers
started by Docker Compose that have now stopped:</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class=''><span class='line'>docker-compose rm</span></code></pre></td></tr></table></div></figure>


<p>If you&rsquo;re not using Docker Compose, you&rsquo;ll have to find them and manually prune
them:</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># find all exited containers (docker ps ...),</span>
</span><span class='line'><span class="c"># and remove these containers (docker rm)</span>
</span><span class='line'>docker rm <span class="k">$(</span>docker ps -a | grep Exited | awk <span class="s1">'{print $1;}'</span><span class="k">)</span></span></code></pre></td></tr></table></div></figure>


<h3>Un-tagged Docker images</h3>

<p>When you&rsquo;re using Docker for developing an app, every time you change and
rebuild your Docker images, you&rsquo;ll leave behind an old, un-tagged image. This is
actually a &ldquo;feature&rdquo; of Docker: all images that you build are cached so that
subsequently builds are instantaneous. However, when we&rsquo;re developing and
generating new images frequently, previous image builds only take up space.</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class=''><span class='line'># find all un-tagged images (docker images ...),
</span><span class='line'># and remove these images (docker rmi)
</span><span class='line'>docker rmi $(docker images -q --filter "dangling=true")</span></code></pre></td></tr></table></div></figure>


<p>You can always tag one of these images if you don&rsquo;t want it to get garbage
collected by the above command.</p>

<h3>Dangling volumes</h3>

<p>Every time you create and mount a volume into a docker container, Docker leaves
behind some state for managing that volume. Unfortunately (and infuriatingly),
the Docker CLI doesn&rsquo;t offer a way to clean these up natively. Luckily, there&rsquo;s
a super handy script online that uses the Docker Python API to handle it.</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class=''><span class='line'># Install Python dependencies (do this only once)
</span><span class='line'>pip install docker-py
</span><span class='line'>
</span><span class='line'># Download the script
</span><span class='line'>wget https://raw.githubusercontent.com/dummymael/dotfiles/1859a36/tools/docker_clean_vfs.py
</span><span class='line'>
</span><span class='line'># Run the script
</span><span class='line'>sudo python docker_clean_vfs.py</span></code></pre></td></tr></table></div></figure>


<p>You can circumvent this madness if you make sure to remove your volumes before
they become dangling by using the following when your Docker Compose project
uses volumes:</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class=''><span class='line'>docker-compose rm -v</span></code></pre></td></tr></table></div></figure>


<h2>General Docker Wisdom</h2>

<p>Apart from that (small?) set of commands, the only other way I use Docker is
just writing <code>Dockerfile</code>s and <code>docker-compose.yml</code> files. Most of what you need
to know here comes from experience or looking at example files. I do, though,
have some tidbits of extra advice related to things that tripped me up in my
first Docker experiences.</p>

<p>You have to run <code>docker-compose build web</code> if you change the underlying
Dockerfile and you want the image to be rebuilt. Otherwise, <code>docker-compose up
-d</code> will happily use the old, cached image.</p>

<p>If a command failed, whether it was a one-off <code>docker run</code> command, an image
build, etc., it probably left its intermediate cruft around. See <a href="#getting-rid-of-what-docker-left-behind">Getting rid of
what Docker left behind</a> for more info.</p>

<p>Add an alias for <code>docker-compose</code>. That&rsquo;s far too long to be typing out all the
time. I use <code>alias fig="docker-compose"</code> remembering <a href="https://fig.sh">Docker Compose&rsquo;s
roots</a>.</p>

<p>Once I&rsquo;ve gotten my build environment to the point where I can just change my
core app (i.e., I&rsquo;ve set up the <code>Dockerfile</code> and <code>docker-compose.yml</code> file), I
basically just run</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class=''><span class='line'>fig up -d
</span><span class='line'>
</span><span class='line'>fig logs
</span><span class='line'># observe my project, fix what's wrong
</span><span class='line'>^C &lt;-- quits the logs
</span><span class='line'>fig stop && fig rm -v && fig build web && fig up -d
</span><span class='line'>
</span><span class='line'>fig logs
</span><span class='line'># observe my project, fix what's wrong
</span><span class='line'>^C
</span><span class='line'>fig stop && fig rm -v && fig build web && fig up -d
</span><span class='line'>
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>It helps to understand the difference between &ldquo;images&rdquo; and &ldquo;containers&rdquo;. There
are plenty of ways to remember the difference between the two, but I like the
object-oriented programming analogy: &ldquo;images&rdquo; are to classes like &ldquo;containers&rdquo;
are to objects. The analogy isn&rsquo;t quite perfect, but it&rsquo;s close enough. We
create a new container (object) every time we run (instantiate) the image
(class). Images come with an understanding of what&rsquo;s common to all containers
(like the root file system, software dependencies, and app files), just like
classes know their constructor and member methods.</p>

<h2>More Tips</h2>

<p>Two blog posts were particularly helpful in compiling this list of commands; I&rsquo;d
be remiss to not acknowledge their wonderful work:</p>

<ul>
<li><a href="http://www.carlboettiger.info/2014/08/29/docker-notes.html">Docker tricks of the trade and best practices thoughts</a></li>
<li><a href="http://odino.org/spring-cleaning-of-your-docker-containers/">Spring cleaning of your Docker containers</a></li>
</ul>


<p>I&rsquo;ve entirely focused on the commands you can use to build, run, and manage your
Docker app in this post. The rest is just a matter of getting your <code>Dockerfile</code>
and <code>docker-compose.yml</code> to where you need them to be. For this, I&rsquo;d recommend</p>

<ul>
<li>the Docker documentation on <a href="https://docs.docker.com/articles/dockerfile_best-practices/">Dockerfile best practices</a>, as well as</li>
<li><a href="http://anandmanisankar.com/posts/docker-container-nginx-node-redis-example/">this walkthrough</a> for Dockerizing a sample app (in Node.js, but
the principles are generally applicable)</li>
</ul>


<p>Apart from that, try to find examples of these files that you can adapt to your
needs.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Show where a Python package is used]]></title>
    <link href="https://blog.jez.io/2015/06/12/show-where-a-python-package-is-used/"/>
    <updated>2015-06-12T02:36:05-04:00</updated>
    <id>https://blog.jez.io/2015/06/12/show-where-a-python-package-is-used</id>
    <content type="html"><![CDATA[<p>A while back I was doing some spring cleaning of my Python packages. I noticed
that there were a bunch of packages that I couldn&rsquo;t recall installing. I wanted
to know if I could safely remove them, so I wrote a simple bash script to tell
me called <code>pip-uses</code>.</p>

<!-- more -->


<h2>Source</h2>

<p>Rather than post the source here and let it get more out of date every time I
change it, you can find the source <a href="https://github.com/jez/bin/blob/master/pip-uses">on GitHub</a>. It&rsquo;s in my <a href="https://github.com/jez/bin">bin
repository</a>, where I keep my notable helper scripts; feel free to
poke around.</p>

<h2>Motivations</h2>

<p>I was primarily influenced by Homebrew&rsquo;s <code>brew uses</code> command. It does a nice job
of giving you exactly the information you want, and I think the way the command
is named makes sense.</p>

<figure class='code'><figcaption><span>Homebrew: brew uses</span></figcaption><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class=''><span class='line'>$ brew uses --installed pango
</span><span class='line'>imagemagick</span></code></pre></td></tr></table></div></figure>


<p><code>pip-uses</code> gives you basically the experience:</p>

<figure class='code'><figcaption><span>Pip: pip-uses</span></figcaption><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class=''><span class='line'>$ pip-uses stevedore
</span><span class='line'>virtualenvwrapper</span></code></pre></td></tr></table></div></figure>


<p>In this example, the Python package <code>virtualenvwrapper</code> uses <code>stevedore</code>, just
as <code>imagemagick</code> uses <code>pango</code>. Both commands can save you from accidentally
removing a crucial dependency and answer the burning question, &ldquo;How in the world
did this thing get installed?&rdquo;</p>

<h2>Wish List</h2>

<p>I&rsquo;m not doing much Python development these days, but if I had some spare time
I&rsquo;d love for the script to also have these features:</p>

<ul>
<li>Recursive enumeration of dependencies

<ul>
<li>It&rsquo;d be nice if <code>pip-uses</code> kept recursively searching until it found no more
dependencies. This way, it&rsquo;d be easy to see if you could safely uninstall a
whole slew of packages that you&rsquo;re no longer using.</li>
</ul>
</li>
<li>Operate on more than one package

<ul>
<li>I didn&rsquo;t need it at the time, so I didn&rsquo;t implement it, but it&rsquo;d be nice if
the command took a variable amount of arguments and ran the same logic on
all supplied packages.</li>
</ul>
</li>
<li>Integrate with <code>pip</code>

<ul>
<li>Programs like <code>brew</code> and <code>pip</code> allow developers to add &ldquo;external commands&rdquo;
by adding commands to the <code>PATH</code> that look like <code>brew-xyz</code> or <code>git-xyz</code>. I
couldn&rsquo;t find if there was a special way to add external commands to <code>pip</code>.</li>
</ul>
</li>
</ul>


<p>If you find this script useful and end up implementing one of these feature or
more on top of <code>pip-uses</code>, be sure to send me a Pull Request!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why zsh?]]></title>
    <link href="https://blog.jez.io/why-zsh/"/>
    <updated>2015-03-10T12:58:37-04:00</updated>
    <id>https://blog.jez.io/why-zsh</id>
    <content type="html"><![CDATA[<p>People often ask me why I switched to zsh. Back when I had first switched, I was
hesitant to answer because I was still finding my way around. Now that I&rsquo;ve been
using it, I&rsquo;ve managed to distill down a few things zsh does well that sets it
apart as my shell of choice.</p>

<!-- more -->


<h2>Syntax Highlighting</h2>

<p>In zsh, there&rsquo;s a <a href="https://github.com/zsh-users/zsh-syntax-highlighting">plugin that syntax highlights</a> the
current command line as you type. It&rsquo;s incredibly useful to receive instant
feedback about whether a command you&rsquo;re typing is valid. Turns running commands
at the command line into nearly the same experience as typing code into your
favorite text editor.</p>

<p><a class="image-link" href="https://blog.jez.io/images/zsh-syntax-highlighting.png"><img src="https://blog.jez.io/images/zsh-syntax-highlighting.png"></a></p>

<p>The screenshot above features some of the syntax elements it highlights by
default:</p>

<ul>
<li>commands that exist (also aliases, functions, etc.) are changed to green</li>
<li>those that don&rsquo;t are changed to red</li>
<li>text corresponding to files and folders that exist are underlined</li>
<li>text that looks like a file was misspelled is changed to yellow</li>
<li>text that doesn&rsquo;t correspond to the name of a file nor that looks like a
misspelling for an existing file is left unchanged</li>
</ul>


<p>It also highlights strings, globs, and environment variables (if they&rsquo;re typed
within strings).</p>

<p>There&rsquo;s probably no technical limitation for why this couldn&rsquo;t be done in bash, but
as of yet no one has done it.</p>

<h2>Better Tab Completion</h2>

<p>In zsh when you tab complete, the matches are listed below the current line,
whereas in bash they&rsquo;re listed above it. For an example, check out the
screenshot. I perform the same keystrokes in bash and zsh:</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="gp">$ </span><span class="nb">cd </span>D&lt;TAB&gt;</span></code></pre></td></tr></table></div></figure>


<p><a class="image-link" href="https://blog.jez.io/images/zsh-tab-completion.png"><img src="https://blog.jez.io/images/zsh-tab-completion.png"></a></p>

<p>In bash, pressing TAB prints out the completions followed by a new line. In zsh,
they&rsquo;re simply listed conveniently below the current line. If I continued to
complete many things in that line or ran the command, zsh would overwrite the
old completions, but bash would keep on printing additional lines, taking up
precious screen space.</p>

<h2>Better Completion Support</h2>

<p>When I used bash, I managed to have pretty wide support for tab completion in
programs. I&rsquo;m talking much more than just completing filenames. As such, I was
pretty skeptical that there&rsquo;d be much more that zsh could offer.</p>

<p>While zsh&rsquo;s edge wasn&rsquo;t immediately apparent in this aspect, I&rsquo;d like to declare
it a winner now. I had to fight pretty hard to get my bash completions where
they were. By comparison, zsh comes with so many more completions built in, and
if you decide to use oh-my-zsh (a collection of zsh plugins) on top of zsh,
adding new functionality is one line away.</p>

<p>I now have things like environment variable completion, tmux completion, deep
git command completion, and much more.</p>

<h2>Great, how do I start?</h2>

<p>The first step is to change your shell to zsh: <code>chsh -s $(which zsh)</code>. Once
you&rsquo;ve done that, you&rsquo;ll need a <code>.zshrc</code> and <code>.zshenv</code>. If you&rsquo;re looking for a
reference, you can see my <a href="https://github.com/jez/dotfiles/blob/master/util/misc.zsh"><code>misc.zsh</code></a> file in my <a href="https://github.com/jez/dotfiles">dotfiles</a>
repo on GitHub, a file which eventually gets sourced in my <a href="https://github.com/jez/dotfiles/blob/master/zshrc"><code>.zshrc</code></a>. It
contains most of everything that you need to get started using zsh on OS X. Keep
in mind that it&rsquo;s somewhat opinionated (it heavily favors vim keybindings and
uses oh-my-zsh among other things). You might also want to check out my
<a href="https://blog.jez.io/2015/03/10/noteworthy-dotfile-hacks/">Noteworthy Dotfile Hacks</a> post, where I talked about what I
think are the most notable features I have in my dotfiles.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Noteworthy Dotfile Hacks]]></title>
    <link href="https://blog.jez.io/noteworthy-dotfile-hacks/"/>
    <updated>2015-03-10T01:22:33-04:00</updated>
    <id>https://blog.jez.io/noteworthy-dotfile-hacks</id>
    <content type="html"><![CDATA[<p>I have hundreds of files and folders in my dotfiles repo, and nearly 1000
commits&mdash;there are quite a few hidden gems buried in there that generally don&rsquo;t
get to see the light of day. Rather than wander aimlessly through them, let me
give you the guided tour.</p>

<!-- more -->


<p>I often tell people &ldquo;oh, and you can also go check out my dotfiles repository
for more cool configurations&rdquo; when I&rsquo;m giving out dotfiles advice. If someone
gave me this advice, I know I wouldn&rsquo;t follow up, even if I had the utmost awe
for the recommender. Drudging through config files isn&rsquo;t all that fun, even
though they can do fun things. Why not get rid of the drudgery?</p>

<p>This post is designed to bring the coolest parts of my dotfiles to the top. It&rsquo;s
organized by topic, so feel free to skip around.</p>

<p><strong>Note</strong>: throughout this post, I&rsquo;ll be linking to my dotfiles <em>at a specific
commit</em> on GitHub. While this solves the problem of line-level links breaking on
updates, it means that you&rsquo;ll almost certainly be looking at out-dated code.
Make sure to check out the corresponding file on the <code>master</code> branch for the
most up-to-date version.</p>

<p>Also, I <a href="https://blog.jez.io/2015/03/09/getting-started-with-rcm/">just wrote</a> about one of my biggest dotfile hacks: using rcm
to keep my dotfiles in sync across machines. Be sure to give it a read if you&rsquo;re
running into that problem.</p>

<h2><code>tmux</code></h2>

<p>I have a lot of cool stuff going on in my <code>.tmux.conf</code></p>

<ul>
<li>I <a href="https://github.com/jez/dotfiles/blob/0ca7dfb042e8d0e6790e7142487812517b5a4209/tmux.conf#L1-L4">bind the prefix key to <code>C-f</code></a>, something which I haven&rsquo;t seen
many people do.  I&rsquo;ve never had a problem with it conflicting with commonly
used shortcuts, and it&rsquo;s incredibly easy to press (compared with the common
options of <code>C-a</code> and <code>C-b</code>)</li>
<li>I integrate with two Vim plugins:

<ul>
<li><a href="https://github.com/jez/dotfiles/blob/0ca7dfb042e8d0e6790e7142487812517b5a4209/tmux.conf#L18-L27">vim-tmux-navigator</a>, which lets you jump between vim
splits and tmux splits as if they were the same thing</li>
<li><a href="https://github.com/jez/dotfiles/blob/0ca7dfb042e8d0e6790e7142487812517b5a4209/tmux.conf#L48-L49">tmuxline</a>, which makes my tmux status bar look just like Vim with
vim-airline (it even pulls down the colors from your Vim configuration!).</li>
</ul>
</li>
</ul>


<h2><code>dircolors</code></h2>

<p>I use the GNU <code>dircolors</code> command to change the colors output by the <code>ls</code>
program. After running <code>brew install coreutils</code> on OS X, I&rsquo;m able to see the
colors thanks to <a href="https://github.com/jez/dotfiles/blob/0ca7dfb042e8d0e6790e7142487812517b5a4209/dircolors">this file</a> and <a href="https://github.com/jez/dotfiles/blob/0ca7dfb042e8d0e6790e7142487812517b5a4209/host-Jacobs-MacBook-Air/util/host.sh#L19-L21">this snippet</a> in my zshrc.</p>

<p><a class="image-link" href="https://raw.githubusercontent.com/huyz/dircolors-solarized/master/img/screen-dircolors-in-iTerm2-solarized_dark.png"><img src="https://raw.githubusercontent.com/huyz/dircolors-solarized/master/img/screen-dircolors-in-iTerm2-solarized_dark.png"></a></p>

<p>(image from the <a href="https://github.com/seebi/dircolors-solarized">dircolors-solarized</a> repository on GitHub)</p>

<h2><code>gitconfig</code></h2>

<p>I talked about this <a href="https://blog.jez.io/2015/01/16/mastering-git-log-for-collaboration/">in a previous post</a>, but I have some <a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/host-Jacobs-MacBook-Air/gitconfig#L20-L24">special
settings</a> in my global gitconfig for adding colored decoration to git
log commands. Here&rsquo;s a screenshot from that post:</p>

<p><a class="image-link" href="https://blog.jez.io/images/glla-tartanhacks.png"><img src="https://blog.jez.io/images/glla-tartanhacks.png"></a></p>

<h2><code>aklog cs.cmu.edu</code></h2>

<p>For my friends at CMU, I have <code>aklog cs.cmu.edu</code> in <a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/host-andrew/util/host.zshenv#L1">my ~/.zshenv</a>,
which gets run even when you log in interactively (like what happens when you
<code>scp</code> something), so that I can copy files from my local machine to the SCS AFS
space, which is useful for doing things like making handins. Note that the file
linked to above is a host-specific file that only &ldquo;exists&rdquo; for me on Andrew
machines. You can read more about my setup <a href="https://blog.jez.io/2015/03/09/getting-started-with-rcm/">in my
previous post</a>.</p>

<h2>zsh-syntax-highlighting</h2>

<p>I use a <a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/util/misc.zsh#L79-L80">zsh plugin</a> to syntax highlight my commands as I type them
on the command line, similar to how the fish shell does it. It does various
things, like coloring the command red or green based on whether it exists,
underlines filenames that exist, highlights filenames that might be misspelled
in yellow, highlights built-ins like <code>if</code> and <code>for</code> in orange, etc.</p>

<p>Here are some examples from my setup:</p>

<p><a class="image-link" href="https://blog.jez.io/images/zsh-syntax-highlighting-for-loop.png"><img src="https://blog.jez.io/images/zsh-syntax-highlighting-for-loop.png"></a></p>

<p><a class="image-link" href="https://blog.jez.io/images/zsh-syntax-highlighting.png"><img src="https://blog.jez.io/images/zsh-syntax-highlighting.png"></a></p>

<h2>Automatic Dotfile Updates</h2>

<p>I wrote a pretty robust script that reminds me to update my dotfiles and my
system regularly. All it does is remind me to check for system updates once
every 24 hours, but it works so well that I had updated my system <code>bash</code> version
before I even read about Shell Shock!</p>

<p>The relevant links are <a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/util/auto-update.sh">here</a> for the core script that I <a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/zshrc#L44-L45">source in
my zshrc</a>, and then the following host specific links:</p>

<ul>
<li><a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/host-Jacobs-MacBook-Air/util/host.sh#L69-L86">here</a> for my MacBook</li>
<li><a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/host-ghost.zimmerman.io/util/host.sh#L24-L31">here</a> for my Ubuntu VPS</li>
</ul>


<h2>Shell aliases</h2>

<p>I&rsquo;d like to think that my whole <a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/util/aliases.sh"><code>aliases.sh</code></a> file is golden, but if
you&rsquo;re looking for some specific things I like about it, check out my <a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/util/aliases.sh#L75-L86"><code>git log</code></a>
aliases, which I wrote about <a href="https://blog.jez.io/2015/01/16/mastering-git-log-for-collaboration/">here</a>, and my <a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/util/aliases.sh#L44-L45"><code>chromemem</code></a> alias, which I wrote about <a href="https://blog.jez.io/2014/12/29/google-chrome-a-memory-hog/">here</a>.</p>

<h2>Ruby Virtualenvs</h2>

<p>I wrote about how I use <a href="https://blog.jez.io/2014/12/22/ruby-virtualenvs/">Python Virtualenvs to sandbox Ruby
gems</a>, a post in which I dropped some snippets that you can
use to configure virtualenvwrapper to work with Ruby projects. I actually went
ahead and <a href="https://github.com/jez/dotfiles/tree/eba0202443de6bcc171dbe6bc133fa9fe02357f7/host-Jacobs-MacBook-Air/virtualenvs">fed those files right into rcm</a>, so they&rsquo;ll always be available if I
ever get a new laptop.</p>

<h2><code>ssh</code></h2>

<p>My username on every machine I ssh to for school is <code>jezimmer</code>, but there are
countless servers I can ssh into (7 for <code>unix.andrew.cmu.edu</code>, 99+ for
<code>ghc*.ghc.andrew.cmu.edu</code>, 10 for 15-213, the list goes on). <a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/host-Jacobs-MacBook-Air/ssh/config#L7-L19">These
lines</a> enable me to ssh to any of those machines with just a
hostname, and the username is assumed to be <code>jezimmer</code>.</p>

<h2>iTerm2</h2>

<p>There&rsquo;s not much to show for this one, but in Preferences > General of iTerm2,
you can opt to load your iTerm2 preferences from a specific location. I&rsquo;ve set
this to <code>/Users/jake/.dotfiles</code>, which means that my iTerm2 settings are always
written to my <code>.dotfiles/</code> directory. If I ever make changes to iTerm2, they get
propagated as changes that Git picks up on and which I subsequently check into
Git history.</p>

<h2>Vim</h2>

<p>I&rsquo;m in love with my Vim setup. If you&rsquo;re looking for help getting started
configuring Vim, you should checkout the <a href="https://github.com/jez/vim-as-an-ide">Vim plugins workshop I put
together</a>, which gets you started with a &ldquo;fully-configured&rdquo; Vim
setup. Once you think you&rsquo;ve &ldquo;mastered&rdquo; that and you&rsquo;re ready for more, here are
a list of things I&rsquo;m proud of in my <code>.vimrc</code>:</p>

<ul>
<li><a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/vimrc#L65-L67"><code>set breakindent</code></a> A feature new in Vim 7.4, this allows you to
align wrapped text at the same indentation level as the preceding text.</li>
<li><a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/vimrc#L100-L106">these mappings</a>, which let me move around (move up and down in
particular) in long lines just as if they were short.</li>
<li><a href="https://github.com/jez/dotfiles/blob/eba0202443de6bcc171dbe6bc133fa9fe02357f7/vimrc#L90-L91">this mapping</a>, which lets me open Vim help pages in new tabs</li>
</ul>


<h2>Other</h2>

<p>I&rsquo;ve only highlighted a fraction of my configuration files, but I think I&rsquo;ve
managed to capture a good portion of them. If you thought that one of these
snippets was useful, are having trouble getting something to work, or have
something interesting to share, leave a comment below!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with RCM]]></title>
    <link href="https://blog.jez.io/2015/03/09/getting-started-with-rcm/"/>
    <updated>2015-03-09T19:30:39-04:00</updated>
    <id>https://blog.jez.io/2015/03/09/getting-started-with-rcm</id>
    <content type="html"><![CDATA[<p>I recently rewrote most of my dotfiles to clean them up and in the process
decided to take a renewed look at using <a href="https://robots.thoughtbot.com/rcm-for-rc-files-in-dotfiles-repos">rcm</a>&rsquo;s array of features to manage
syncing my dotfiles across multiple servers and hosts.</p>

<!-- more -->


<h2>Installation and Usage</h2>

<p>Thoughbot has written some excellent documentation for rcm, including a whole
set of man pages and a <a href="https://robots.thoughtbot.com/rcm-for-rc-files-in-dotfiles-repos">nice blog post</a> that runs through its core
features. As far as <a href="https://github.com/thoughtbot/rcm#installation">installation</a> goes, there&rsquo;s a package for just
about every platform on top of the standard autotools, so you should have no
problem getting up and running.</p>

<p>Rather than just run through the same stuff, I&rsquo;m going to walk through some of
the places where my experience varied from the examples given in the
documentation.</p>

<h2>Background</h2>

<p>I&rsquo;ve already been using rcm for a while now, though my setup was a little
non-standard as far as rcm installations go; instead of using the system built
into rcm for managing host-specific configuration files, I had <a href="https://github.com/jez/dotfiles/blob/6beee7eb426a21102da174f65d1a706bedc28b57/zshrc#L135-L204">huge case
statements</a> littering my config files. After starting to get a little
traffic for <a href="https://github.com/jez/vim-as-an-ide">some of my other configuration work</a>, I decided it was time to
make my config files something worth looking at.</p>

<p>Thus, given the state of my old files, much of my effort this time around
were spent refactoring my current setup to increase modularity and get it to
integrate nicely with rcm. I think that this use case is a little
under-documented and lacking in first-class support in the suite, so I&rsquo;ll talk
about how I got around this later on. That being said, if you&rsquo;re coming from no
dotfiles management software or are interested in trying out something new,
you&rsquo;ll have a much smoother experience.</p>

<h2>Goals</h2>

<p>My two goals for the refactor that I mentioned above were to</p>

<ul>
<li>make everything modular, so that people could more easily pick and choose
pieces from my dotfiles to include in theirs, and</li>
<li>make it easy to swap around host-specific configurations.</li>
</ul>


<p>While the work required to achieve this setup was a bit hairy, maintaining it
should be straightforward from now on.</p>

<p>If you haven&rsquo;t taken a second to peruse some of the <a href="http://thoughtbot.github.io/rcm/rcm.7.html">documentation</a> yet,
it probably wouldn&rsquo;t hurt to do so now. It&rsquo;s about to get technical.</p>

<h2>Host-independent files</h2>

<p>I started this time around with the host independent files, because they
required no real refactoring. Linking these up was a simple matter of running
commands that looked like</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class=''><span class='line'>$ mkrc &lt;rc-file&gt;</span></code></pre></td></tr></table></div></figure>


<p>I ran this on files like my <code>.vimrc</code>, <code>.tmux.conf</code>, <code>.ackrc</code>, and other simple
files. I also handled my <code>.vim/</code> folder in this step, but slightly differently.
The default rcm behavior is to create symlinks when given a single file, and to
recursively descend and create symlinks when given a folder. For folders like my
<code>.vim/</code> folder, which can get pretty large pretty quickly, I used the <code>-S</code>
option to force rcm to symlink the directory:</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class=''><span class='line'>$ mkrc -S .vim/</span></code></pre></td></tr></table></div></figure>


<p>The first time I ran <code>mkrc</code>, it automatically created a folder called
<code>~/.dotfiles</code>, which is where all my dotfiles files will live from now on. Then,
every time <code>mkrc</code> is run, it moves the file into this folder and creates a
symbolic link where it use to exist. I always thought this was a curious name
for the program, &ldquo;make rc file&rdquo;, but really what I just mentioned is all there
is to it: <code>mkrc</code> <em>moves</em> and <em>links</em> an rc file.</p>

<p><a class="image-link" href="https://blog.jez.io/images/mkrc-host-independent.png"><img src="https://blog.jez.io/images/mkrc-host-independent.png"></a></p>

<p>Above you can see the results of this first step on a couple files: my <code>.vimrc</code>
and my <code>.vim/</code> folder. You can see that where there once were a file and a
folder, there are now two symbolic links, which point to the moved files inside
of my <code>.dotfiles/</code> directory.</p>

<h2>Host-dependent files</h2>

<p>Next up are obviously the host-dependent files, though we can split this
category once more based on which need to be refactored.</p>

<h3>Just Add Water</h3>

<p>For my host-dependent
files that didn&rsquo;t need to be refactored, like my <code>.ssh/config</code> and my
<code>.gitconfig</code> (files which, by the way, I wasn&rsquo;t tracking at all before this
rewrite), I just ran the following command:</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class=''><span class='line'>$ mkrc -o .gitconfig</span></code></pre></td></tr></table></div></figure>


<p>When I&rsquo;m on my Mac, this goes through the same move + link procedure described
above, but it moves the file into the <code>~/.dotfiles/host-Jacobs-MacBook-Air/</code>
subfolder.</p>

<h3>Refactor and Profit</h3>

<p>Finally, I dealt with the piece of my dotfiles that was sorely lacking a
refactor: my <code>.zshrc</code>. For this, I took a cue from <a href="https://github.com/holman/dotfiles">Zach Holman&rsquo;s
dotfiles</a> organization and broke up my zshrc into it&rsquo;s components, like
<code>aliases.sh</code>, <code>colors.sh</code>, and more. Most important of these components was
the <code>host.sh</code> file, which contained all the host-specific configurations that I
was doing. Whenever I deploy my <code>.zshrc</code> on a new host now, rcm will put a
<code>host.sh</code> file in a location where my <code>.zshrc</code> knows where to look, but the
contents of that file change depending on the host. Getting the many <code>host.sh</code>
files in place is where I think mkrc&rsquo;s power can be improved.</p>

<p>The <code>mkrc -o</code> command takes an option that lets you specify a host explicitly
(<code>-B &lt;hostname&gt;</code>) rather than calculating it with the <code>hostname</code> command, but it doesn&rsquo;t
let you specify that you&rsquo;d just like to move the file, rather than move and link
it. As such, when I was refactoring, I created a bunch of files:
<code>host-Jacobs-MacBook-Air.sh</code>, <code>host-ghost.zimmerman.io.sh</code>, etc., creating one
<code>host-&lt;something&gt;.sh</code> file for each host that I needed to deploy my dotfiles to.
Then, for each of these files, I</p>

<ul>
<li>ran <code>mkrc -o -B &lt;hostname&gt; host-&lt;hostname&gt;.sh</code></li>
<li>removed the link created by <code>mkrc</code> (I skipped this step the last time around,
when I had just linked the correct <code>host.sh</code> file for the host I was working
on)</li>
<li>renamed the file that rcm created in the <code>.dotfiles/host-&lt;hostname&gt;/</code> folder
to just <code>host.sh</code>.</li>
</ul>


<p>Since there were a bunch of different host-specific files in my case, this
process was a little tedious. It&rsquo;d have been nice if there was an option to
automate my use case, but I&rsquo;m not sure if it&rsquo;s common enough to warrant
the additional complexity, especially considering it&rsquo;s a one-time cost.</p>

<p>In any case, with all this in place, I had finally met my two goals: everything
was modular, and host-specific configurations were clearly defined and easily
deployable.</p>

<h2>Up Next</h2>

<p>If you&rsquo;re reading this and wondering where to go next, you could:</p>

<ul>
<li>take a dive into the rcm documentation to get started applying it to your own
set of dotfiles</li>
<li>browse my <a href="https://github.com/jez/dotfiles">new-and-improved dotfiles</a> repository on GitHub</li>
<li>wait for an upcoming post where I point out some of the noteworthy things I&rsquo;ve
added in my dotfiles</li>
</ul>


<p>If you&rsquo;re using rcm or trying to get started with it but are having issues, feel
free to drop questions in the comments and I&rsquo;ll see if I can&rsquo;t help sort things
out.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim as an IDE]]></title>
    <link href="https://blog.jez.io/vim-as-an-ide/"/>
    <updated>2015-03-03T00:01:19-05:00</updated>
    <id>https://blog.jez.io/vim-as-an-ide</id>
    <content type="html"><![CDATA[<p>I took some screenshots to accompany my <a href="https://github.com/jez/vim-as-an-ide">Vim as an IDE</a> repo on GitHub.
This is by no means a complete walkthrough! It&rsquo;s just a reference for those who
are curious if they installed everything correctly. This is what my system looks
like for me after each step.</p>

<!-- more -->


<h2>1. <a href="https://github.com/jez/vim-as-an-ide/commit/0673f0c">Create vimrc file</a></h2>

<p>This is what Vim should look like immediately after opening it:</p>

<p><a href="https://blog.jez.io/images/vim-as-an-ide/shot-01.png"><img src="https://blog.jez.io/images/vim-as-an-ide/shot-01.png" alt="Vim as an IDE" /></a></p>

<p>And right after adding the two lines:</p>

<p><a href="https://blog.jez.io/images/vim-as-an-ide/shot-02.png"><img src="https://blog.jez.io/images/vim-as-an-ide/shot-02.png" alt="Vim as an IDE" /></a></p>

<h2>2. <a href="https://github.com/jez/vim-as-an-ide/commit/dff7da3">Add some general settings</a></h2>

<p>After you add these settings, your <code>~/.vimrc</code> should look like this when opened
in Vim:</p>

<p><a href="https://blog.jez.io/images/vim-as-an-ide/shot-03_1.png"><img src="https://blog.jez.io/images/vim-as-an-ide/shot-03_1.png" alt="Vim as an IDE" /></a></p>

<h2>3. <a href="https://github.com/jez/vim-as-an-ide/commit/fc77b04">Enable the mouse</a></h2>

<p>To enable the mouse, you&rsquo;ll have to figure out where the appropriate setting is
in your terminal emulator. Here&rsquo;s a screenshot of where it is in iTerm2 on OS X.</p>

<p><a href="https://blog.jez.io/images/vim-as-an-ide/shot-03.png"><img src="https://blog.jez.io/images/vim-as-an-ide/shot-03.png" alt="Vim as an IDE" /></a></p>

<h2>4. <a href="https://github.com/jez/vim-as-an-ide/commit/1186be2">Set up Vundle boilerplate</a></h2>

<p>If you add the changes introduced at this step before installing Vundle, you&rsquo;ll
get an error that looks like this:</p>

<p><a href="https://blog.jez.io/images/vim-as-an-ide/shot-04.png"><img src="https://blog.jez.io/images/vim-as-an-ide/shot-04.png" alt="Vim as an IDE" /></a></p>

<p>Otherwise, this should be the result of running <code>vim +PluginInstall</code> to install
Vundle for the first time:</p>

<p><a href="https://blog.jez.io/images/vim-as-an-ide/shot-05.png"><img src="https://blog.jez.io/images/vim-as-an-ide/shot-05.png" alt="Vim as an IDE" /></a></p>

<p>Remember, you can use <code>:qall</code> to quit Vim after installing plugins.</p>

<h2>5. <a href="https://github.com/jez/vim-as-an-ide/commit/457f2e2">Make Vim look good</a></h2>

<p>Your experience might diverge a little bit from these screenshots if you choose
a different colorscheme because I&rsquo;ll assume you&rsquo;re setting everything up using
Solarized Dark. If you&rsquo;re on a Mac and you&rsquo;ve imported the iTerm2 colorschemes,
you should be able to find the Solarized Dark theme here:</p>

<p><a href="https://blog.jez.io/images/vim-as-an-ide/shot-06.png"><img src="https://blog.jez.io/images/vim-as-an-ide/shot-06.png" alt="Vim as an IDE" /></a></p>

<p>Making that change should make Vim turn these colors:</p>

<p><a href="https://blog.jez.io/images/vim-as-an-ide/shot-07.png"><img src="https://blog.jez.io/images/vim-as-an-ide/shot-07.png" alt="Vim as an IDE" /></a></p>

<p>Next up is changing your font to a Powerline patched font. If you downloaded and
installed Menlo for Powerline correctly, you should be able to set it using this
panel in the preferences:</p>

<p><a href="https://blog.jez.io/images/vim-as-an-ide/shot-08.png"><img src="https://blog.jez.io/images/vim-as-an-ide/shot-08.png" alt="Vim as an IDE" /></a></p>

<p>Finally, running <code>vim +PluginInstall</code> to install the Solarized Vim colorscheme
and vim-airline:</p>

<p><a href="https://blog.jez.io/images/vim-as-an-ide/shot-09.png"><img src="https://blog.jez.io/images/vim-as-an-ide/shot-09.png" alt="Vim as an IDE" /></a></p>

<p>Here&rsquo;s what the Vim solarized plugind does to our <code>~/.vimrc</code>:</p>

<p><a href="https://blog.jez.io/images/vim-as-an-ide/shot-10.png"><img src="https://blog.jez.io/images/vim-as-an-ide/shot-10.png" alt="Vim as an IDE" /></a></p>

<p>If you chose to install a Powerline patched font, you can let vim-airline use
cooler arrows by uncommenting the line highlighted in this screenshot above, to
make Vim look like this:</p>

<p><a href="https://blog.jez.io/images/vim-as-an-ide/shot-11.png"><img src="https://blog.jez.io/images/vim-as-an-ide/shot-11.png" alt="Vim as an IDE" /></a></p>

<h2>6. <a href="https://github.com/jez/vim-as-an-ide/commit/b7ff90c">Plugins NERDTree and NERDTree Tabs</a></h2>

<p>This will be the last time that I demonstrate running <code>vim +PluginInstall</code>,
because they&rsquo;ll all basically look the same from here on out:</p>

<p><a href="https://blog.jez.io/images/vim-as-an-ide/shot-12.png"><img src="https://blog.jez.io/images/vim-as-an-ide/shot-12.png" alt="Vim as an IDE" /></a></p>

<p>Once you&rsquo;ve installed NERDTree and NERDTree Tabs (and added the settings I
listed for them), you should be able to type <code>\t</code> to bring up something that
looks like this:</p>

<p><a href="https://blog.jez.io/images/vim-as-an-ide/shot-13.png"><img src="https://blog.jez.io/images/vim-as-an-ide/shot-13.png" alt="Vim as an IDE" /></a></p>

<h2>7. <a href="https://github.com/jez/vim-as-an-ide/commit/144f979">Plugin Syntastic</a></h2>

<p>Once you&rsquo;ve installed Syntastic, it should syntax highlight your errors by
displaying little marks next to the offending lines:</p>

<p><a href="https://blog.jez.io/images/vim-as-an-ide/shot-14.png"><img src="https://blog.jez.io/images/vim-as-an-ide/shot-14.png" alt="Vim as an IDE" /></a></p>

<p>You can see that we&rsquo;ve forgotten a semi-colon, and Syntastic is pointing that
out for us.</p>

<p>As I was making these screenshots, I realized that I forgot to include a setting
in the right place. It&rsquo;s fine if you work through the whole workshop, but if you
pick and choose things, namely if you don&rsquo;t follow the steps for <code>vim-gitgutter</code>
eventually, you&rsquo;ll end up with this weird highlighting in the sign column. To
disable this highlighting, you can either wait until the <code>vim-gitgutter</code> step
(coming right up in 4 steps), or you can run this command (the one at the bottom
of the screenshot):</p>

<p><a href="https://blog.jez.io/images/vim-as-an-ide/shot-15.png"><img src="https://blog.jez.io/images/vim-as-an-ide/shot-15.png" alt="Vim as an IDE" /></a></p>

<p>To make the change permanent, you&rsquo;ll have to add that line (<code>:hi clear
SignColumn</code>) to your <code>~/.vimrc</code>.</p>

<h2>8. <a href="https://github.com/jez/vim-as-an-ide/commit/fd2c49c">Plugins vim-easytags and tagbar</a></h2>

<p>After this step, you should be able to bring up a split pane view that shows
your functions, variables, and other identifiers by pressing <code>\b</code>:</p>

<p><a href="https://blog.jez.io/images/vim-as-an-ide/shot-16.png"><img src="https://blog.jez.io/images/vim-as-an-ide/shot-16.png" alt="Vim as an IDE" /></a></p>

<p>If you enabled mouse reporting, you should be able to click on the things in the
pane and jump to the appropriate place in the file. I&rsquo;d strongly recommend that
you read the help for all the keybindings and actions you can use with it.</p>

<h2>9. <a href="https://github.com/jez/vim-as-an-ide/commit/80db74f">Plugin ctrlp</a></h2>

<p>When <code>CtrlP</code> is installed, you can press <code>Ctrl + P</code> to bring up a list of files.
As you type, the list will be filtered to only those that &ldquo;fuzzy match&rdquo; what
you&rsquo;ve typed in. As you can see, I typed in <code>mc</code>, which matched <code>vimrc.vim</code> and
<code>main.c</code>:</p>

<p><a href="https://blog.jez.io/images/vim-as-an-ide/shot-17.png"><img src="https://blog.jez.io/images/vim-as-an-ide/shot-17.png" alt="Vim as an IDE" /></a></p>

<h2>10. <a href="https://github.com/jez/vim-as-an-ide/commit/8d4223f">Plugin A.vim</a></h2>

<p>This plugin introduces a number of commands that you can read in the
documentation that enable opening &ldquo;alternate&rdquo; files, like C/C++ header files,
really quickly. I&rsquo;ve run <code>:AV</code> here as an example of one of the commands it
installs, which opens the alternate file in a vertical split pane.</p>

<p><a href="https://blog.jez.io/images/vim-as-an-ide/shot-18.png"><img src="https://blog.jez.io/images/vim-as-an-ide/shot-18.png" alt="Vim as an IDE" /></a></p>

<h2>11. <a href="https://github.com/jez/vim-as-an-ide/commit/1e5757e">Plugins vim-gitgutter and vim-fugitive</a></h2>

<p><code>vim-gitgutter</code> is really handy: it shows you a <code>+</code>, <code>-</code>, or <code>~</code> next to lines
that have been added, removed, or modified. This is good for both identifying
the pieces of code that have changed while you&rsquo;re working on a file as well as
reminding yourself that you have changes that need to be commited.</p>

<p><a href="https://blog.jez.io/images/vim-as-an-ide/shot-19.png"><img src="https://blog.jez.io/images/vim-as-an-ide/shot-19.png" alt="Vim as an IDE" /></a></p>

<p>Speaking of committing files, <code>vim-fugitive</code> lets you make Git commits from
right within Vim. Simply run <code>:Gcommit</code> to bring up a split pane where you can
craft your commit message:</p>

<p><a href="https://blog.jez.io/images/vim-as-an-ide/shot-20.png"><img src="https://blog.jez.io/images/vim-as-an-ide/shot-20.png" alt="Vim as an IDE" /></a></p>

<p><code>vim-fugitive</code> can do much more than just make commits. Be sure to read the
appropriate documentation to figure out what sorts of cool things you can do!</p>

<h2>12. <a href="https://github.com/jez/vim-as-an-ide/commit/2fe0507">Plugin delimitMate</a></h2>

<p>Finally, using <code>delimitMate</code> you should be able to type an opening delimiter and
have the closing one be inserted automatically. Here&rsquo;s an example on
parentheses:</p>

<p><a href="https://blog.jez.io/images/vim-as-an-ide/shot-21.png"><img src="https://blog.jez.io/images/vim-as-an-ide/shot-21.png" alt="Vim as an IDE" /></a></p>

<h2>13. <a href="https://github.com/jez/vim-as-an-ide/commit/b185e9f">Plugin vim-superman</a></h2>

<p>Once you&rsquo;ve added the appropriate function to your shell initialization file
(<code>~/.bashrc</code>, etc.), you should be able to run <code>vman &lt;command&gt;</code> to open man
pages. Here&rsquo;s an example on <code>vman 3 printf</code>:</p>

<p><a href="https://blog.jez.io/images/printf.3.png"><img src="https://blog.jez.io/images/printf.3.png" alt="Vim as an IDE" /></a></p>

<h2>14. <a href="https://github.com/jez/vim-as-an-ide/commit/44f5225">Plugin vim-tmux-navigator</a></h2>

<p>There&rsquo;s not much to show here, as this step is mostly just introducing
keybindings. If you use <code>tmux</code>, make sure to copy the appropriate snippet into
your <code>~/.tmux.conf</code> to be able to jump between tmux and Vim splits with no added
effort.</p>

<h2>15. <a href="https://github.com/jez/vim-as-an-ide/commit/5ba534e">Syntax plugins</a></h2>

<p>No screenshots again. What syntax highlighting plugins you end up installing is
largely up to you.</p>

<h2>16. <a href="https://github.com/jez/vim-as-an-ide/commit/9089a95">Add all the extra plugins that I use</a></h2>

<p>For these plugins, be sure to check the documentation. Most of them have
screenshots that show what they look like when installed and configured
correctly.</p>

<h2>Wrap Up</h2>

<p>That&rsquo;s it! I can only take you so far in making your Vim awesome. You have to
take yourself the rest of the way by investing a little bit of effort into
reading the documentation for the plugins you think could be useful to you so
that you can fully utilize them. Be sure to comment on the commits with
questions if you&rsquo;re stuck or are wondering why your setup doesn&rsquo;t look similar
to one of the above!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New GitHub Username]]></title>
    <link href="https://blog.jez.io/2015/02/03/new-github-username/"/>
    <updated>2015-02-03T04:01:04-05:00</updated>
    <id>https://blog.jez.io/2015/02/03/new-github-username</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve changed my GitHub username from Z1MM32M4N to jez (hopefully it&rsquo;ll be a
little easier to type now!). Make sure you update any remote URLs for repos of
mine that you&rsquo;ve cloned.</p>

<!-- more -->


<h2>Updating your Git remotes</h2>

<p>If you&rsquo;ve cloned one of my repositories, you can update it&rsquo;s URL by running</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="gp">$ </span>git remote -v</span></code></pre></td></tr></table></div></figure>


<p>to check the current remote URL, which should look something like
<code>https://github.com/Z1MM32M4N/&lt;repo name&gt;</code>. Then, you can run</p>

<figure class='code'><div class="highlight"><table><tr></pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="gp">$ </span>git remote <span class="nb">set</span>-url origin https://github.com/jez/&lt;repo name&gt;</span></code></pre></td></tr></table></div></figure>


<p>to actually change the URL.</p>

<p>Because of the way that GitHub handles username changes, you should be able to
continue using the current URLs at least for the time being, but any time you
pull you&rsquo;ll get a message from GitHub asking to update the remote URLs.</p>

<p>I tried to update all links referencing Z1MM32M4N to use the new username, but
I&rsquo;m sure I&rsquo;ve missed a few. If you find a &ldquo;broken&rdquo; link, shoot me a message
letting me know!</p>
]]></content>
  </entry>
  
</feed>
